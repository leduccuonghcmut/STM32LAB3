
STM32LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003050  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800317c  0800317c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800317c  0800317c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800317c  0800317c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000008c  08003210  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003210  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1bb  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7b  00000000  00000000  0002a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002bff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002cb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017512  00000000  00000000  0002d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d619  00000000  00000000  00044a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826d9  00000000  00000000  0005202b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a94  00000000  00000000  000d4758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003144 	.word	0x08003144

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08003144 	.word	0x08003144

0800014c <isButton_BUT1_Pressed>:
int button_BUT1_LongPressed_flag = 0;
int button_BUT2_LongPressed_flag = 0;
int button_BUT3_LongPressed_flag = 0;


int isButton_BUT1_Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_BUT1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton_BUT1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton_BUT1_Pressed+0x16>
		button_BUT1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton_BUT1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton_BUT1_Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000a8 	.word	0x200000a8

08000170 <isButton_BUT2_Pressed>:
int isButton_BUT2_Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_BUT2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton_BUT2_Pressed+0x16>
		button_BUT2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton_BUT2_Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000ac 	.word	0x200000ac

08000194 <isButton_BUT3_Pressed>:
int isButton_BUT3_Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_BUT3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton_BUT3_Pressed+0x16>
		button_BUT3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton_BUT3_Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000b0 	.word	0x200000b0

080001b8 <getKeyInput>:
		return 1;
	}
	return 0;
}

void getKeyInput(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
		keyReg0[0] = keyReg1[0];
 80001bc:	4b6b      	ldr	r3, [pc, #428]	; (800036c <getKeyInput+0x1b4>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a6b      	ldr	r2, [pc, #428]	; (8000370 <getKeyInput+0x1b8>)
 80001c2:	6013      	str	r3, [r2, #0]
		keyReg1[0] = keyReg2[0];
 80001c4:	4b6b      	ldr	r3, [pc, #428]	; (8000374 <getKeyInput+0x1bc>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a68      	ldr	r2, [pc, #416]	; (800036c <getKeyInput+0x1b4>)
 80001ca:	6013      	str	r3, [r2, #0]
		keyReg2[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d0:	4869      	ldr	r0, [pc, #420]	; (8000378 <getKeyInput+0x1c0>)
 80001d2:	f001 ff77 	bl	80020c4 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b66      	ldr	r3, [pc, #408]	; (8000374 <getKeyInput+0x1bc>)
 80001dc:	601a      	str	r2, [r3, #0]
		if((keyReg0[0] == keyReg1[0]) && (keyReg1[0] == keyReg2[0])){
 80001de:	4b64      	ldr	r3, [pc, #400]	; (8000370 <getKeyInput+0x1b8>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b62      	ldr	r3, [pc, #392]	; (800036c <getKeyInput+0x1b4>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d12f      	bne.n	800024a <getKeyInput+0x92>
 80001ea:	4b60      	ldr	r3, [pc, #384]	; (800036c <getKeyInput+0x1b4>)
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b61      	ldr	r3, [pc, #388]	; (8000374 <getKeyInput+0x1bc>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d129      	bne.n	800024a <getKeyInput+0x92>
			if(keyReg3[0] != keyReg2[0]){
 80001f6:	4b61      	ldr	r3, [pc, #388]	; (800037c <getKeyInput+0x1c4>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b5e      	ldr	r3, [pc, #376]	; (8000374 <getKeyInput+0x1bc>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d00e      	beq.n	8000220 <getKeyInput+0x68>
				keyReg3[0] = keyReg2[0];
 8000202:	4b5c      	ldr	r3, [pc, #368]	; (8000374 <getKeyInput+0x1bc>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a5d      	ldr	r2, [pc, #372]	; (800037c <getKeyInput+0x1c4>)
 8000208:	6013      	str	r3, [r2, #0]
				if(keyReg2[0] == PRESSED_STATE){
 800020a:	4b5a      	ldr	r3, [pc, #360]	; (8000374 <getKeyInput+0x1bc>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d11b      	bne.n	800024a <getKeyInput+0x92>
					button_BUT1_flag = 1;
 8000212:	4b5b      	ldr	r3, [pc, #364]	; (8000380 <getKeyInput+0x1c8>)
 8000214:	2201      	movs	r2, #1
 8000216:	601a      	str	r2, [r3, #0]
					timerForKeyPress = 200;
 8000218:	4b5a      	ldr	r3, [pc, #360]	; (8000384 <getKeyInput+0x1cc>)
 800021a:	22c8      	movs	r2, #200	; 0xc8
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	e014      	b.n	800024a <getKeyInput+0x92>
				}
			} else {
					timerForKeyPress--;
 8000220:	4b58      	ldr	r3, [pc, #352]	; (8000384 <getKeyInput+0x1cc>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	3b01      	subs	r3, #1
 8000226:	4a57      	ldr	r2, [pc, #348]	; (8000384 <getKeyInput+0x1cc>)
 8000228:	6013      	str	r3, [r2, #0]
					if(timerForKeyPress == 0){
 800022a:	4b56      	ldr	r3, [pc, #344]	; (8000384 <getKeyInput+0x1cc>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d10b      	bne.n	800024a <getKeyInput+0x92>
						keyReg3[0] = NORMAL_STATE;
 8000232:	4b52      	ldr	r3, [pc, #328]	; (800037c <getKeyInput+0x1c4>)
 8000234:	2201      	movs	r2, #1
 8000236:	601a      	str	r2, [r3, #0]
						button_BUT1_flag = 1;
 8000238:	4b51      	ldr	r3, [pc, #324]	; (8000380 <getKeyInput+0x1c8>)
 800023a:	2201      	movs	r2, #1
 800023c:	601a      	str	r2, [r3, #0]
						button_BUT1_LongPressed_flag = 1;
 800023e:	4b52      	ldr	r3, [pc, #328]	; (8000388 <getKeyInput+0x1d0>)
 8000240:	2201      	movs	r2, #1
 8000242:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 200;
 8000244:	4b4f      	ldr	r3, [pc, #316]	; (8000384 <getKeyInput+0x1cc>)
 8000246:	22c8      	movs	r2, #200	; 0xc8
 8000248:	601a      	str	r2, [r3, #0]
					}
				}
		}
		keyReg0[1] = keyReg1[1];
 800024a:	4b48      	ldr	r3, [pc, #288]	; (800036c <getKeyInput+0x1b4>)
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	4a48      	ldr	r2, [pc, #288]	; (8000370 <getKeyInput+0x1b8>)
 8000250:	6053      	str	r3, [r2, #4]
		keyReg1[1] = keyReg2[1];
 8000252:	4b48      	ldr	r3, [pc, #288]	; (8000374 <getKeyInput+0x1bc>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	4a45      	ldr	r2, [pc, #276]	; (800036c <getKeyInput+0x1b4>)
 8000258:	6053      	str	r3, [r2, #4]
		keyReg2[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800025a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800025e:	4846      	ldr	r0, [pc, #280]	; (8000378 <getKeyInput+0x1c0>)
 8000260:	f001 ff30 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	461a      	mov	r2, r3
 8000268:	4b42      	ldr	r3, [pc, #264]	; (8000374 <getKeyInput+0x1bc>)
 800026a:	605a      	str	r2, [r3, #4]
		if((keyReg0[1] == keyReg1[1]) && (keyReg1[1] == keyReg2[1])){
 800026c:	4b40      	ldr	r3, [pc, #256]	; (8000370 <getKeyInput+0x1b8>)
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	4b3e      	ldr	r3, [pc, #248]	; (800036c <getKeyInput+0x1b4>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	d12f      	bne.n	80002d8 <getKeyInput+0x120>
 8000278:	4b3c      	ldr	r3, [pc, #240]	; (800036c <getKeyInput+0x1b4>)
 800027a:	685a      	ldr	r2, [r3, #4]
 800027c:	4b3d      	ldr	r3, [pc, #244]	; (8000374 <getKeyInput+0x1bc>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	429a      	cmp	r2, r3
 8000282:	d129      	bne.n	80002d8 <getKeyInput+0x120>
			if(keyReg3[1] != keyReg2[1]){
 8000284:	4b3d      	ldr	r3, [pc, #244]	; (800037c <getKeyInput+0x1c4>)
 8000286:	685a      	ldr	r2, [r3, #4]
 8000288:	4b3a      	ldr	r3, [pc, #232]	; (8000374 <getKeyInput+0x1bc>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	429a      	cmp	r2, r3
 800028e:	d00e      	beq.n	80002ae <getKeyInput+0xf6>
				keyReg3[1] = keyReg2[1];
 8000290:	4b38      	ldr	r3, [pc, #224]	; (8000374 <getKeyInput+0x1bc>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	4a39      	ldr	r2, [pc, #228]	; (800037c <getKeyInput+0x1c4>)
 8000296:	6053      	str	r3, [r2, #4]
				if(keyReg2[1] == PRESSED_STATE){
 8000298:	4b36      	ldr	r3, [pc, #216]	; (8000374 <getKeyInput+0x1bc>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d11b      	bne.n	80002d8 <getKeyInput+0x120>
					button_BUT2_flag = 1;
 80002a0:	4b3a      	ldr	r3, [pc, #232]	; (800038c <getKeyInput+0x1d4>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	601a      	str	r2, [r3, #0]
					timerForKeyPress = 200;
 80002a6:	4b37      	ldr	r3, [pc, #220]	; (8000384 <getKeyInput+0x1cc>)
 80002a8:	22c8      	movs	r2, #200	; 0xc8
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	e014      	b.n	80002d8 <getKeyInput+0x120>
				}
			} else {
					timerForKeyPress--;
 80002ae:	4b35      	ldr	r3, [pc, #212]	; (8000384 <getKeyInput+0x1cc>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	3b01      	subs	r3, #1
 80002b4:	4a33      	ldr	r2, [pc, #204]	; (8000384 <getKeyInput+0x1cc>)
 80002b6:	6013      	str	r3, [r2, #0]
					if(timerForKeyPress == 0){
 80002b8:	4b32      	ldr	r3, [pc, #200]	; (8000384 <getKeyInput+0x1cc>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d10b      	bne.n	80002d8 <getKeyInput+0x120>
						keyReg3[1] = NORMAL_STATE;
 80002c0:	4b2e      	ldr	r3, [pc, #184]	; (800037c <getKeyInput+0x1c4>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	605a      	str	r2, [r3, #4]
						button_BUT2_flag = 1;
 80002c6:	4b31      	ldr	r3, [pc, #196]	; (800038c <getKeyInput+0x1d4>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	601a      	str	r2, [r3, #0]
						button_BUT2_LongPressed_flag = 1;
 80002cc:	4b30      	ldr	r3, [pc, #192]	; (8000390 <getKeyInput+0x1d8>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 200;
 80002d2:	4b2c      	ldr	r3, [pc, #176]	; (8000384 <getKeyInput+0x1cc>)
 80002d4:	22c8      	movs	r2, #200	; 0xc8
 80002d6:	601a      	str	r2, [r3, #0]
					}
				}
		}
		keyReg0[2] = keyReg1[2];
 80002d8:	4b24      	ldr	r3, [pc, #144]	; (800036c <getKeyInput+0x1b4>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a24      	ldr	r2, [pc, #144]	; (8000370 <getKeyInput+0x1b8>)
 80002de:	6093      	str	r3, [r2, #8]
		keyReg1[2] = keyReg2[2];
 80002e0:	4b24      	ldr	r3, [pc, #144]	; (8000374 <getKeyInput+0x1bc>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a21      	ldr	r2, [pc, #132]	; (800036c <getKeyInput+0x1b4>)
 80002e6:	6093      	str	r3, [r2, #8]
		keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80002e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ec:	4822      	ldr	r0, [pc, #136]	; (8000378 <getKeyInput+0x1c0>)
 80002ee:	f001 fee9 	bl	80020c4 <HAL_GPIO_ReadPin>
 80002f2:	4603      	mov	r3, r0
 80002f4:	461a      	mov	r2, r3
 80002f6:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <getKeyInput+0x1bc>)
 80002f8:	609a      	str	r2, [r3, #8]
		if((keyReg0[2] == keyReg1[2]) && (keyReg1[2] == keyReg2[2])){
 80002fa:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <getKeyInput+0x1b8>)
 80002fc:	689a      	ldr	r2, [r3, #8]
 80002fe:	4b1b      	ldr	r3, [pc, #108]	; (800036c <getKeyInput+0x1b4>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	429a      	cmp	r2, r3
 8000304:	d12f      	bne.n	8000366 <getKeyInput+0x1ae>
 8000306:	4b19      	ldr	r3, [pc, #100]	; (800036c <getKeyInput+0x1b4>)
 8000308:	689a      	ldr	r2, [r3, #8]
 800030a:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <getKeyInput+0x1bc>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	429a      	cmp	r2, r3
 8000310:	d129      	bne.n	8000366 <getKeyInput+0x1ae>
			if(keyReg3[2] != keyReg2[2]){
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <getKeyInput+0x1c4>)
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <getKeyInput+0x1bc>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	429a      	cmp	r2, r3
 800031c:	d00e      	beq.n	800033c <getKeyInput+0x184>
				keyReg3[2] = keyReg2[2];
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <getKeyInput+0x1bc>)
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	4a16      	ldr	r2, [pc, #88]	; (800037c <getKeyInput+0x1c4>)
 8000324:	6093      	str	r3, [r2, #8]
				if(keyReg2[2] == PRESSED_STATE){
 8000326:	4b13      	ldr	r3, [pc, #76]	; (8000374 <getKeyInput+0x1bc>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d11b      	bne.n	8000366 <getKeyInput+0x1ae>
					button_BUT3_flag = 1;
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <getKeyInput+0x1dc>)
 8000330:	2201      	movs	r2, #1
 8000332:	601a      	str	r2, [r3, #0]
					timerForKeyPress = 200;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <getKeyInput+0x1cc>)
 8000336:	22c8      	movs	r2, #200	; 0xc8
 8000338:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 200;
					}
				}
		}

}
 800033a:	e014      	b.n	8000366 <getKeyInput+0x1ae>
					timerForKeyPress--;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <getKeyInput+0x1cc>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3b01      	subs	r3, #1
 8000342:	4a10      	ldr	r2, [pc, #64]	; (8000384 <getKeyInput+0x1cc>)
 8000344:	6013      	str	r3, [r2, #0]
					if(timerForKeyPress == 0){
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <getKeyInput+0x1cc>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d10b      	bne.n	8000366 <getKeyInput+0x1ae>
						keyReg3[2] = NORMAL_STATE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <getKeyInput+0x1c4>)
 8000350:	2201      	movs	r2, #1
 8000352:	609a      	str	r2, [r3, #8]
						button_BUT3_flag = 1;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <getKeyInput+0x1dc>)
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
						button_BUT3_LongPressed_flag = 1;
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <getKeyInput+0x1e0>)
 800035c:	2201      	movs	r2, #1
 800035e:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 200;
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <getKeyInput+0x1cc>)
 8000362:	22c8      	movs	r2, #200	; 0xc8
 8000364:	601a      	str	r2, [r3, #0]
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	2000000c 	.word	0x2000000c
 8000370:	20000000 	.word	0x20000000
 8000374:	20000018 	.word	0x20000018
 8000378:	40010800 	.word	0x40010800
 800037c:	20000024 	.word	0x20000024
 8000380:	200000a8 	.word	0x200000a8
 8000384:	20000030 	.word	0x20000030
 8000388:	200000b4 	.word	0x200000b4
 800038c:	200000ac 	.word	0x200000ac
 8000390:	200000b8 	.word	0x200000b8
 8000394:	200000b0 	.word	0x200000b0
 8000398:	200000bc 	.word	0x200000bc

0800039c <display7SEG>:
#include "display7SEG.h"

void display7SEG(int num){
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2101      	movs	r1, #1
 80003a8:	489f      	ldr	r0, [pc, #636]	; (8000628 <display7SEG+0x28c>)
 80003aa:	f001 fea2 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	2102      	movs	r1, #2
 80003b2:	489d      	ldr	r0, [pc, #628]	; (8000628 <display7SEG+0x28c>)
 80003b4:	f001 fe9d 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2104      	movs	r1, #4
 80003bc:	489a      	ldr	r0, [pc, #616]	; (8000628 <display7SEG+0x28c>)
 80003be:	f001 fe98 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2108      	movs	r1, #8
 80003c6:	4898      	ldr	r0, [pc, #608]	; (8000628 <display7SEG+0x28c>)
 80003c8:	f001 fe93 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4895      	ldr	r0, [pc, #596]	; (8000628 <display7SEG+0x28c>)
 80003d2:	f001 fe8e 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2120      	movs	r1, #32
 80003da:	4893      	ldr	r0, [pc, #588]	; (8000628 <display7SEG+0x28c>)
 80003dc:	f001 fe89 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2140      	movs	r1, #64	; 0x40
 80003e4:	4890      	ldr	r0, [pc, #576]	; (8000628 <display7SEG+0x28c>)
 80003e6:	f001 fe84 	bl	80020f2 <HAL_GPIO_WritePin>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2b09      	cmp	r3, #9
 80003ee:	f200 8116 	bhi.w	800061e <display7SEG+0x282>
 80003f2:	a201      	add	r2, pc, #4	; (adr r2, 80003f8 <display7SEG+0x5c>)
 80003f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f8:	08000421 	.word	0x08000421
 80003fc:	0800045f 	.word	0x0800045f
 8000400:	08000475 	.word	0x08000475
 8000404:	080004a9 	.word	0x080004a9
 8000408:	080004dd 	.word	0x080004dd
 800040c:	08000507 	.word	0x08000507
 8000410:	0800053b 	.word	0x0800053b
 8000414:	08000579 	.word	0x08000579
 8000418:	08000599 	.word	0x08000599
 800041c:	080005e1 	.word	0x080005e1
	switch(num){
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2101      	movs	r1, #1
 8000424:	4880      	ldr	r0, [pc, #512]	; (8000628 <display7SEG+0x28c>)
 8000426:	f001 fe64 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2102      	movs	r1, #2
 800042e:	487e      	ldr	r0, [pc, #504]	; (8000628 <display7SEG+0x28c>)
 8000430:	f001 fe5f 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2104      	movs	r1, #4
 8000438:	487b      	ldr	r0, [pc, #492]	; (8000628 <display7SEG+0x28c>)
 800043a:	f001 fe5a 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2108      	movs	r1, #8
 8000442:	4879      	ldr	r0, [pc, #484]	; (8000628 <display7SEG+0x28c>)
 8000444:	f001 fe55 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2110      	movs	r1, #16
 800044c:	4876      	ldr	r0, [pc, #472]	; (8000628 <display7SEG+0x28c>)
 800044e:	f001 fe50 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2120      	movs	r1, #32
 8000456:	4874      	ldr	r0, [pc, #464]	; (8000628 <display7SEG+0x28c>)
 8000458:	f001 fe4b 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 800045c:	e0e0      	b.n	8000620 <display7SEG+0x284>
		case 1:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2102      	movs	r1, #2
 8000462:	4871      	ldr	r0, [pc, #452]	; (8000628 <display7SEG+0x28c>)
 8000464:	f001 fe45 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2104      	movs	r1, #4
 800046c:	486e      	ldr	r0, [pc, #440]	; (8000628 <display7SEG+0x28c>)
 800046e:	f001 fe40 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 8000472:	e0d5      	b.n	8000620 <display7SEG+0x284>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2101      	movs	r1, #1
 8000478:	486b      	ldr	r0, [pc, #428]	; (8000628 <display7SEG+0x28c>)
 800047a:	f001 fe3a 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2102      	movs	r1, #2
 8000482:	4869      	ldr	r0, [pc, #420]	; (8000628 <display7SEG+0x28c>)
 8000484:	f001 fe35 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2108      	movs	r1, #8
 800048c:	4866      	ldr	r0, [pc, #408]	; (8000628 <display7SEG+0x28c>)
 800048e:	f001 fe30 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	2110      	movs	r1, #16
 8000496:	4864      	ldr	r0, [pc, #400]	; (8000628 <display7SEG+0x28c>)
 8000498:	f001 fe2b 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2140      	movs	r1, #64	; 0x40
 80004a0:	4861      	ldr	r0, [pc, #388]	; (8000628 <display7SEG+0x28c>)
 80004a2:	f001 fe26 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 80004a6:	e0bb      	b.n	8000620 <display7SEG+0x284>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2101      	movs	r1, #1
 80004ac:	485e      	ldr	r0, [pc, #376]	; (8000628 <display7SEG+0x28c>)
 80004ae:	f001 fe20 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2102      	movs	r1, #2
 80004b6:	485c      	ldr	r0, [pc, #368]	; (8000628 <display7SEG+0x28c>)
 80004b8:	f001 fe1b 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2104      	movs	r1, #4
 80004c0:	4859      	ldr	r0, [pc, #356]	; (8000628 <display7SEG+0x28c>)
 80004c2:	f001 fe16 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2108      	movs	r1, #8
 80004ca:	4857      	ldr	r0, [pc, #348]	; (8000628 <display7SEG+0x28c>)
 80004cc:	f001 fe11 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2140      	movs	r1, #64	; 0x40
 80004d4:	4854      	ldr	r0, [pc, #336]	; (8000628 <display7SEG+0x28c>)
 80004d6:	f001 fe0c 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 80004da:	e0a1      	b.n	8000620 <display7SEG+0x284>
		case 4:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2102      	movs	r1, #2
 80004e0:	4851      	ldr	r0, [pc, #324]	; (8000628 <display7SEG+0x28c>)
 80004e2:	f001 fe06 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2104      	movs	r1, #4
 80004ea:	484f      	ldr	r0, [pc, #316]	; (8000628 <display7SEG+0x28c>)
 80004ec:	f001 fe01 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2120      	movs	r1, #32
 80004f4:	484c      	ldr	r0, [pc, #304]	; (8000628 <display7SEG+0x28c>)
 80004f6:	f001 fdfc 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2140      	movs	r1, #64	; 0x40
 80004fe:	484a      	ldr	r0, [pc, #296]	; (8000628 <display7SEG+0x28c>)
 8000500:	f001 fdf7 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 8000504:	e08c      	b.n	8000620 <display7SEG+0x284>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2101      	movs	r1, #1
 800050a:	4847      	ldr	r0, [pc, #284]	; (8000628 <display7SEG+0x28c>)
 800050c:	f001 fdf1 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2104      	movs	r1, #4
 8000514:	4844      	ldr	r0, [pc, #272]	; (8000628 <display7SEG+0x28c>)
 8000516:	f001 fdec 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2108      	movs	r1, #8
 800051e:	4842      	ldr	r0, [pc, #264]	; (8000628 <display7SEG+0x28c>)
 8000520:	f001 fde7 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2120      	movs	r1, #32
 8000528:	483f      	ldr	r0, [pc, #252]	; (8000628 <display7SEG+0x28c>)
 800052a:	f001 fde2 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	483d      	ldr	r0, [pc, #244]	; (8000628 <display7SEG+0x28c>)
 8000534:	f001 fddd 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 8000538:	e072      	b.n	8000620 <display7SEG+0x284>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2101      	movs	r1, #1
 800053e:	483a      	ldr	r0, [pc, #232]	; (8000628 <display7SEG+0x28c>)
 8000540:	f001 fdd7 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2104      	movs	r1, #4
 8000548:	4837      	ldr	r0, [pc, #220]	; (8000628 <display7SEG+0x28c>)
 800054a:	f001 fdd2 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2108      	movs	r1, #8
 8000552:	4835      	ldr	r0, [pc, #212]	; (8000628 <display7SEG+0x28c>)
 8000554:	f001 fdcd 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2110      	movs	r1, #16
 800055c:	4832      	ldr	r0, [pc, #200]	; (8000628 <display7SEG+0x28c>)
 800055e:	f001 fdc8 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2120      	movs	r1, #32
 8000566:	4830      	ldr	r0, [pc, #192]	; (8000628 <display7SEG+0x28c>)
 8000568:	f001 fdc3 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2140      	movs	r1, #64	; 0x40
 8000570:	482d      	ldr	r0, [pc, #180]	; (8000628 <display7SEG+0x28c>)
 8000572:	f001 fdbe 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 8000576:	e053      	b.n	8000620 <display7SEG+0x284>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	482a      	ldr	r0, [pc, #168]	; (8000628 <display7SEG+0x28c>)
 800057e:	f001 fdb8 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2102      	movs	r1, #2
 8000586:	4828      	ldr	r0, [pc, #160]	; (8000628 <display7SEG+0x28c>)
 8000588:	f001 fdb3 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2104      	movs	r1, #4
 8000590:	4825      	ldr	r0, [pc, #148]	; (8000628 <display7SEG+0x28c>)
 8000592:	f001 fdae 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 8000596:	e043      	b.n	8000620 <display7SEG+0x284>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	4822      	ldr	r0, [pc, #136]	; (8000628 <display7SEG+0x28c>)
 800059e:	f001 fda8 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2102      	movs	r1, #2
 80005a6:	4820      	ldr	r0, [pc, #128]	; (8000628 <display7SEG+0x28c>)
 80005a8:	f001 fda3 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2104      	movs	r1, #4
 80005b0:	481d      	ldr	r0, [pc, #116]	; (8000628 <display7SEG+0x28c>)
 80005b2:	f001 fd9e 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2108      	movs	r1, #8
 80005ba:	481b      	ldr	r0, [pc, #108]	; (8000628 <display7SEG+0x28c>)
 80005bc:	f001 fd99 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2110      	movs	r1, #16
 80005c4:	4818      	ldr	r0, [pc, #96]	; (8000628 <display7SEG+0x28c>)
 80005c6:	f001 fd94 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	4816      	ldr	r0, [pc, #88]	; (8000628 <display7SEG+0x28c>)
 80005d0:	f001 fd8f 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2140      	movs	r1, #64	; 0x40
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <display7SEG+0x28c>)
 80005da:	f001 fd8a 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 80005de:	e01f      	b.n	8000620 <display7SEG+0x284>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2101      	movs	r1, #1
 80005e4:	4810      	ldr	r0, [pc, #64]	; (8000628 <display7SEG+0x28c>)
 80005e6:	f001 fd84 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2102      	movs	r1, #2
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <display7SEG+0x28c>)
 80005f0:	f001 fd7f 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2104      	movs	r1, #4
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <display7SEG+0x28c>)
 80005fa:	f001 fd7a 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2108      	movs	r1, #8
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <display7SEG+0x28c>)
 8000604:	f001 fd75 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2120      	movs	r1, #32
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <display7SEG+0x28c>)
 800060e:	f001 fd70 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <display7SEG+0x28c>)
 8000618:	f001 fd6b 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 800061c:	e000      	b.n	8000620 <display7SEG+0x284>
		default:
			break;
 800061e:	bf00      	nop
	}
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40010c00 	.word	0x40010c00

0800062c <display7SEG_2>:

void display7SEG_2(int num){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(aa_GPIO_Port, aa_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063a:	48bc      	ldr	r0, [pc, #752]	; (800092c <display7SEG_2+0x300>)
 800063c:	f001 fd59 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(bb_GPIO_Port, bb_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000646:	48b9      	ldr	r0, [pc, #740]	; (800092c <display7SEG_2+0x300>)
 8000648:	f001 fd53 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(cc_GPIO_Port, cc_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	48b6      	ldr	r0, [pc, #728]	; (800092c <display7SEG_2+0x300>)
 8000654:	f001 fd4d 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dd_GPIO_Port, dd_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	48b3      	ldr	r0, [pc, #716]	; (800092c <display7SEG_2+0x300>)
 8000660:	f001 fd47 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ee_GPIO_Port, ee_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066a:	48b0      	ldr	r0, [pc, #704]	; (800092c <display7SEG_2+0x300>)
 800066c:	f001 fd41 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ff_GPIO_Port, ff_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000676:	48ae      	ldr	r0, [pc, #696]	; (8000930 <display7SEG_2+0x304>)
 8000678:	f001 fd3b 	bl	80020f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gg_GPIO_Port, gg_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000682:	48ab      	ldr	r0, [pc, #684]	; (8000930 <display7SEG_2+0x304>)
 8000684:	f001 fd35 	bl	80020f2 <HAL_GPIO_WritePin>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b09      	cmp	r3, #9
 800068c:	f200 8148 	bhi.w	8000920 <display7SEG_2+0x2f4>
 8000690:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <display7SEG_2+0x6c>)
 8000692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000696:	bf00      	nop
 8000698:	080006c1 	.word	0x080006c1
 800069c:	0800070b 	.word	0x0800070b
 80006a0:	08000725 	.word	0x08000725
 80006a4:	08000763 	.word	0x08000763
 80006a8:	080007a1 	.word	0x080007a1
 80006ac:	080007d3 	.word	0x080007d3
 80006b0:	08000811 	.word	0x08000811
 80006b4:	0800085b 	.word	0x0800085b
 80006b8:	08000881 	.word	0x08000881
 80006bc:	080008d7 	.word	0x080008d7
	switch(num){
		case 0:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c6:	4899      	ldr	r0, [pc, #612]	; (800092c <display7SEG_2+0x300>)
 80006c8:	f001 fd13 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d2:	4896      	ldr	r0, [pc, #600]	; (800092c <display7SEG_2+0x300>)
 80006d4:	f001 fd0d 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	4893      	ldr	r0, [pc, #588]	; (800092c <display7SEG_2+0x300>)
 80006e0:	f001 fd07 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ea:	4890      	ldr	r0, [pc, #576]	; (800092c <display7SEG_2+0x300>)
 80006ec:	f001 fd01 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f6:	488d      	ldr	r0, [pc, #564]	; (800092c <display7SEG_2+0x300>)
 80006f8:	f001 fcfb 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000702:	488b      	ldr	r0, [pc, #556]	; (8000930 <display7SEG_2+0x304>)
 8000704:	f001 fcf5 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 8000708:	e10b      	b.n	8000922 <display7SEG_2+0x2f6>
		case 1:
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000710:	4886      	ldr	r0, [pc, #536]	; (800092c <display7SEG_2+0x300>)
 8000712:	f001 fcee 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071c:	4883      	ldr	r0, [pc, #524]	; (800092c <display7SEG_2+0x300>)
 800071e:	f001 fce8 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 8000722:	e0fe      	b.n	8000922 <display7SEG_2+0x2f6>
		case 2:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800072a:	4880      	ldr	r0, [pc, #512]	; (800092c <display7SEG_2+0x300>)
 800072c:	f001 fce1 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000736:	487d      	ldr	r0, [pc, #500]	; (800092c <display7SEG_2+0x300>)
 8000738:	f001 fcdb 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000742:	487a      	ldr	r0, [pc, #488]	; (800092c <display7SEG_2+0x300>)
 8000744:	f001 fcd5 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074e:	4877      	ldr	r0, [pc, #476]	; (800092c <display7SEG_2+0x300>)
 8000750:	f001 fccf 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075a:	4875      	ldr	r0, [pc, #468]	; (8000930 <display7SEG_2+0x304>)
 800075c:	f001 fcc9 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 8000760:	e0df      	b.n	8000922 <display7SEG_2+0x2f6>
		case 3:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000768:	4870      	ldr	r0, [pc, #448]	; (800092c <display7SEG_2+0x300>)
 800076a:	f001 fcc2 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000774:	486d      	ldr	r0, [pc, #436]	; (800092c <display7SEG_2+0x300>)
 8000776:	f001 fcbc 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000780:	486a      	ldr	r0, [pc, #424]	; (800092c <display7SEG_2+0x300>)
 8000782:	f001 fcb6 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078c:	4867      	ldr	r0, [pc, #412]	; (800092c <display7SEG_2+0x300>)
 800078e:	f001 fcb0 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000798:	4865      	ldr	r0, [pc, #404]	; (8000930 <display7SEG_2+0x304>)
 800079a:	f001 fcaa 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 800079e:	e0c0      	b.n	8000922 <display7SEG_2+0x2f6>
		case 4:
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a6:	4861      	ldr	r0, [pc, #388]	; (800092c <display7SEG_2+0x300>)
 80007a8:	f001 fca3 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b2:	485e      	ldr	r0, [pc, #376]	; (800092c <display7SEG_2+0x300>)
 80007b4:	f001 fc9d 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007be:	485c      	ldr	r0, [pc, #368]	; (8000930 <display7SEG_2+0x304>)
 80007c0:	f001 fc97 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	4859      	ldr	r0, [pc, #356]	; (8000930 <display7SEG_2+0x304>)
 80007cc:	f001 fc91 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 80007d0:	e0a7      	b.n	8000922 <display7SEG_2+0x2f6>
		case 5:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007d8:	4854      	ldr	r0, [pc, #336]	; (800092c <display7SEG_2+0x300>)
 80007da:	f001 fc8a 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e4:	4851      	ldr	r0, [pc, #324]	; (800092c <display7SEG_2+0x300>)
 80007e6:	f001 fc84 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f0:	484e      	ldr	r0, [pc, #312]	; (800092c <display7SEG_2+0x300>)
 80007f2:	f001 fc7e 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fc:	484c      	ldr	r0, [pc, #304]	; (8000930 <display7SEG_2+0x304>)
 80007fe:	f001 fc78 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000808:	4849      	ldr	r0, [pc, #292]	; (8000930 <display7SEG_2+0x304>)
 800080a:	f001 fc72 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 800080e:	e088      	b.n	8000922 <display7SEG_2+0x2f6>
		case 6:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000816:	4845      	ldr	r0, [pc, #276]	; (800092c <display7SEG_2+0x300>)
 8000818:	f001 fc6b 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000822:	4842      	ldr	r0, [pc, #264]	; (800092c <display7SEG_2+0x300>)
 8000824:	f001 fc65 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082e:	483f      	ldr	r0, [pc, #252]	; (800092c <display7SEG_2+0x300>)
 8000830:	f001 fc5f 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083a:	483c      	ldr	r0, [pc, #240]	; (800092c <display7SEG_2+0x300>)
 800083c:	f001 fc59 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000846:	483a      	ldr	r0, [pc, #232]	; (8000930 <display7SEG_2+0x304>)
 8000848:	f001 fc53 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000852:	4837      	ldr	r0, [pc, #220]	; (8000930 <display7SEG_2+0x304>)
 8000854:	f001 fc4d 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 8000858:	e063      	b.n	8000922 <display7SEG_2+0x2f6>
		case 7:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000860:	4832      	ldr	r0, [pc, #200]	; (800092c <display7SEG_2+0x300>)
 8000862:	f001 fc46 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086c:	482f      	ldr	r0, [pc, #188]	; (800092c <display7SEG_2+0x300>)
 800086e:	f001 fc40 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000878:	482c      	ldr	r0, [pc, #176]	; (800092c <display7SEG_2+0x300>)
 800087a:	f001 fc3a 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 800087e:	e050      	b.n	8000922 <display7SEG_2+0x2f6>
		case 8:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000886:	4829      	ldr	r0, [pc, #164]	; (800092c <display7SEG_2+0x300>)
 8000888:	f001 fc33 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000892:	4826      	ldr	r0, [pc, #152]	; (800092c <display7SEG_2+0x300>)
 8000894:	f001 fc2d 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089e:	4823      	ldr	r0, [pc, #140]	; (800092c <display7SEG_2+0x300>)
 80008a0:	f001 fc27 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008aa:	4820      	ldr	r0, [pc, #128]	; (800092c <display7SEG_2+0x300>)
 80008ac:	f001 fc21 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b6:	481d      	ldr	r0, [pc, #116]	; (800092c <display7SEG_2+0x300>)
 80008b8:	f001 fc1b 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c2:	481b      	ldr	r0, [pc, #108]	; (8000930 <display7SEG_2+0x304>)
 80008c4:	f001 fc15 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ce:	4818      	ldr	r0, [pc, #96]	; (8000930 <display7SEG_2+0x304>)
 80008d0:	f001 fc0f 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 80008d4:	e025      	b.n	8000922 <display7SEG_2+0x2f6>
		case 9:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <display7SEG_2+0x300>)
 80008de:	f001 fc08 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e8:	4810      	ldr	r0, [pc, #64]	; (800092c <display7SEG_2+0x300>)
 80008ea:	f001 fc02 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <display7SEG_2+0x300>)
 80008f6:	f001 fbfc 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000900:	480a      	ldr	r0, [pc, #40]	; (800092c <display7SEG_2+0x300>)
 8000902:	f001 fbf6 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090c:	4808      	ldr	r0, [pc, #32]	; (8000930 <display7SEG_2+0x304>)
 800090e:	f001 fbf0 	bl	80020f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <display7SEG_2+0x304>)
 800091a:	f001 fbea 	bl	80020f2 <HAL_GPIO_WritePin>
			break;
 800091e:	e000      	b.n	8000922 <display7SEG_2+0x2f6>
		default:

			break;
 8000920:	bf00      	nop
	}
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40010800 	.word	0x40010800
 8000930:	40010c00 	.word	0x40010c00

08000934 <update7SEG>:
//
//int value1_buffer[3] = {0,0,0};
//int value2_buffer[3] = {0,0,0};


void update7SEG(int index_lane1){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	switch(index_lane1){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d003      	beq.n	800094a <update7SEG+0x16>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d012      	beq.n	800096e <update7SEG+0x3a>
			  display7SEG(led_buffer_lane1[1]);
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
			  break;
		}
}
 8000948:	e023      	b.n	8000992 <update7SEG+0x5e>
			  display7SEG(led_buffer_lane1[0]);
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <update7SEG+0x68>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fd24 	bl	800039c <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095a:	4811      	ldr	r0, [pc, #68]	; (80009a0 <update7SEG+0x6c>)
 800095c:	f001 fbc9 	bl	80020f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000966:	480e      	ldr	r0, [pc, #56]	; (80009a0 <update7SEG+0x6c>)
 8000968:	f001 fbc3 	bl	80020f2 <HAL_GPIO_WritePin>
			  break;
 800096c:	e011      	b.n	8000992 <update7SEG+0x5e>
			  display7SEG(led_buffer_lane1[1]);
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <update7SEG+0x68>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fd12 	bl	800039c <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097e:	4808      	ldr	r0, [pc, #32]	; (80009a0 <update7SEG+0x6c>)
 8000980:	f001 fbb7 	bl	80020f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <update7SEG+0x6c>)
 800098c:	f001 fbb1 	bl	80020f2 <HAL_GPIO_WritePin>
			  break;
 8000990:	bf00      	nop
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000c8 	.word	0x200000c8
 80009a0:	40010c00 	.word	0x40010c00

080009a4 <update7SEG_lane2>:

void update7SEG_lane2(int index_lane2){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	switch(index_lane2){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <update7SEG_lane2+0x16>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d012      	beq.n	80009de <update7SEG_lane2+0x3a>
			  display7SEG_2(led_buffer_lane2[1]);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
			  break;
		}
}
 80009b8:	e023      	b.n	8000a02 <update7SEG_lane2+0x5e>
			  display7SEG_2(led_buffer_lane2[0]);
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <update7SEG_lane2+0x68>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe34 	bl	800062c <display7SEG_2>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ca:	4811      	ldr	r0, [pc, #68]	; (8000a10 <update7SEG_lane2+0x6c>)
 80009cc:	f001 fb91 	bl	80020f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d6:	480e      	ldr	r0, [pc, #56]	; (8000a10 <update7SEG_lane2+0x6c>)
 80009d8:	f001 fb8b 	bl	80020f2 <HAL_GPIO_WritePin>
			  break;
 80009dc:	e011      	b.n	8000a02 <update7SEG_lane2+0x5e>
			  display7SEG_2(led_buffer_lane2[1]);
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <update7SEG_lane2+0x68>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fe22 	bl	800062c <display7SEG_2>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ee:	4808      	ldr	r0, [pc, #32]	; (8000a10 <update7SEG_lane2+0x6c>)
 80009f0:	f001 fb7f 	bl	80020f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <update7SEG_lane2+0x6c>)
 80009fc:	f001 fb79 	bl	80020f2 <HAL_GPIO_WritePin>
			  break;
 8000a00:	bf00      	nop
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000d0 	.word	0x200000d0
 8000a10:	40010c00 	.word	0x40010c00

08000a14 <fsm_auto_run_lane1>:
#include "fsm_auto.h"
#include "traffic_2_lane.h"
int status_lane1 = INIT_1;
int status_lane2 = INIT_2;

void fsm_auto_run_lane1(){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	switch (status_lane1) {
 8000a18:	4b8b      	ldr	r3, [pc, #556]	; (8000c48 <fsm_auto_run_lane1+0x234>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3b0a      	subs	r3, #10
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	f200 8108 	bhi.w	8000c34 <fsm_auto_run_lane1+0x220>
 8000a24:	a201      	add	r2, pc, #4	; (adr r2, 8000a2c <fsm_auto_run_lane1+0x18>)
 8000a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2a:	bf00      	nop
 8000a2c:	08000a3d 	.word	0x08000a3d
 8000a30:	08000a6b 	.word	0x08000a6b
 8000a34:	08000b05 	.word	0x08000b05
 8000a38:	08000b9d 	.word	0x08000b9d
		case INIT_1:
			status_lane1 = RED_1;
 8000a3c:	4b82      	ldr	r3, [pc, #520]	; (8000c48 <fsm_auto_run_lane1+0x234>)
 8000a3e:	220b      	movs	r2, #11
 8000a40:	601a      	str	r2, [r3, #0]
			value1_buffer[0] = red1TimeMAX*1000;
 8000a42:	4b82      	ldr	r3, [pc, #520]	; (8000c4c <fsm_auto_run_lane1+0x238>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a80      	ldr	r2, [pc, #512]	; (8000c50 <fsm_auto_run_lane1+0x23c>)
 8000a50:	6013      	str	r3, [r2, #0]
			setTimer(1, value1_buffer[0]);
 8000a52:	4b7f      	ldr	r3, [pc, #508]	; (8000c50 <fsm_auto_run_lane1+0x23c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 fe49 	bl	80016f0 <setTimer>
			setTimer(3, 1000);
 8000a5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a62:	2003      	movs	r0, #3
 8000a64:	f000 fe44 	bl	80016f0 <setTimer>
			break;
 8000a68:	e0eb      	b.n	8000c42 <fsm_auto_run_lane1+0x22e>
		case RED_1:
			red_1();
 8000a6a:	f000 ff37 	bl	80018dc <red_1>
			led_buffer_lane1[0] = red1_time/10;
 8000a6e:	4b79      	ldr	r3, [pc, #484]	; (8000c54 <fsm_auto_run_lane1+0x240>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a79      	ldr	r2, [pc, #484]	; (8000c58 <fsm_auto_run_lane1+0x244>)
 8000a74:	fb82 1203 	smull	r1, r2, r2, r3
 8000a78:	1092      	asrs	r2, r2, #2
 8000a7a:	17db      	asrs	r3, r3, #31
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	4a77      	ldr	r2, [pc, #476]	; (8000c5c <fsm_auto_run_lane1+0x248>)
 8000a80:	6013      	str	r3, [r2, #0]
			led_buffer_lane1[1] = red1_time%10;
 8000a82:	4b74      	ldr	r3, [pc, #464]	; (8000c54 <fsm_auto_run_lane1+0x240>)
 8000a84:	6819      	ldr	r1, [r3, #0]
 8000a86:	4b74      	ldr	r3, [pc, #464]	; (8000c58 <fsm_auto_run_lane1+0x244>)
 8000a88:	fb83 2301 	smull	r2, r3, r3, r1
 8000a8c:	109a      	asrs	r2, r3, #2
 8000a8e:	17cb      	asrs	r3, r1, #31
 8000a90:	1ad2      	subs	r2, r2, r3
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	1aca      	subs	r2, r1, r3
 8000a9c:	4b6f      	ldr	r3, [pc, #444]	; (8000c5c <fsm_auto_run_lane1+0x248>)
 8000a9e:	605a      	str	r2, [r3, #4]
			if(timer_flag[3] == 1){
 8000aa0:	4b6f      	ldr	r3, [pc, #444]	; (8000c60 <fsm_auto_run_lane1+0x24c>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d111      	bne.n	8000acc <fsm_auto_run_lane1+0xb8>
				red1_time--;
 8000aa8:	4b6a      	ldr	r3, [pc, #424]	; (8000c54 <fsm_auto_run_lane1+0x240>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	4a69      	ldr	r2, [pc, #420]	; (8000c54 <fsm_auto_run_lane1+0x240>)
 8000ab0:	6013      	str	r3, [r2, #0]
				if(red1_time==0){
 8000ab2:	4b68      	ldr	r3, [pc, #416]	; (8000c54 <fsm_auto_run_lane1+0x240>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d103      	bne.n	8000ac2 <fsm_auto_run_lane1+0xae>
					red1_time = red1TimeMAX;
 8000aba:	4b64      	ldr	r3, [pc, #400]	; (8000c4c <fsm_auto_run_lane1+0x238>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a65      	ldr	r2, [pc, #404]	; (8000c54 <fsm_auto_run_lane1+0x240>)
 8000ac0:	6013      	str	r3, [r2, #0]
				}
				setTimer(3, 1000);
 8000ac2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f000 fe12 	bl	80016f0 <setTimer>
			}
			if(timer_flag[1] == 1){
 8000acc:	4b64      	ldr	r3, [pc, #400]	; (8000c60 <fsm_auto_run_lane1+0x24c>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	f040 80b1 	bne.w	8000c38 <fsm_auto_run_lane1+0x224>
				status_lane1 = GREEN_1;
 8000ad6:	4b5c      	ldr	r3, [pc, #368]	; (8000c48 <fsm_auto_run_lane1+0x234>)
 8000ad8:	220c      	movs	r2, #12
 8000ada:	601a      	str	r2, [r3, #0]
				value1_buffer[1] = green1TimeMAX*1000;
 8000adc:	4b61      	ldr	r3, [pc, #388]	; (8000c64 <fsm_auto_run_lane1+0x250>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae4:	fb02 f303 	mul.w	r3, r2, r3
 8000ae8:	4a59      	ldr	r2, [pc, #356]	; (8000c50 <fsm_auto_run_lane1+0x23c>)
 8000aea:	6053      	str	r3, [r2, #4]
				setTimer(1, value1_buffer[1]);
 8000aec:	4b58      	ldr	r3, [pc, #352]	; (8000c50 <fsm_auto_run_lane1+0x23c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	4619      	mov	r1, r3
 8000af2:	2001      	movs	r0, #1
 8000af4:	f000 fdfc 	bl	80016f0 <setTimer>
				setTimer(3, 1000);
 8000af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 fdf7 	bl	80016f0 <setTimer>
			}
			break;
 8000b02:	e099      	b.n	8000c38 <fsm_auto_run_lane1+0x224>
		case GREEN_1:
			green_1();
 8000b04:	f000 ff00 	bl	8001908 <green_1>
			led_buffer_lane1[0] = green1_time/10;
 8000b08:	4b57      	ldr	r3, [pc, #348]	; (8000c68 <fsm_auto_run_lane1+0x254>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a52      	ldr	r2, [pc, #328]	; (8000c58 <fsm_auto_run_lane1+0x244>)
 8000b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b12:	1092      	asrs	r2, r2, #2
 8000b14:	17db      	asrs	r3, r3, #31
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	4a50      	ldr	r2, [pc, #320]	; (8000c5c <fsm_auto_run_lane1+0x248>)
 8000b1a:	6013      	str	r3, [r2, #0]
			led_buffer_lane1[1] = green1_time%10;
 8000b1c:	4b52      	ldr	r3, [pc, #328]	; (8000c68 <fsm_auto_run_lane1+0x254>)
 8000b1e:	6819      	ldr	r1, [r3, #0]
 8000b20:	4b4d      	ldr	r3, [pc, #308]	; (8000c58 <fsm_auto_run_lane1+0x244>)
 8000b22:	fb83 2301 	smull	r2, r3, r3, r1
 8000b26:	109a      	asrs	r2, r3, #2
 8000b28:	17cb      	asrs	r3, r1, #31
 8000b2a:	1ad2      	subs	r2, r2, r3
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	1aca      	subs	r2, r1, r3
 8000b36:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <fsm_auto_run_lane1+0x248>)
 8000b38:	605a      	str	r2, [r3, #4]
			if(timer_flag[3] == 1){
 8000b3a:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <fsm_auto_run_lane1+0x24c>)
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d111      	bne.n	8000b66 <fsm_auto_run_lane1+0x152>
				green1_time--;
 8000b42:	4b49      	ldr	r3, [pc, #292]	; (8000c68 <fsm_auto_run_lane1+0x254>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	4a47      	ldr	r2, [pc, #284]	; (8000c68 <fsm_auto_run_lane1+0x254>)
 8000b4a:	6013      	str	r3, [r2, #0]
				if(green1_time == 0){
 8000b4c:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <fsm_auto_run_lane1+0x254>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d103      	bne.n	8000b5c <fsm_auto_run_lane1+0x148>
					green1_time = green1TimeMAX;
 8000b54:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <fsm_auto_run_lane1+0x250>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a43      	ldr	r2, [pc, #268]	; (8000c68 <fsm_auto_run_lane1+0x254>)
 8000b5a:	6013      	str	r3, [r2, #0]
				}
				setTimer(3, 1000);
 8000b5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 fdc5 	bl	80016f0 <setTimer>
			}
			if(timer_flag[1] == 1){
 8000b66:	4b3e      	ldr	r3, [pc, #248]	; (8000c60 <fsm_auto_run_lane1+0x24c>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d166      	bne.n	8000c3c <fsm_auto_run_lane1+0x228>
				status_lane1 = YELLOW_1;
 8000b6e:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <fsm_auto_run_lane1+0x234>)
 8000b70:	220d      	movs	r2, #13
 8000b72:	601a      	str	r2, [r3, #0]
				value1_buffer[2] = yellow1TimeMAX*1000;
 8000b74:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <fsm_auto_run_lane1+0x258>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b7c:	fb02 f303 	mul.w	r3, r2, r3
 8000b80:	4a33      	ldr	r2, [pc, #204]	; (8000c50 <fsm_auto_run_lane1+0x23c>)
 8000b82:	6093      	str	r3, [r2, #8]
				setTimer(1, value1_buffer[2]);
 8000b84:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <fsm_auto_run_lane1+0x23c>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f000 fdb0 	bl	80016f0 <setTimer>
				setTimer(3, 1000);
 8000b90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 fdab 	bl	80016f0 <setTimer>
			}
			break;
 8000b9a:	e04f      	b.n	8000c3c <fsm_auto_run_lane1+0x228>
		case YELLOW_1:
			yellow_1();
 8000b9c:	f000 feca 	bl	8001934 <yellow_1>
			led_buffer_lane1[0] = yellow1_time/10;
 8000ba0:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <fsm_auto_run_lane1+0x25c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a2c      	ldr	r2, [pc, #176]	; (8000c58 <fsm_auto_run_lane1+0x244>)
 8000ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8000baa:	1092      	asrs	r2, r2, #2
 8000bac:	17db      	asrs	r3, r3, #31
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	4a2a      	ldr	r2, [pc, #168]	; (8000c5c <fsm_auto_run_lane1+0x248>)
 8000bb2:	6013      	str	r3, [r2, #0]
			led_buffer_lane1[1] = yellow1_time%10;
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <fsm_auto_run_lane1+0x25c>)
 8000bb6:	6819      	ldr	r1, [r3, #0]
 8000bb8:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <fsm_auto_run_lane1+0x244>)
 8000bba:	fb83 2301 	smull	r2, r3, r3, r1
 8000bbe:	109a      	asrs	r2, r3, #2
 8000bc0:	17cb      	asrs	r3, r1, #31
 8000bc2:	1ad2      	subs	r2, r2, r3
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	1aca      	subs	r2, r1, r3
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <fsm_auto_run_lane1+0x248>)
 8000bd0:	605a      	str	r2, [r3, #4]
			if(timer_flag[3] == 1){
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <fsm_auto_run_lane1+0x24c>)
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d111      	bne.n	8000bfe <fsm_auto_run_lane1+0x1ea>
				yellow1_time--;
 8000bda:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <fsm_auto_run_lane1+0x25c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <fsm_auto_run_lane1+0x25c>)
 8000be2:	6013      	str	r3, [r2, #0]
				if(yellow1_time==0){
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <fsm_auto_run_lane1+0x25c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d103      	bne.n	8000bf4 <fsm_auto_run_lane1+0x1e0>
					yellow1_time = yellow1TimeMAX;
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <fsm_auto_run_lane1+0x258>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <fsm_auto_run_lane1+0x25c>)
 8000bf2:	6013      	str	r3, [r2, #0]
				}
				setTimer(3, 1000);
 8000bf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 fd79 	bl	80016f0 <setTimer>
			}
			if(timer_flag[1] == 1){
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <fsm_auto_run_lane1+0x24c>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d11c      	bne.n	8000c40 <fsm_auto_run_lane1+0x22c>
				status_lane1 = RED_1;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <fsm_auto_run_lane1+0x234>)
 8000c08:	220b      	movs	r2, #11
 8000c0a:	601a      	str	r2, [r3, #0]
				value1_buffer[0] = red1TimeMAX*1000;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <fsm_auto_run_lane1+0x238>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <fsm_auto_run_lane1+0x23c>)
 8000c1a:	6013      	str	r3, [r2, #0]
				setTimer(1, value1_buffer[0]);
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <fsm_auto_run_lane1+0x23c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	f000 fd64 	bl	80016f0 <setTimer>
				setTimer(3, 1000);
 8000c28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 fd5f 	bl	80016f0 <setTimer>
			}
			break;
 8000c32:	e005      	b.n	8000c40 <fsm_auto_run_lane1+0x22c>
		default:
			break;
 8000c34:	bf00      	nop
 8000c36:	e004      	b.n	8000c42 <fsm_auto_run_lane1+0x22e>
			break;
 8000c38:	bf00      	nop
 8000c3a:	e002      	b.n	8000c42 <fsm_auto_run_lane1+0x22e>
			break;
 8000c3c:	bf00      	nop
 8000c3e:	e000      	b.n	8000c42 <fsm_auto_run_lane1+0x22e>
			break;
 8000c40:	bf00      	nop
	}
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000034 	.word	0x20000034
 8000c4c:	2000004c 	.word	0x2000004c
 8000c50:	200000d8 	.word	0x200000d8
 8000c54:	20000064 	.word	0x20000064
 8000c58:	66666667 	.word	0x66666667
 8000c5c:	200000c8 	.word	0x200000c8
 8000c60:	2000011c 	.word	0x2000011c
 8000c64:	20000050 	.word	0x20000050
 8000c68:	20000068 	.word	0x20000068
 8000c6c:	20000054 	.word	0x20000054
 8000c70:	2000006c 	.word	0x2000006c

08000c74 <fsm_auto_run_lane2>:

void fsm_auto_run_lane2(){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	switch (status_lane2) {
 8000c78:	4b8b      	ldr	r3, [pc, #556]	; (8000ea8 <fsm_auto_run_lane2+0x234>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3b0e      	subs	r3, #14
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	f200 8108 	bhi.w	8000e94 <fsm_auto_run_lane2+0x220>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <fsm_auto_run_lane2+0x18>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000dfd 	.word	0x08000dfd
 8000c94:	08000ccb 	.word	0x08000ccb
 8000c98:	08000d65 	.word	0x08000d65
		case INIT_2:
			status_lane2 = GREEN_2;
 8000c9c:	4b82      	ldr	r3, [pc, #520]	; (8000ea8 <fsm_auto_run_lane2+0x234>)
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	601a      	str	r2, [r3, #0]
			value2_buffer[0] = green2TimeMAX*1000;
 8000ca2:	4b82      	ldr	r3, [pc, #520]	; (8000eac <fsm_auto_run_lane2+0x238>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	4a80      	ldr	r2, [pc, #512]	; (8000eb0 <fsm_auto_run_lane2+0x23c>)
 8000cb0:	6013      	str	r3, [r2, #0]
			setTimer(2, value2_buffer[0]);
 8000cb2:	4b7f      	ldr	r3, [pc, #508]	; (8000eb0 <fsm_auto_run_lane2+0x23c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f000 fd19 	bl	80016f0 <setTimer>
			setTimer(5, 1000);
 8000cbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc2:	2005      	movs	r0, #5
 8000cc4:	f000 fd14 	bl	80016f0 <setTimer>
			break;
 8000cc8:	e0eb      	b.n	8000ea2 <fsm_auto_run_lane2+0x22e>
		case GREEN_2:
			green_2();
 8000cca:	f000 fe5f 	bl	800198c <green_2>
			led_buffer_lane2[0] = green2_time/10;
 8000cce:	4b79      	ldr	r3, [pc, #484]	; (8000eb4 <fsm_auto_run_lane2+0x240>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a79      	ldr	r2, [pc, #484]	; (8000eb8 <fsm_auto_run_lane2+0x244>)
 8000cd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd8:	1092      	asrs	r2, r2, #2
 8000cda:	17db      	asrs	r3, r3, #31
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	4a77      	ldr	r2, [pc, #476]	; (8000ebc <fsm_auto_run_lane2+0x248>)
 8000ce0:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = green2_time%10;
 8000ce2:	4b74      	ldr	r3, [pc, #464]	; (8000eb4 <fsm_auto_run_lane2+0x240>)
 8000ce4:	6819      	ldr	r1, [r3, #0]
 8000ce6:	4b74      	ldr	r3, [pc, #464]	; (8000eb8 <fsm_auto_run_lane2+0x244>)
 8000ce8:	fb83 2301 	smull	r2, r3, r3, r1
 8000cec:	109a      	asrs	r2, r3, #2
 8000cee:	17cb      	asrs	r3, r1, #31
 8000cf0:	1ad2      	subs	r2, r2, r3
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	1aca      	subs	r2, r1, r3
 8000cfc:	4b6f      	ldr	r3, [pc, #444]	; (8000ebc <fsm_auto_run_lane2+0x248>)
 8000cfe:	605a      	str	r2, [r3, #4]
			if(timer_flag[5] == 1){
 8000d00:	4b6f      	ldr	r3, [pc, #444]	; (8000ec0 <fsm_auto_run_lane2+0x24c>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d111      	bne.n	8000d2c <fsm_auto_run_lane2+0xb8>
				green2_time--;
 8000d08:	4b6a      	ldr	r3, [pc, #424]	; (8000eb4 <fsm_auto_run_lane2+0x240>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	4a69      	ldr	r2, [pc, #420]	; (8000eb4 <fsm_auto_run_lane2+0x240>)
 8000d10:	6013      	str	r3, [r2, #0]
				if(green2_time == 0){
 8000d12:	4b68      	ldr	r3, [pc, #416]	; (8000eb4 <fsm_auto_run_lane2+0x240>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d103      	bne.n	8000d22 <fsm_auto_run_lane2+0xae>
					green2_time=green2TimeMAX;
 8000d1a:	4b64      	ldr	r3, [pc, #400]	; (8000eac <fsm_auto_run_lane2+0x238>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a65      	ldr	r2, [pc, #404]	; (8000eb4 <fsm_auto_run_lane2+0x240>)
 8000d20:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 8000d22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d26:	2005      	movs	r0, #5
 8000d28:	f000 fce2 	bl	80016f0 <setTimer>
			}
			if(timer_flag[2] == 1){
 8000d2c:	4b64      	ldr	r3, [pc, #400]	; (8000ec0 <fsm_auto_run_lane2+0x24c>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	f040 80b1 	bne.w	8000e98 <fsm_auto_run_lane2+0x224>
				status_lane2 = YELLOW_2;
 8000d36:	4b5c      	ldr	r3, [pc, #368]	; (8000ea8 <fsm_auto_run_lane2+0x234>)
 8000d38:	2211      	movs	r2, #17
 8000d3a:	601a      	str	r2, [r3, #0]
				value2_buffer[1]=yellow2TimeMAX*1000;
 8000d3c:	4b61      	ldr	r3, [pc, #388]	; (8000ec4 <fsm_auto_run_lane2+0x250>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d44:	fb02 f303 	mul.w	r3, r2, r3
 8000d48:	4a59      	ldr	r2, [pc, #356]	; (8000eb0 <fsm_auto_run_lane2+0x23c>)
 8000d4a:	6053      	str	r3, [r2, #4]
				setTimer(2, value2_buffer[1]);
 8000d4c:	4b58      	ldr	r3, [pc, #352]	; (8000eb0 <fsm_auto_run_lane2+0x23c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	4619      	mov	r1, r3
 8000d52:	2002      	movs	r0, #2
 8000d54:	f000 fccc 	bl	80016f0 <setTimer>
				setTimer(5, 1000);
 8000d58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d5c:	2005      	movs	r0, #5
 8000d5e:	f000 fcc7 	bl	80016f0 <setTimer>
			}
			break;
 8000d62:	e099      	b.n	8000e98 <fsm_auto_run_lane2+0x224>
		case YELLOW_2:
			yellow_2();
 8000d64:	f000 fe28 	bl	80019b8 <yellow_2>
			led_buffer_lane2[0] = yellow2_time/10;
 8000d68:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <fsm_auto_run_lane2+0x254>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a52      	ldr	r2, [pc, #328]	; (8000eb8 <fsm_auto_run_lane2+0x244>)
 8000d6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d72:	1092      	asrs	r2, r2, #2
 8000d74:	17db      	asrs	r3, r3, #31
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	4a50      	ldr	r2, [pc, #320]	; (8000ebc <fsm_auto_run_lane2+0x248>)
 8000d7a:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = yellow2_time%10;
 8000d7c:	4b52      	ldr	r3, [pc, #328]	; (8000ec8 <fsm_auto_run_lane2+0x254>)
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <fsm_auto_run_lane2+0x244>)
 8000d82:	fb83 2301 	smull	r2, r3, r3, r1
 8000d86:	109a      	asrs	r2, r3, #2
 8000d88:	17cb      	asrs	r3, r1, #31
 8000d8a:	1ad2      	subs	r2, r2, r3
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	1aca      	subs	r2, r1, r3
 8000d96:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <fsm_auto_run_lane2+0x248>)
 8000d98:	605a      	str	r2, [r3, #4]
			if(timer_flag[5] == 1){
 8000d9a:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <fsm_auto_run_lane2+0x24c>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d111      	bne.n	8000dc6 <fsm_auto_run_lane2+0x152>
				yellow2_time--;
 8000da2:	4b49      	ldr	r3, [pc, #292]	; (8000ec8 <fsm_auto_run_lane2+0x254>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	4a47      	ldr	r2, [pc, #284]	; (8000ec8 <fsm_auto_run_lane2+0x254>)
 8000daa:	6013      	str	r3, [r2, #0]
				if(yellow2_time == 0){
 8000dac:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <fsm_auto_run_lane2+0x254>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d103      	bne.n	8000dbc <fsm_auto_run_lane2+0x148>
					yellow2_time=yellow2TimeMAX;
 8000db4:	4b43      	ldr	r3, [pc, #268]	; (8000ec4 <fsm_auto_run_lane2+0x250>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a43      	ldr	r2, [pc, #268]	; (8000ec8 <fsm_auto_run_lane2+0x254>)
 8000dba:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 8000dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dc0:	2005      	movs	r0, #5
 8000dc2:	f000 fc95 	bl	80016f0 <setTimer>
			}
			if(timer_flag[2] == 1){
 8000dc6:	4b3e      	ldr	r3, [pc, #248]	; (8000ec0 <fsm_auto_run_lane2+0x24c>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d166      	bne.n	8000e9c <fsm_auto_run_lane2+0x228>
				status_lane2 = RED_2;
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <fsm_auto_run_lane2+0x234>)
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	601a      	str	r2, [r3, #0]
				value2_buffer[2] = red2TimeMAX*1000;
 8000dd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ecc <fsm_auto_run_lane2+0x258>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	4a33      	ldr	r2, [pc, #204]	; (8000eb0 <fsm_auto_run_lane2+0x23c>)
 8000de2:	6093      	str	r3, [r2, #8]
				setTimer(2, value2_buffer[2]);
 8000de4:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <fsm_auto_run_lane2+0x23c>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	4619      	mov	r1, r3
 8000dea:	2002      	movs	r0, #2
 8000dec:	f000 fc80 	bl	80016f0 <setTimer>
				setTimer(5, 1000);
 8000df0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000df4:	2005      	movs	r0, #5
 8000df6:	f000 fc7b 	bl	80016f0 <setTimer>
			}
			break;
 8000dfa:	e04f      	b.n	8000e9c <fsm_auto_run_lane2+0x228>
		case RED_2:
			red_2();
 8000dfc:	f000 fdb0 	bl	8001960 <red_2>
			led_buffer_lane2[0] = red2_time/10;
 8000e00:	4b33      	ldr	r3, [pc, #204]	; (8000ed0 <fsm_auto_run_lane2+0x25c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a2c      	ldr	r2, [pc, #176]	; (8000eb8 <fsm_auto_run_lane2+0x244>)
 8000e06:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0a:	1092      	asrs	r2, r2, #2
 8000e0c:	17db      	asrs	r3, r3, #31
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	4a2a      	ldr	r2, [pc, #168]	; (8000ebc <fsm_auto_run_lane2+0x248>)
 8000e12:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = red2_time%10;
 8000e14:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <fsm_auto_run_lane2+0x25c>)
 8000e16:	6819      	ldr	r1, [r3, #0]
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <fsm_auto_run_lane2+0x244>)
 8000e1a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e1e:	109a      	asrs	r2, r3, #2
 8000e20:	17cb      	asrs	r3, r1, #31
 8000e22:	1ad2      	subs	r2, r2, r3
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	1aca      	subs	r2, r1, r3
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <fsm_auto_run_lane2+0x248>)
 8000e30:	605a      	str	r2, [r3, #4]
			if(timer_flag[5] == 1){
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <fsm_auto_run_lane2+0x24c>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d111      	bne.n	8000e5e <fsm_auto_run_lane2+0x1ea>
				red2_time--;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <fsm_auto_run_lane2+0x25c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <fsm_auto_run_lane2+0x25c>)
 8000e42:	6013      	str	r3, [r2, #0]
				if(red2_time == 0){
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <fsm_auto_run_lane2+0x25c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d103      	bne.n	8000e54 <fsm_auto_run_lane2+0x1e0>
					red2_time=red1TimeMAX;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <fsm_auto_run_lane2+0x260>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <fsm_auto_run_lane2+0x25c>)
 8000e52:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 8000e54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e58:	2005      	movs	r0, #5
 8000e5a:	f000 fc49 	bl	80016f0 <setTimer>
			}
			if(timer_flag[2] == 1){
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <fsm_auto_run_lane2+0x24c>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d11c      	bne.n	8000ea0 <fsm_auto_run_lane2+0x22c>
				status_lane2 = GREEN_2;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <fsm_auto_run_lane2+0x234>)
 8000e68:	2210      	movs	r2, #16
 8000e6a:	601a      	str	r2, [r3, #0]
				value2_buffer[0] = green2TimeMAX*1000;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <fsm_auto_run_lane2+0x238>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <fsm_auto_run_lane2+0x23c>)
 8000e7a:	6013      	str	r3, [r2, #0]
				setTimer(2, value2_buffer[0]);
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <fsm_auto_run_lane2+0x23c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	2002      	movs	r0, #2
 8000e84:	f000 fc34 	bl	80016f0 <setTimer>
				setTimer(5, 1000);
 8000e88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e8c:	2005      	movs	r0, #5
 8000e8e:	f000 fc2f 	bl	80016f0 <setTimer>
			}
			break;
 8000e92:	e005      	b.n	8000ea0 <fsm_auto_run_lane2+0x22c>
		default:
			break;
 8000e94:	bf00      	nop
 8000e96:	e004      	b.n	8000ea2 <fsm_auto_run_lane2+0x22e>
			break;
 8000e98:	bf00      	nop
 8000e9a:	e002      	b.n	8000ea2 <fsm_auto_run_lane2+0x22e>
			break;
 8000e9c:	bf00      	nop
 8000e9e:	e000      	b.n	8000ea2 <fsm_auto_run_lane2+0x22e>
			break;
 8000ea0:	bf00      	nop
	}
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000038 	.word	0x20000038
 8000eac:	2000005c 	.word	0x2000005c
 8000eb0:	200000e4 	.word	0x200000e4
 8000eb4:	20000074 	.word	0x20000074
 8000eb8:	66666667 	.word	0x66666667
 8000ebc:	200000d0 	.word	0x200000d0
 8000ec0:	2000011c 	.word	0x2000011c
 8000ec4:	20000060 	.word	0x20000060
 8000ec8:	20000078 	.word	0x20000078
 8000ecc:	20000058 	.word	0x20000058
 8000ed0:	20000070 	.word	0x20000070
 8000ed4:	2000004c 	.word	0x2000004c

08000ed8 <fsm_manual_run>:





void fsm_manual_run(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	switch(STATUS_MODE){
 8000edc:	4b8c      	ldr	r3, [pc, #560]	; (8001110 <fsm_manual_run+0x238>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	f200 8113 	bhi.w	800110c <fsm_manual_run+0x234>
 8000ee6:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <fsm_manual_run+0x14>)
 8000ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eec:	08000f01 	.word	0x08000f01
 8000ef0:	08000f09 	.word	0x08000f09
 8000ef4:	08000f35 	.word	0x08000f35
 8000ef8:	08000fcb 	.word	0x08000fcb
 8000efc:	0800105f 	.word	0x0800105f
		case INIT:
			STATUS_MODE = MODE_1;
 8000f00:	4b83      	ldr	r3, [pc, #524]	; (8001110 <fsm_manual_run+0x238>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
			break;
 8000f06:	e101      	b.n	800110c <fsm_manual_run+0x234>

		case MODE_1:
			status_traffic_lane1 = display_traffic_lane1;
 8000f08:	4b82      	ldr	r3, [pc, #520]	; (8001114 <fsm_manual_run+0x23c>)
 8000f0a:	221e      	movs	r2, #30
 8000f0c:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = display_traffic_lane2;
 8000f0e:	4b82      	ldr	r3, [pc, #520]	; (8001118 <fsm_manual_run+0x240>)
 8000f10:	2223      	movs	r2, #35	; 0x23
 8000f12:	601a      	str	r2, [r3, #0]
			StatusLED1 = CountDownLED1;
 8000f14:	4b81      	ldr	r3, [pc, #516]	; (800111c <fsm_manual_run+0x244>)
 8000f16:	2214      	movs	r2, #20
 8000f18:	601a      	str	r2, [r3, #0]
			StatusLED2 = CountDownLED2;
 8000f1a:	4b81      	ldr	r3, [pc, #516]	; (8001120 <fsm_manual_run+0x248>)
 8000f1c:	2218      	movs	r2, #24
 8000f1e:	601a      	str	r2, [r3, #0]

			if(isButton_BUT1_Pressed() == 1){
 8000f20:	f7ff f914 	bl	800014c <isButton_BUT1_Pressed>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	f040 80e9 	bne.w	80010fe <fsm_manual_run+0x226>
				STATUS_MODE = MODE_2;
 8000f2c:	4b78      	ldr	r3, [pc, #480]	; (8001110 <fsm_manual_run+0x238>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	601a      	str	r2, [r3, #0]
			}
			break;
 8000f32:	e0e4      	b.n	80010fe <fsm_manual_run+0x226>
		case MODE_2:
			status_traffic_lane1 = modify_red1;
 8000f34:	4b77      	ldr	r3, [pc, #476]	; (8001114 <fsm_manual_run+0x23c>)
 8000f36:	221f      	movs	r2, #31
 8000f38:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = modify_red2;
 8000f3a:	4b77      	ldr	r3, [pc, #476]	; (8001118 <fsm_manual_run+0x240>)
 8000f3c:	222d      	movs	r2, #45	; 0x2d
 8000f3e:	601a      	str	r2, [r3, #0]
			StatusLED1 = DisplayLED1Mode2;
 8000f40:	4b76      	ldr	r3, [pc, #472]	; (800111c <fsm_manual_run+0x244>)
 8000f42:	2215      	movs	r2, #21
 8000f44:	601a      	str	r2, [r3, #0]
			StatusLED2 = TimerValue;
 8000f46:	4b76      	ldr	r3, [pc, #472]	; (8001120 <fsm_manual_run+0x248>)
 8000f48:	2219      	movs	r2, #25
 8000f4a:	601a      	str	r2, [r3, #0]

			if(isButton_BUT2_Pressed() == 1){
 8000f4c:	f7ff f910 	bl	8000170 <isButton_BUT2_Pressed>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d109      	bne.n	8000f6a <fsm_manual_run+0x92>
				red1TimeMAX++;
 8000f56:	4b73      	ldr	r3, [pc, #460]	; (8001124 <fsm_manual_run+0x24c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	4a71      	ldr	r2, [pc, #452]	; (8001124 <fsm_manual_run+0x24c>)
 8000f5e:	6013      	str	r3, [r2, #0]
				red2TimeMAX++;
 8000f60:	4b71      	ldr	r3, [pc, #452]	; (8001128 <fsm_manual_run+0x250>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a70      	ldr	r2, [pc, #448]	; (8001128 <fsm_manual_run+0x250>)
 8000f68:	6013      	str	r3, [r2, #0]
			}
			//update buffer
			led_buffer_lane2[0] = red2TimeMAX/10;
 8000f6a:	4b6f      	ldr	r3, [pc, #444]	; (8001128 <fsm_manual_run+0x250>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a6f      	ldr	r2, [pc, #444]	; (800112c <fsm_manual_run+0x254>)
 8000f70:	fb82 1203 	smull	r1, r2, r2, r3
 8000f74:	1092      	asrs	r2, r2, #2
 8000f76:	17db      	asrs	r3, r3, #31
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	4a6d      	ldr	r2, [pc, #436]	; (8001130 <fsm_manual_run+0x258>)
 8000f7c:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = red2TimeMAX%10;
 8000f7e:	4b6a      	ldr	r3, [pc, #424]	; (8001128 <fsm_manual_run+0x250>)
 8000f80:	6819      	ldr	r1, [r3, #0]
 8000f82:	4b6a      	ldr	r3, [pc, #424]	; (800112c <fsm_manual_run+0x254>)
 8000f84:	fb83 2301 	smull	r2, r3, r3, r1
 8000f88:	109a      	asrs	r2, r3, #2
 8000f8a:	17cb      	asrs	r3, r1, #31
 8000f8c:	1ad2      	subs	r2, r2, r3
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	1aca      	subs	r2, r1, r3
 8000f98:	4b65      	ldr	r3, [pc, #404]	; (8001130 <fsm_manual_run+0x258>)
 8000f9a:	605a      	str	r2, [r3, #4]

			if(isButton_BUT3_Pressed() == 1){
 8000f9c:	f7ff f8fa 	bl	8000194 <isButton_BUT3_Pressed>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d107      	bne.n	8000fb6 <fsm_manual_run+0xde>
				red1_time = red1TimeMAX;
 8000fa6:	4b5f      	ldr	r3, [pc, #380]	; (8001124 <fsm_manual_run+0x24c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a62      	ldr	r2, [pc, #392]	; (8001134 <fsm_manual_run+0x25c>)
 8000fac:	6013      	str	r3, [r2, #0]
				red2_time = red2TimeMAX;
 8000fae:	4b5e      	ldr	r3, [pc, #376]	; (8001128 <fsm_manual_run+0x250>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a61      	ldr	r2, [pc, #388]	; (8001138 <fsm_manual_run+0x260>)
 8000fb4:	6013      	str	r3, [r2, #0]
			}
			if(isButton_BUT1_Pressed() == 1){
 8000fb6:	f7ff f8c9 	bl	800014c <isButton_BUT1_Pressed>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f040 80a0 	bne.w	8001102 <fsm_manual_run+0x22a>
				STATUS_MODE = MODE_3;
 8000fc2:	4b53      	ldr	r3, [pc, #332]	; (8001110 <fsm_manual_run+0x238>)
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	601a      	str	r2, [r3, #0]
			}
			break;
 8000fc8:	e09b      	b.n	8001102 <fsm_manual_run+0x22a>
		case MODE_3:
			status_traffic_lane1 = modify_yellow1;
 8000fca:	4b52      	ldr	r3, [pc, #328]	; (8001114 <fsm_manual_run+0x23c>)
 8000fcc:	2221      	movs	r2, #33	; 0x21
 8000fce:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = modify_yellow2;
 8000fd0:	4b51      	ldr	r3, [pc, #324]	; (8001118 <fsm_manual_run+0x240>)
 8000fd2:	222f      	movs	r2, #47	; 0x2f
 8000fd4:	601a      	str	r2, [r3, #0]
			StatusLED1 = DisplayLED1Mode3;
 8000fd6:	4b51      	ldr	r3, [pc, #324]	; (800111c <fsm_manual_run+0x244>)
 8000fd8:	2216      	movs	r2, #22
 8000fda:	601a      	str	r2, [r3, #0]
			StatusLED2 = TimerValue;
 8000fdc:	4b50      	ldr	r3, [pc, #320]	; (8001120 <fsm_manual_run+0x248>)
 8000fde:	2219      	movs	r2, #25
 8000fe0:	601a      	str	r2, [r3, #0]

			if(isButton_BUT2_Pressed() == 1){
 8000fe2:	f7ff f8c5 	bl	8000170 <isButton_BUT2_Pressed>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d109      	bne.n	8001000 <fsm_manual_run+0x128>
				yellow1TimeMAX++;
 8000fec:	4b53      	ldr	r3, [pc, #332]	; (800113c <fsm_manual_run+0x264>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a52      	ldr	r2, [pc, #328]	; (800113c <fsm_manual_run+0x264>)
 8000ff4:	6013      	str	r3, [r2, #0]
				yellow2TimeMAX++;
 8000ff6:	4b52      	ldr	r3, [pc, #328]	; (8001140 <fsm_manual_run+0x268>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a50      	ldr	r2, [pc, #320]	; (8001140 <fsm_manual_run+0x268>)
 8000ffe:	6013      	str	r3, [r2, #0]
			}
			led_buffer_lane2[0] = yellow2TimeMAX/10;
 8001000:	4b4f      	ldr	r3, [pc, #316]	; (8001140 <fsm_manual_run+0x268>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a49      	ldr	r2, [pc, #292]	; (800112c <fsm_manual_run+0x254>)
 8001006:	fb82 1203 	smull	r1, r2, r2, r3
 800100a:	1092      	asrs	r2, r2, #2
 800100c:	17db      	asrs	r3, r3, #31
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	4a47      	ldr	r2, [pc, #284]	; (8001130 <fsm_manual_run+0x258>)
 8001012:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = yellow2TimeMAX%10;
 8001014:	4b4a      	ldr	r3, [pc, #296]	; (8001140 <fsm_manual_run+0x268>)
 8001016:	6819      	ldr	r1, [r3, #0]
 8001018:	4b44      	ldr	r3, [pc, #272]	; (800112c <fsm_manual_run+0x254>)
 800101a:	fb83 2301 	smull	r2, r3, r3, r1
 800101e:	109a      	asrs	r2, r3, #2
 8001020:	17cb      	asrs	r3, r1, #31
 8001022:	1ad2      	subs	r2, r2, r3
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	1aca      	subs	r2, r1, r3
 800102e:	4b40      	ldr	r3, [pc, #256]	; (8001130 <fsm_manual_run+0x258>)
 8001030:	605a      	str	r2, [r3, #4]

			if(isButton_BUT3_Pressed() == 1){
 8001032:	f7ff f8af 	bl	8000194 <isButton_BUT3_Pressed>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d107      	bne.n	800104c <fsm_manual_run+0x174>
				yellow1_time = yellow1TimeMAX;
 800103c:	4b3f      	ldr	r3, [pc, #252]	; (800113c <fsm_manual_run+0x264>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a40      	ldr	r2, [pc, #256]	; (8001144 <fsm_manual_run+0x26c>)
 8001042:	6013      	str	r3, [r2, #0]
				yellow2_time = yellow2TimeMAX;
 8001044:	4b3e      	ldr	r3, [pc, #248]	; (8001140 <fsm_manual_run+0x268>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a3f      	ldr	r2, [pc, #252]	; (8001148 <fsm_manual_run+0x270>)
 800104a:	6013      	str	r3, [r2, #0]
			}
			if(isButton_BUT1_Pressed() == 1){
 800104c:	f7ff f87e 	bl	800014c <isButton_BUT1_Pressed>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d157      	bne.n	8001106 <fsm_manual_run+0x22e>
				STATUS_MODE = MODE_4;
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <fsm_manual_run+0x238>)
 8001058:	2204      	movs	r2, #4
 800105a:	601a      	str	r2, [r3, #0]
			}
			break;
 800105c:	e053      	b.n	8001106 <fsm_manual_run+0x22e>
		case MODE_4:
			status_traffic_lane1 = modify_green1;
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <fsm_manual_run+0x23c>)
 8001060:	2220      	movs	r2, #32
 8001062:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = modify_green2;
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <fsm_manual_run+0x240>)
 8001066:	222e      	movs	r2, #46	; 0x2e
 8001068:	601a      	str	r2, [r3, #0]
			StatusLED1 = DisplayLED1Mode4;
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <fsm_manual_run+0x244>)
 800106c:	2217      	movs	r2, #23
 800106e:	601a      	str	r2, [r3, #0]
			StatusLED2 = TimerValue;
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <fsm_manual_run+0x248>)
 8001072:	2219      	movs	r2, #25
 8001074:	601a      	str	r2, [r3, #0]

			if(isButton_BUT2_Pressed() == 1){
 8001076:	f7ff f87b 	bl	8000170 <isButton_BUT2_Pressed>
 800107a:	4603      	mov	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d109      	bne.n	8001094 <fsm_manual_run+0x1bc>
				green1TimeMAX++;
 8001080:	4b32      	ldr	r3, [pc, #200]	; (800114c <fsm_manual_run+0x274>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a31      	ldr	r2, [pc, #196]	; (800114c <fsm_manual_run+0x274>)
 8001088:	6013      	str	r3, [r2, #0]
				green2TimeMAX++;
 800108a:	4b31      	ldr	r3, [pc, #196]	; (8001150 <fsm_manual_run+0x278>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <fsm_manual_run+0x278>)
 8001092:	6013      	str	r3, [r2, #0]
			}

			led_buffer_lane2[0] = green2TimeMAX/10;
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <fsm_manual_run+0x278>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a24      	ldr	r2, [pc, #144]	; (800112c <fsm_manual_run+0x254>)
 800109a:	fb82 1203 	smull	r1, r2, r2, r3
 800109e:	1092      	asrs	r2, r2, #2
 80010a0:	17db      	asrs	r3, r3, #31
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	4a22      	ldr	r2, [pc, #136]	; (8001130 <fsm_manual_run+0x258>)
 80010a6:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = green2TimeMAX%10;
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <fsm_manual_run+0x278>)
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <fsm_manual_run+0x254>)
 80010ae:	fb83 2301 	smull	r2, r3, r3, r1
 80010b2:	109a      	asrs	r2, r3, #2
 80010b4:	17cb      	asrs	r3, r1, #31
 80010b6:	1ad2      	subs	r2, r2, r3
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	1aca      	subs	r2, r1, r3
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <fsm_manual_run+0x258>)
 80010c4:	605a      	str	r2, [r3, #4]

			if(isButton_BUT3_Pressed() == 1){
 80010c6:	f7ff f865 	bl	8000194 <isButton_BUT3_Pressed>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d107      	bne.n	80010e0 <fsm_manual_run+0x208>
				green1_time = green1TimeMAX;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <fsm_manual_run+0x274>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <fsm_manual_run+0x27c>)
 80010d6:	6013      	str	r3, [r2, #0]
				green2_time = green2TimeMAX;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <fsm_manual_run+0x278>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <fsm_manual_run+0x280>)
 80010de:	6013      	str	r3, [r2, #0]
			}
			if(isButton_BUT1_Pressed() == 1 ){
 80010e0:	f7ff f834 	bl	800014c <isButton_BUT1_Pressed>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d10f      	bne.n	800110a <fsm_manual_run+0x232>
				status_lane1 = INIT_1;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <fsm_manual_run+0x284>)
 80010ec:	220a      	movs	r2, #10
 80010ee:	601a      	str	r2, [r3, #0]
				status_lane2 = INIT_2;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <fsm_manual_run+0x288>)
 80010f2:	220e      	movs	r2, #14
 80010f4:	601a      	str	r2, [r3, #0]
				STATUS_MODE = INIT;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <fsm_manual_run+0x238>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
			}
			break;
 80010fc:	e005      	b.n	800110a <fsm_manual_run+0x232>
			break;
 80010fe:	bf00      	nop
 8001100:	e004      	b.n	800110c <fsm_manual_run+0x234>
			break;
 8001102:	bf00      	nop
 8001104:	e002      	b.n	800110c <fsm_manual_run+0x234>
			break;
 8001106:	bf00      	nop
 8001108:	e000      	b.n	800110c <fsm_manual_run+0x234>
			break;
 800110a:	bf00      	nop
		}
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200000f0 	.word	0x200000f0
 8001114:	20000044 	.word	0x20000044
 8001118:	20000048 	.word	0x20000048
 800111c:	2000003c 	.word	0x2000003c
 8001120:	20000040 	.word	0x20000040
 8001124:	2000004c 	.word	0x2000004c
 8001128:	20000058 	.word	0x20000058
 800112c:	66666667 	.word	0x66666667
 8001130:	200000d0 	.word	0x200000d0
 8001134:	20000064 	.word	0x20000064
 8001138:	20000070 	.word	0x20000070
 800113c:	20000054 	.word	0x20000054
 8001140:	20000060 	.word	0x20000060
 8001144:	2000006c 	.word	0x2000006c
 8001148:	20000078 	.word	0x20000078
 800114c:	20000050 	.word	0x20000050
 8001150:	2000005c 	.word	0x2000005c
 8001154:	20000068 	.word	0x20000068
 8001158:	20000074 	.word	0x20000074
 800115c:	20000034 	.word	0x20000034
 8001160:	20000038 	.word	0x20000038

08001164 <FSMDisplayLED1>:
#include "fsm_setting.h"
int StatusLED1 = CountDownLED1;
int StatusLED2 = CountDownLED2;

void FSMDisplayLED1(){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	switch(StatusLED1){
 8001168:	4b46      	ldr	r3, [pc, #280]	; (8001284 <FSMDisplayLED1+0x120>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	3b14      	subs	r3, #20
 800116e:	2b03      	cmp	r3, #3
 8001170:	d87c      	bhi.n	800126c <FSMDisplayLED1+0x108>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <FSMDisplayLED1+0x14>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	08001189 	.word	0x08001189
 800117c:	080011b9 	.word	0x080011b9
 8001180:	080011f5 	.word	0x080011f5
 8001184:	08001231 	.word	0x08001231
		case CountDownLED1:
			if(timer_flag[4] == 1)
 8001188:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <FSMDisplayLED1+0x124>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d16f      	bne.n	8001270 <FSMDisplayLED1+0x10c>
			{
				update7SEG(indexLEDmot++);
 8001190:	4b3e      	ldr	r3, [pc, #248]	; (800128c <FSMDisplayLED1+0x128>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	493d      	ldr	r1, [pc, #244]	; (800128c <FSMDisplayLED1+0x128>)
 8001198:	600a      	str	r2, [r1, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fbca 	bl	8000934 <update7SEG>
				if(indexLEDmot == 2) indexLEDmot = 0;
 80011a0:	4b3a      	ldr	r3, [pc, #232]	; (800128c <FSMDisplayLED1+0x128>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d102      	bne.n	80011ae <FSMDisplayLED1+0x4a>
 80011a8:	4b38      	ldr	r3, [pc, #224]	; (800128c <FSMDisplayLED1+0x128>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
				setTimer(4, 200);
 80011ae:	21c8      	movs	r1, #200	; 0xc8
 80011b0:	2004      	movs	r0, #4
 80011b2:	f000 fa9d 	bl	80016f0 <setTimer>
			}
			break;
 80011b6:	e05b      	b.n	8001270 <FSMDisplayLED1+0x10c>
		case DisplayLED1Mode2:
			led_buffer_lane1[0] = 0;
 80011b8:	4b35      	ldr	r3, [pc, #212]	; (8001290 <FSMDisplayLED1+0x12c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
			led_buffer_lane1[1] = 2;
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <FSMDisplayLED1+0x12c>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	605a      	str	r2, [r3, #4]
			if(timer_flag[4]==1)
 80011c4:	4b30      	ldr	r3, [pc, #192]	; (8001288 <FSMDisplayLED1+0x124>)
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d153      	bne.n	8001274 <FSMDisplayLED1+0x110>
			{
				update7SEG(indexLEDmot++);
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <FSMDisplayLED1+0x128>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	492e      	ldr	r1, [pc, #184]	; (800128c <FSMDisplayLED1+0x128>)
 80011d4:	600a      	str	r2, [r1, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fbac 	bl	8000934 <update7SEG>
				if(indexLEDmot == 2) indexLEDmot = 0;
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <FSMDisplayLED1+0x128>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d102      	bne.n	80011ea <FSMDisplayLED1+0x86>
 80011e4:	4b29      	ldr	r3, [pc, #164]	; (800128c <FSMDisplayLED1+0x128>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
				setTimer(4, 200);
 80011ea:	21c8      	movs	r1, #200	; 0xc8
 80011ec:	2004      	movs	r0, #4
 80011ee:	f000 fa7f 	bl	80016f0 <setTimer>
			}
			break;
 80011f2:	e03f      	b.n	8001274 <FSMDisplayLED1+0x110>
		case DisplayLED1Mode3:
			led_buffer_lane1[0] = 0;
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <FSMDisplayLED1+0x12c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
			led_buffer_lane1[1] = 3;
 80011fa:	4b25      	ldr	r3, [pc, #148]	; (8001290 <FSMDisplayLED1+0x12c>)
 80011fc:	2203      	movs	r2, #3
 80011fe:	605a      	str	r2, [r3, #4]
			if(timer_flag[4]==1){
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <FSMDisplayLED1+0x124>)
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d137      	bne.n	8001278 <FSMDisplayLED1+0x114>
				update7SEG(indexLEDmot++);
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <FSMDisplayLED1+0x128>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	491f      	ldr	r1, [pc, #124]	; (800128c <FSMDisplayLED1+0x128>)
 8001210:	600a      	str	r2, [r1, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fb8e 	bl	8000934 <update7SEG>
				if(indexLEDmot == 2) indexLEDmot = 0;
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <FSMDisplayLED1+0x128>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d102      	bne.n	8001226 <FSMDisplayLED1+0xc2>
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <FSMDisplayLED1+0x128>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
				setTimer(4, 200);
 8001226:	21c8      	movs	r1, #200	; 0xc8
 8001228:	2004      	movs	r0, #4
 800122a:	f000 fa61 	bl	80016f0 <setTimer>
			}
			break;
 800122e:	e023      	b.n	8001278 <FSMDisplayLED1+0x114>
		case DisplayLED1Mode4:
			led_buffer_lane1[0] = 0;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <FSMDisplayLED1+0x12c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
			led_buffer_lane1[1] = 4;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <FSMDisplayLED1+0x12c>)
 8001238:	2204      	movs	r2, #4
 800123a:	605a      	str	r2, [r3, #4]
			if(timer_flag[4]==1){
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <FSMDisplayLED1+0x124>)
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d11b      	bne.n	800127c <FSMDisplayLED1+0x118>
				update7SEG(indexLEDmot++);
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <FSMDisplayLED1+0x128>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	4910      	ldr	r1, [pc, #64]	; (800128c <FSMDisplayLED1+0x128>)
 800124c:	600a      	str	r2, [r1, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fb70 	bl	8000934 <update7SEG>
				if(indexLEDmot == 2) indexLEDmot = 0;
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <FSMDisplayLED1+0x128>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d102      	bne.n	8001262 <FSMDisplayLED1+0xfe>
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <FSMDisplayLED1+0x128>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
				setTimer(4, 200);
 8001262:	21c8      	movs	r1, #200	; 0xc8
 8001264:	2004      	movs	r0, #4
 8001266:	f000 fa43 	bl	80016f0 <setTimer>
			}
			break;
 800126a:	e007      	b.n	800127c <FSMDisplayLED1+0x118>
		default:
			break;
 800126c:	bf00      	nop
 800126e:	e006      	b.n	800127e <FSMDisplayLED1+0x11a>
			break;
 8001270:	bf00      	nop
 8001272:	e004      	b.n	800127e <FSMDisplayLED1+0x11a>
			break;
 8001274:	bf00      	nop
 8001276:	e002      	b.n	800127e <FSMDisplayLED1+0x11a>
			break;
 8001278:	bf00      	nop
 800127a:	e000      	b.n	800127e <FSMDisplayLED1+0x11a>
			break;
 800127c:	bf00      	nop
	}
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000003c 	.word	0x2000003c
 8001288:	2000011c 	.word	0x2000011c
 800128c:	200000c0 	.word	0x200000c0
 8001290:	200000c8 	.word	0x200000c8

08001294 <FSMDisplayLED2>:

void FSMDisplayLED2(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	switch(StatusLED2) {
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <FSMDisplayLED2+0x7c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b18      	cmp	r3, #24
 800129e:	d002      	beq.n	80012a6 <FSMDisplayLED2+0x12>
 80012a0:	2b19      	cmp	r3, #25
 80012a2:	d018      	beq.n	80012d6 <FSMDisplayLED2+0x42>
				if(indexLEDhai == 2) indexLEDhai = 0;
				setTimer(6, 200);
			}
			break;
		default:
			break;
 80012a4:	e032      	b.n	800130c <FSMDisplayLED2+0x78>
			if(timer_flag[6] == 1){
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <FSMDisplayLED2+0x80>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d12b      	bne.n	8001306 <FSMDisplayLED2+0x72>
				update7SEG_lane2(indexLEDhai++);
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <FSMDisplayLED2+0x84>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	4918      	ldr	r1, [pc, #96]	; (8001318 <FSMDisplayLED2+0x84>)
 80012b6:	600a      	str	r2, [r1, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fb73 	bl	80009a4 <update7SEG_lane2>
				if(indexLEDhai == 2) indexLEDhai = 0;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <FSMDisplayLED2+0x84>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d102      	bne.n	80012cc <FSMDisplayLED2+0x38>
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <FSMDisplayLED2+0x84>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
				setTimer(6, 200);
 80012cc:	21c8      	movs	r1, #200	; 0xc8
 80012ce:	2006      	movs	r0, #6
 80012d0:	f000 fa0e 	bl	80016f0 <setTimer>
			break;
 80012d4:	e017      	b.n	8001306 <FSMDisplayLED2+0x72>
			if(timer_flag[6] == 1){
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <FSMDisplayLED2+0x80>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d115      	bne.n	800130a <FSMDisplayLED2+0x76>
				update7SEG_lane2(indexLEDhai++);
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <FSMDisplayLED2+0x84>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <FSMDisplayLED2+0x84>)
 80012e6:	600a      	str	r2, [r1, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fb5b 	bl	80009a4 <update7SEG_lane2>
				if(indexLEDhai == 2) indexLEDhai = 0;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <FSMDisplayLED2+0x84>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d102      	bne.n	80012fc <FSMDisplayLED2+0x68>
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <FSMDisplayLED2+0x84>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
				setTimer(6, 200);
 80012fc:	21c8      	movs	r1, #200	; 0xc8
 80012fe:	2006      	movs	r0, #6
 8001300:	f000 f9f6 	bl	80016f0 <setTimer>
			break;
 8001304:	e001      	b.n	800130a <FSMDisplayLED2+0x76>
			break;
 8001306:	bf00      	nop
 8001308:	e000      	b.n	800130c <FSMDisplayLED2+0x78>
			break;
 800130a:	bf00      	nop
	}
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000040 	.word	0x20000040
 8001314:	2000011c 	.word	0x2000011c
 8001318:	200000c4 	.word	0x200000c4

0800131c <FSM_Display_2LED>:
void FSM_Display_2LED(){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	FSMDisplayLED1();
 8001320:	f7ff ff20 	bl	8001164 <FSMDisplayLED1>
	FSMDisplayLED2();
 8001324:	f7ff ffb6 	bl	8001294 <FSMDisplayLED2>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <fsm_traffic_lane1_run>:


int status_traffic_lane1 = display_traffic_lane1;
int status_traffic_lane2 = display_traffic_lane2;

void fsm_traffic_lane1_run(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	switch (status_traffic_lane1) {
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <fsm_traffic_lane1_run+0x9c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3b1e      	subs	r3, #30
 8001336:	2b03      	cmp	r3, #3
 8001338:	d83d      	bhi.n	80013b6 <fsm_traffic_lane1_run+0x8a>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <fsm_traffic_lane1_run+0x14>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	08001351 	.word	0x08001351
 8001344:	08001357 	.word	0x08001357
 8001348:	08001397 	.word	0x08001397
 800134c:	08001377 	.word	0x08001377
		case display_traffic_lane1:
			fsm_auto_run_lane1();
 8001350:	f7ff fb60 	bl	8000a14 <fsm_auto_run_lane1>
			break;
 8001354:	e036      	b.n	80013c4 <fsm_traffic_lane1_run+0x98>
		case modify_red1:
			off_greenyellow_lane1();
 8001356:	f000 fb65 	bl	8001a24 <off_greenyellow_lane1>
			if(timer_flag[8] == 1){
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <fsm_traffic_lane1_run+0xa0>)
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d12b      	bne.n	80013ba <fsm_traffic_lane1_run+0x8e>
				HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 8001362:	2102      	movs	r1, #2
 8001364:	481a      	ldr	r0, [pc, #104]	; (80013d0 <fsm_traffic_lane1_run+0xa4>)
 8001366:	f000 fedc 	bl	8002122 <HAL_GPIO_TogglePin>
				setTimer(8, 500);
 800136a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800136e:	2008      	movs	r0, #8
 8001370:	f000 f9be 	bl	80016f0 <setTimer>
			}
			break;
 8001374:	e021      	b.n	80013ba <fsm_traffic_lane1_run+0x8e>
		case modify_yellow1:
			off_redgreen_lane1();
 8001376:	f000 fb35 	bl	80019e4 <off_redgreen_lane1>
			if(timer_flag[8] == 1){
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <fsm_traffic_lane1_run+0xa0>)
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d11d      	bne.n	80013be <fsm_traffic_lane1_run+0x92>
				HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 8001382:	2108      	movs	r1, #8
 8001384:	4812      	ldr	r0, [pc, #72]	; (80013d0 <fsm_traffic_lane1_run+0xa4>)
 8001386:	f000 fecc 	bl	8002122 <HAL_GPIO_TogglePin>
				setTimer(8, 500);
 800138a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800138e:	2008      	movs	r0, #8
 8001390:	f000 f9ae 	bl	80016f0 <setTimer>
			}
			break;
 8001394:	e013      	b.n	80013be <fsm_traffic_lane1_run+0x92>
		case modify_green1:
			off_redyellow_lane1();
 8001396:	f000 fb35 	bl	8001a04 <off_redyellow_lane1>
			if(timer_flag[8] == 1){
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <fsm_traffic_lane1_run+0xa0>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d10f      	bne.n	80013c2 <fsm_traffic_lane1_run+0x96>
				HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 80013a2:	2104      	movs	r1, #4
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <fsm_traffic_lane1_run+0xa4>)
 80013a6:	f000 febc 	bl	8002122 <HAL_GPIO_TogglePin>
				setTimer(8, 500);
 80013aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013ae:	2008      	movs	r0, #8
 80013b0:	f000 f99e 	bl	80016f0 <setTimer>
			}
			break;
 80013b4:	e005      	b.n	80013c2 <fsm_traffic_lane1_run+0x96>
		default:
			break;
 80013b6:	bf00      	nop
 80013b8:	e004      	b.n	80013c4 <fsm_traffic_lane1_run+0x98>
			break;
 80013ba:	bf00      	nop
 80013bc:	e002      	b.n	80013c4 <fsm_traffic_lane1_run+0x98>
			break;
 80013be:	bf00      	nop
 80013c0:	e000      	b.n	80013c4 <fsm_traffic_lane1_run+0x98>
			break;
 80013c2:	bf00      	nop
	}
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000044 	.word	0x20000044
 80013cc:	2000011c 	.word	0x2000011c
 80013d0:	40010800 	.word	0x40010800

080013d4 <fsm_traffic_lane2_run>:

void fsm_traffic_lane2_run(){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	switch(status_traffic_lane2){
 80013d8:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <fsm_traffic_lane2_run+0xc0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b23      	subs	r3, #35	; 0x23
 80013de:	2b0c      	cmp	r3, #12
 80013e0:	d84f      	bhi.n	8001482 <fsm_traffic_lane2_run+0xae>
 80013e2:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <fsm_traffic_lane2_run+0x14>)
 80013e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e8:	0800141d 	.word	0x0800141d
 80013ec:	08001483 	.word	0x08001483
 80013f0:	08001483 	.word	0x08001483
 80013f4:	08001483 	.word	0x08001483
 80013f8:	08001483 	.word	0x08001483
 80013fc:	08001483 	.word	0x08001483
 8001400:	08001483 	.word	0x08001483
 8001404:	08001483 	.word	0x08001483
 8001408:	08001483 	.word	0x08001483
 800140c:	08001483 	.word	0x08001483
 8001410:	08001423 	.word	0x08001423
 8001414:	08001443 	.word	0x08001443
 8001418:	08001463 	.word	0x08001463
		case display_traffic_lane2:
			fsm_auto_run_lane2();
 800141c:	f7ff fc2a 	bl	8000c74 <fsm_auto_run_lane2>
			break;
 8001420:	e036      	b.n	8001490 <fsm_traffic_lane2_run+0xbc>
		case modify_red2:
			off_greenyellow_lane2();
 8001422:	f000 fb2f 	bl	8001a84 <off_greenyellow_lane2>
			if(timer_flag[7] == 1){
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <fsm_traffic_lane2_run+0xc4>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d12b      	bne.n	8001486 <fsm_traffic_lane2_run+0xb2>
				HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 800142e:	2110      	movs	r1, #16
 8001430:	481a      	ldr	r0, [pc, #104]	; (800149c <fsm_traffic_lane2_run+0xc8>)
 8001432:	f000 fe76 	bl	8002122 <HAL_GPIO_TogglePin>
				setTimer(7, 500);
 8001436:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800143a:	2007      	movs	r0, #7
 800143c:	f000 f958 	bl	80016f0 <setTimer>
			}
			break;
 8001440:	e021      	b.n	8001486 <fsm_traffic_lane2_run+0xb2>
		case modify_green2:
			off_redyellow_lane2();
 8001442:	f000 fb0f 	bl	8001a64 <off_redyellow_lane2>
			if(timer_flag[7] == 1){
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <fsm_traffic_lane2_run+0xc4>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d11d      	bne.n	800148a <fsm_traffic_lane2_run+0xb6>
				HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 800144e:	2120      	movs	r1, #32
 8001450:	4812      	ldr	r0, [pc, #72]	; (800149c <fsm_traffic_lane2_run+0xc8>)
 8001452:	f000 fe66 	bl	8002122 <HAL_GPIO_TogglePin>
				setTimer(7, 500);
 8001456:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800145a:	2007      	movs	r0, #7
 800145c:	f000 f948 	bl	80016f0 <setTimer>
			}
			break;
 8001460:	e013      	b.n	800148a <fsm_traffic_lane2_run+0xb6>
		case modify_yellow2:
			off_redgreen_lane2();
 8001462:	f000 faef 	bl	8001a44 <off_redgreen_lane2>
			if(timer_flag[7] == 1){
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <fsm_traffic_lane2_run+0xc4>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d10f      	bne.n	800148e <fsm_traffic_lane2_run+0xba>
				HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 800146e:	2140      	movs	r1, #64	; 0x40
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <fsm_traffic_lane2_run+0xc8>)
 8001472:	f000 fe56 	bl	8002122 <HAL_GPIO_TogglePin>
				setTimer(7, 500);
 8001476:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800147a:	2007      	movs	r0, #7
 800147c:	f000 f938 	bl	80016f0 <setTimer>
			}
			break;
 8001480:	e005      	b.n	800148e <fsm_traffic_lane2_run+0xba>
		default:
			break;
 8001482:	bf00      	nop
 8001484:	e004      	b.n	8001490 <fsm_traffic_lane2_run+0xbc>
			break;
 8001486:	bf00      	nop
 8001488:	e002      	b.n	8001490 <fsm_traffic_lane2_run+0xbc>
			break;
 800148a:	bf00      	nop
 800148c:	e000      	b.n	8001490 <fsm_traffic_lane2_run+0xbc>
			break;
 800148e:	bf00      	nop
	}
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000048 	.word	0x20000048
 8001498:	2000011c 	.word	0x2000011c
 800149c:	40010800 	.word	0x40010800

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a4:	f000 fb24 	bl	8001af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a8:	f000 f824 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ac:	f000 f8aa 	bl	8001604 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014b0:	f000 f85c 	bl	800156c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80014b4:	480e      	ldr	r0, [pc, #56]	; (80014f0 <main+0x50>)
 80014b6:	f001 fa85 	bl	80029c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setTimer(4, 10);
 80014ba:	210a      	movs	r1, #10
 80014bc:	2004      	movs	r0, #4
 80014be:	f000 f917 	bl	80016f0 <setTimer>
  setTimer(6, 10);
 80014c2:	210a      	movs	r1, #10
 80014c4:	2006      	movs	r0, #6
 80014c6:	f000 f913 	bl	80016f0 <setTimer>
  setTimer(7, 500);
 80014ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014ce:	2007      	movs	r0, #7
 80014d0:	f000 f90e 	bl	80016f0 <setTimer>
  setTimer(8, 500);
 80014d4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014d8:	2008      	movs	r0, #8
 80014da:	f000 f909 	bl	80016f0 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_manual_run();
 80014de:	f7ff fcfb 	bl	8000ed8 <fsm_manual_run>
//	  FSMDisplayLED1();
//	  FSMDisplayLED2();
	  FSM_Display_2LED();
 80014e2:	f7ff ff1b 	bl	800131c <FSM_Display_2LED>
	  fsm_traffic_lane1_run();
 80014e6:	f7ff ff21 	bl	800132c <fsm_traffic_lane1_run>
	  fsm_traffic_lane2_run();
 80014ea:	f7ff ff73 	bl	80013d4 <fsm_traffic_lane2_run>
	  fsm_manual_run();
 80014ee:	e7f6      	b.n	80014de <main+0x3e>
 80014f0:	20000144 	.word	0x20000144

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b090      	sub	sp, #64	; 0x40
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	2228      	movs	r2, #40	; 0x28
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f001 fe16 	bl	8003134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151a:	2301      	movs	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151e:	2310      	movs	r3, #16
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001522:	2300      	movs	r3, #0
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fe12 	bl	8002154 <HAL_RCC_OscConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001536:	f000 f8d5 	bl	80016e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153a:	230f      	movs	r3, #15
 800153c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f001 f87e 	bl	8002654 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800155e:	f000 f8c1 	bl	80016e4 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3740      	adds	r7, #64	; 0x40
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM2_Init+0x94>)
 800158a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800158e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM2_Init+0x94>)
 8001592:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001596:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_TIM2_Init+0x94>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM2_Init+0x94>)
 80015a0:	2209      	movs	r2, #9
 80015a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM2_Init+0x94>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_TIM2_Init+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_TIM2_Init+0x94>)
 80015b2:	f001 f9b7 	bl	8002924 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015bc:	f000 f892 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <MX_TIM2_Init+0x94>)
 80015ce:	f001 fb4d 	bl	8002c6c <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015d8:	f000 f884 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_TIM2_Init+0x94>)
 80015ea:	f001 fd15 	bl	8003018 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015f4:	f000 f876 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000144 	.word	0x20000144

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <MX_GPIO_Init+0xbc>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <MX_GPIO_Init+0xbc>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <MX_GPIO_Init+0xbc>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|green1_Pin|yellow1_Pin|red2_Pin
 8001648:	2200      	movs	r2, #0
 800164a:	f64f 01fe 	movw	r1, #63742	; 0xf8fe
 800164e:	481d      	ldr	r0, [pc, #116]	; (80016c4 <MX_GPIO_Init+0xc0>)
 8001650:	f000 fd4f 	bl	80020f2 <HAL_GPIO_WritePin>
                          |green2_Pin|yellow2_Pin|LED_BLINKY_Pin|aa_Pin
                          |bb_Pin|cc_Pin|dd_Pin|ee_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|EN2_Pin
 8001654:	2200      	movs	r2, #0
 8001656:	f643 717f 	movw	r1, #16255	; 0x3f7f
 800165a:	481b      	ldr	r0, [pc, #108]	; (80016c8 <MX_GPIO_Init+0xc4>)
 800165c:	f000 fd49 	bl	80020f2 <HAL_GPIO_WritePin>
                          |EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin green1_Pin yellow1_Pin red2_Pin
                           green2_Pin yellow2_Pin LED_BLINKY_Pin aa_Pin
                           bb_Pin cc_Pin dd_Pin ee_Pin */
  GPIO_InitStruct.Pin = red1_Pin|green1_Pin|yellow1_Pin|red2_Pin
 8001660:	f64f 03fe 	movw	r3, #63742	; 0xf8fe
 8001664:	60bb      	str	r3, [r7, #8]
                          |green2_Pin|yellow2_Pin|LED_BLINKY_Pin|aa_Pin
                          |bb_Pin|cc_Pin|dd_Pin|ee_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2302      	movs	r3, #2
 8001670:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	4619      	mov	r1, r3
 8001678:	4812      	ldr	r0, [pc, #72]	; (80016c4 <MX_GPIO_Init+0xc0>)
 800167a:	f000 fba9 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin EN2_Pin
                           EN3_Pin ff_Pin gg_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin EN0_Pin
                           EN1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|EN2_Pin
 800167e:	f643 737f 	movw	r3, #16255	; 0x3f7f
 8001682:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|ff_Pin|gg_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|EN0_Pin
                          |EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2302      	movs	r3, #2
 800168e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	4619      	mov	r1, r3
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <MX_GPIO_Init+0xc4>)
 8001698:	f000 fb9a 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800169c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4619      	mov	r1, r3
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <MX_GPIO_Init+0xc0>)
 80016b2:	f000 fb8d 	bl	8001dd0 <HAL_GPIO_Init>

}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010800 	.word	0x40010800
 80016c8:	40010c00 	.word	0x40010c00

080016cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	timerRun();
 80016d4:	f000 f852 	bl	800177c <timerRun>
	getKeyInput();
 80016d8:	f7fe fd6e 	bl	80001b8 <getKeyInput>
	//getkey();

}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	e7fe      	b.n	80016ec <Error_Handler+0x8>
	...

080016f0 <setTimer>:

int timer_counter[10] = {0};
int timer_flag[10] = {0};


void setTimer(int i, int duration){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	timer_flag[i] = 0;
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <setTimer+0x30>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2100      	movs	r1, #0
 8001700:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[i] = duration/TICK;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <setTimer+0x34>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	fb92 f2f3 	sdiv	r2, r2, r3
 800170e:	4906      	ldr	r1, [pc, #24]	; (8001728 <setTimer+0x38>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	2000011c 	.word	0x2000011c
 8001724:	2000007c 	.word	0x2000007c
 8001728:	200000f4 	.word	0x200000f4

0800172c <timer_run>:
void timer_run(int i){
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	if(timer_counter[i] > 0){
 8001734:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <timer_run+0x48>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	2b00      	cmp	r3, #0
 800173e:	dd13      	ble.n	8001768 <timer_run+0x3c>
		timer_counter[i]--;
 8001740:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <timer_run+0x48>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001748:	1e5a      	subs	r2, r3, #1
 800174a:	490a      	ldr	r1, [pc, #40]	; (8001774 <timer_run+0x48>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0) timer_flag[i] = 1;
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <timer_run+0x48>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175a:	2b00      	cmp	r3, #0
 800175c:	dc04      	bgt.n	8001768 <timer_run+0x3c>
 800175e:	4a06      	ldr	r2, [pc, #24]	; (8001778 <timer_run+0x4c>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2101      	movs	r1, #1
 8001764:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	200000f4 	.word	0x200000f4
 8001778:	2000011c 	.word	0x2000011c

0800177c <timerRun>:
void timerRun(){
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	timer_run(0);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff ffd3 	bl	800172c <timer_run>
	timer_run(1);
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff ffd0 	bl	800172c <timer_run>
	timer_run(2);
 800178c:	2002      	movs	r0, #2
 800178e:	f7ff ffcd 	bl	800172c <timer_run>
	timer_run(3);
 8001792:	2003      	movs	r0, #3
 8001794:	f7ff ffca 	bl	800172c <timer_run>
	timer_run(4);
 8001798:	2004      	movs	r0, #4
 800179a:	f7ff ffc7 	bl	800172c <timer_run>
	timer_run(5);
 800179e:	2005      	movs	r0, #5
 80017a0:	f7ff ffc4 	bl	800172c <timer_run>
	timer_run(6);
 80017a4:	2006      	movs	r0, #6
 80017a6:	f7ff ffc1 	bl	800172c <timer_run>
	timer_run(7);
 80017aa:	2007      	movs	r0, #7
 80017ac:	f7ff ffbe 	bl	800172c <timer_run>
	timer_run(8);
 80017b0:	2008      	movs	r0, #8
 80017b2:	f7ff ffbb 	bl	800172c <timer_run>
	timer_run(9);
 80017b6:	2009      	movs	r0, #9
 80017b8:	f7ff ffb8 	bl	800172c <timer_run>

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_MspInit+0x5c>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	4a14      	ldr	r2, [pc, #80]	; (800181c <HAL_MspInit+0x5c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6193      	str	r3, [r2, #24]
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_MspInit+0x5c>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_MspInit+0x5c>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_MspInit+0x5c>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_MspInit+0x5c>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_MspInit+0x60>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <HAL_MspInit+0x60>)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	40021000 	.word	0x40021000
 8001820:	40010000 	.word	0x40010000

08001824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001834:	d113      	bne.n	800185e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_TIM_Base_MspInit+0x44>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_TIM_Base_MspInit+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_TIM_Base_MspInit+0x44>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	201c      	movs	r0, #28
 8001854:	f000 fa85 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001858:	201c      	movs	r0, #28
 800185a:	f000 fa9e 	bl	8001d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b2:	f000 f963 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <TIM2_IRQHandler+0x10>)
 80018c2:	f001 f8cb 	bl	8002a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000144 	.word	0x20000144

080018d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <red_1>:
#include "traffic_2_lane.h"

void red_1(void){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	2102      	movs	r1, #2
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <red_1+0x28>)
 80018e6:	f000 fc04 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2104      	movs	r1, #4
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <red_1+0x28>)
 80018f0:	f000 fbff 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2108      	movs	r1, #8
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <red_1+0x28>)
 80018fa:	f000 fbfa 	bl	80020f2 <HAL_GPIO_WritePin>
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40010800 	.word	0x40010800

08001908 <green_1>:

void green_1(void){
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2102      	movs	r1, #2
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <green_1+0x28>)
 8001912:	f000 fbee 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2108      	movs	r1, #8
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <green_1+0x28>)
 800191c:	f000 fbe9 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2104      	movs	r1, #4
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <green_1+0x28>)
 8001926:	f000 fbe4 	bl	80020f2 <HAL_GPIO_WritePin>
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40010800 	.word	0x40010800

08001934 <yellow_1>:

void yellow_1(void){
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET );
 8001938:	2200      	movs	r2, #0
 800193a:	2102      	movs	r1, #2
 800193c:	4807      	ldr	r0, [pc, #28]	; (800195c <yellow_1+0x28>)
 800193e:	f000 fbd8 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET );
 8001942:	2201      	movs	r2, #1
 8001944:	2108      	movs	r1, #8
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <yellow_1+0x28>)
 8001948:	f000 fbd3 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET );
 800194c:	2200      	movs	r2, #0
 800194e:	2104      	movs	r1, #4
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <yellow_1+0x28>)
 8001952:	f000 fbce 	bl	80020f2 <HAL_GPIO_WritePin>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40010800 	.word	0x40010800

08001960 <red_2>:

void red_2(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	2110      	movs	r1, #16
 8001968:	4807      	ldr	r0, [pc, #28]	; (8001988 <red_2+0x28>)
 800196a:	f000 fbc2 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	2120      	movs	r1, #32
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <red_2+0x28>)
 8001974:	f000 fbbd 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	2140      	movs	r1, #64	; 0x40
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <red_2+0x28>)
 800197e:	f000 fbb8 	bl	80020f2 <HAL_GPIO_WritePin>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40010800 	.word	0x40010800

0800198c <green_2>:

void green_2(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2110      	movs	r1, #16
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <green_2+0x28>)
 8001996:	f000 fbac 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2140      	movs	r1, #64	; 0x40
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <green_2+0x28>)
 80019a0:	f000 fba7 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	2120      	movs	r1, #32
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <green_2+0x28>)
 80019aa:	f000 fba2 	bl	80020f2 <HAL_GPIO_WritePin>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40010800 	.word	0x40010800

080019b8 <yellow_2>:

void yellow_2(void){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET );
 80019bc:	2200      	movs	r2, #0
 80019be:	2110      	movs	r1, #16
 80019c0:	4807      	ldr	r0, [pc, #28]	; (80019e0 <yellow_2+0x28>)
 80019c2:	f000 fb96 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET );
 80019c6:	2201      	movs	r2, #1
 80019c8:	2140      	movs	r1, #64	; 0x40
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <yellow_2+0x28>)
 80019cc:	f000 fb91 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET );
 80019d0:	2200      	movs	r2, #0
 80019d2:	2120      	movs	r1, #32
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <yellow_2+0x28>)
 80019d6:	f000 fb8c 	bl	80020f2 <HAL_GPIO_WritePin>
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40010800 	.word	0x40010800

080019e4 <off_redgreen_lane1>:





void off_redgreen_lane1(){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2102      	movs	r1, #2
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <off_redgreen_lane1+0x1c>)
 80019ee:	f000 fb80 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2104      	movs	r1, #4
 80019f6:	4802      	ldr	r0, [pc, #8]	; (8001a00 <off_redgreen_lane1+0x1c>)
 80019f8:	f000 fb7b 	bl	80020f2 <HAL_GPIO_WritePin>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40010800 	.word	0x40010800

08001a04 <off_redyellow_lane1>:
void off_redyellow_lane1(){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <off_redyellow_lane1+0x1c>)
 8001a0e:	f000 fb70 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2108      	movs	r1, #8
 8001a16:	4802      	ldr	r0, [pc, #8]	; (8001a20 <off_redyellow_lane1+0x1c>)
 8001a18:	f000 fb6b 	bl	80020f2 <HAL_GPIO_WritePin>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40010800 	.word	0x40010800

08001a24 <off_greenyellow_lane1>:
void off_greenyellow_lane1(){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <off_greenyellow_lane1+0x1c>)
 8001a2e:	f000 fb60 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2108      	movs	r1, #8
 8001a36:	4802      	ldr	r0, [pc, #8]	; (8001a40 <off_greenyellow_lane1+0x1c>)
 8001a38:	f000 fb5b 	bl	80020f2 <HAL_GPIO_WritePin>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40010800 	.word	0x40010800

08001a44 <off_redgreen_lane2>:





void off_redgreen_lane2(){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET );
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <off_redgreen_lane2+0x1c>)
 8001a4e:	f000 fb50 	bl	80020f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2120      	movs	r1, #32
 8001a56:	4802      	ldr	r0, [pc, #8]	; (8001a60 <off_redgreen_lane2+0x1c>)
 8001a58:	f000 fb4b 	bl	80020f2 <HAL_GPIO_WritePin>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40010800 	.word	0x40010800

08001a64 <off_redyellow_lane2>:
void off_redyellow_lane2(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <off_redyellow_lane2+0x1c>)
 8001a6e:	f000 fb40 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2140      	movs	r1, #64	; 0x40
 8001a76:	4802      	ldr	r0, [pc, #8]	; (8001a80 <off_redyellow_lane2+0x1c>)
 8001a78:	f000 fb3b 	bl	80020f2 <HAL_GPIO_WritePin>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40010800 	.word	0x40010800

08001a84 <off_greenyellow_lane2>:
void off_greenyellow_lane2(){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2120      	movs	r1, #32
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <off_greenyellow_lane2+0x1c>)
 8001a8e:	f000 fb30 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2140      	movs	r1, #64	; 0x40
 8001a96:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <off_greenyellow_lane2+0x1c>)
 8001a98:	f000 fb2b 	bl	80020f2 <HAL_GPIO_WritePin>

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40010800 	.word	0x40010800

08001aa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aa6:	490d      	ldr	r1, [pc, #52]	; (8001adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001abc:	4c0a      	ldr	r4, [pc, #40]	; (8001ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aca:	f7ff ff01 	bl	80018d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ace:	f001 fb0d 	bl	80030ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ad2:	f7ff fce5 	bl	80014a0 <main>
  bx lr
 8001ad6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001ae0:	08003184 	.word	0x08003184
  ldr r2, =_sbss
 8001ae4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001ae8:	20000190 	.word	0x20000190

08001aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC1_2_IRQHandler>
	...

08001af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_Init+0x28>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <HAL_Init+0x28>)
 8001afa:	f043 0310 	orr.w	r3, r3, #16
 8001afe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f923 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	200f      	movs	r0, #15
 8001b08:	f000 f808 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fe58 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40022000 	.word	0x40022000

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f93b 	bl	8001db6 <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 f903 	bl	8001d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000080 	.word	0x20000080
 8001b74:	20000088 	.word	0x20000088
 8001b78:	20000084 	.word	0x20000084

08001b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_IncTick+0x1c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_IncTick+0x20>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a03      	ldr	r2, [pc, #12]	; (8001b9c <HAL_IncTick+0x20>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000088 	.word	0x20000088
 8001b9c:	2000018c 	.word	0x2000018c

08001ba0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <HAL_GetTick+0x10>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	2000018c 	.word	0x2000018c

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4906      	ldr	r1, [pc, #24]	; (8001c4c <__NVIC_EnableIRQ+0x34>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f7ff ff90 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff2d 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff42 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff90 	bl	8001ca4 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5f 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff35 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffa2 	bl	8001d08 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b08b      	sub	sp, #44	; 0x2c
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de2:	e148      	b.n	8002076 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de4:	2201      	movs	r2, #1
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 8137 	bne.w	8002070 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4aa3      	ldr	r2, [pc, #652]	; (8002094 <HAL_GPIO_Init+0x2c4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d05e      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e0c:	4aa1      	ldr	r2, [pc, #644]	; (8002094 <HAL_GPIO_Init+0x2c4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d875      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e12:	4aa1      	ldr	r2, [pc, #644]	; (8002098 <HAL_GPIO_Init+0x2c8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d058      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e18:	4a9f      	ldr	r2, [pc, #636]	; (8002098 <HAL_GPIO_Init+0x2c8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d86f      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e1e:	4a9f      	ldr	r2, [pc, #636]	; (800209c <HAL_GPIO_Init+0x2cc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d052      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e24:	4a9d      	ldr	r2, [pc, #628]	; (800209c <HAL_GPIO_Init+0x2cc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d869      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e2a:	4a9d      	ldr	r2, [pc, #628]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04c      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e30:	4a9b      	ldr	r2, [pc, #620]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d863      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e36:	4a9b      	ldr	r2, [pc, #620]	; (80020a4 <HAL_GPIO_Init+0x2d4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d046      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e3c:	4a99      	ldr	r2, [pc, #612]	; (80020a4 <HAL_GPIO_Init+0x2d4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d85d      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d82a      	bhi.n	8001e9c <HAL_GPIO_Init+0xcc>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d859      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e4a:	a201      	add	r2, pc, #4	; (adr r2, 8001e50 <HAL_GPIO_Init+0x80>)
 8001e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e50:	08001ecb 	.word	0x08001ecb
 8001e54:	08001ea5 	.word	0x08001ea5
 8001e58:	08001eb7 	.word	0x08001eb7
 8001e5c:	08001ef9 	.word	0x08001ef9
 8001e60:	08001eff 	.word	0x08001eff
 8001e64:	08001eff 	.word	0x08001eff
 8001e68:	08001eff 	.word	0x08001eff
 8001e6c:	08001eff 	.word	0x08001eff
 8001e70:	08001eff 	.word	0x08001eff
 8001e74:	08001eff 	.word	0x08001eff
 8001e78:	08001eff 	.word	0x08001eff
 8001e7c:	08001eff 	.word	0x08001eff
 8001e80:	08001eff 	.word	0x08001eff
 8001e84:	08001eff 	.word	0x08001eff
 8001e88:	08001eff 	.word	0x08001eff
 8001e8c:	08001eff 	.word	0x08001eff
 8001e90:	08001eff 	.word	0x08001eff
 8001e94:	08001ead 	.word	0x08001ead
 8001e98:	08001ec1 	.word	0x08001ec1
 8001e9c:	4a82      	ldr	r2, [pc, #520]	; (80020a8 <HAL_GPIO_Init+0x2d8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ea2:	e02c      	b.n	8001efe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e029      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e024      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	3308      	adds	r3, #8
 8001ebc:	623b      	str	r3, [r7, #32]
          break;
 8001ebe:	e01f      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	330c      	adds	r3, #12
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e01a      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e013      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	611a      	str	r2, [r3, #16]
          break;
 8001eea:	e009      	b.n	8001f00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eec:	2308      	movs	r3, #8
 8001eee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	615a      	str	r2, [r3, #20]
          break;
 8001ef6:	e003      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          break;
 8001efe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2bff      	cmp	r3, #255	; 0xff
 8001f04:	d801      	bhi.n	8001f0a <HAL_GPIO_Init+0x13a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	e001      	b.n	8001f0e <HAL_GPIO_Init+0x13e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2bff      	cmp	r3, #255	; 0xff
 8001f14:	d802      	bhi.n	8001f1c <HAL_GPIO_Init+0x14c>
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x152>
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	3b08      	subs	r3, #8
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	210f      	movs	r1, #15
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	6a39      	ldr	r1, [r7, #32]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8090 	beq.w	8002070 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f50:	4b56      	ldr	r3, [pc, #344]	; (80020ac <HAL_GPIO_Init+0x2dc>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a55      	ldr	r2, [pc, #340]	; (80020ac <HAL_GPIO_Init+0x2dc>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b53      	ldr	r3, [pc, #332]	; (80020ac <HAL_GPIO_Init+0x2dc>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f68:	4a51      	ldr	r2, [pc, #324]	; (80020b0 <HAL_GPIO_Init+0x2e0>)
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a49      	ldr	r2, [pc, #292]	; (80020b4 <HAL_GPIO_Init+0x2e4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00d      	beq.n	8001fb0 <HAL_GPIO_Init+0x1e0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a48      	ldr	r2, [pc, #288]	; (80020b8 <HAL_GPIO_Init+0x2e8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_Init+0x1dc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a47      	ldr	r2, [pc, #284]	; (80020bc <HAL_GPIO_Init+0x2ec>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_GPIO_Init+0x1d8>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e004      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fc2:	493b      	ldr	r1, [pc, #236]	; (80020b0 <HAL_GPIO_Init+0x2e0>)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fdc:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4937      	ldr	r1, [pc, #220]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fea:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	4933      	ldr	r1, [pc, #204]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	492d      	ldr	r1, [pc, #180]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002012:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	4929      	ldr	r1, [pc, #164]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 800201c:	4013      	ands	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	4923      	ldr	r1, [pc, #140]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	491f      	ldr	r1, [pc, #124]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8002044:	4013      	ands	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4919      	ldr	r1, [pc, #100]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	60cb      	str	r3, [r1, #12]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4915      	ldr	r1, [pc, #84]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 800206c:	4013      	ands	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	3301      	adds	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	f47f aeaf 	bne.w	8001de4 <HAL_GPIO_Init+0x14>
  }
}
 8002086:	bf00      	nop
 8002088:	bf00      	nop
 800208a:	372c      	adds	r7, #44	; 0x2c
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	10320000 	.word	0x10320000
 8002098:	10310000 	.word	0x10310000
 800209c:	10220000 	.word	0x10220000
 80020a0:	10210000 	.word	0x10210000
 80020a4:	10120000 	.word	0x10120000
 80020a8:	10110000 	.word	0x10110000
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40010800 	.word	0x40010800
 80020b8:	40010c00 	.word	0x40010c00
 80020bc:	40011000 	.word	0x40011000
 80020c0:	40010400 	.word	0x40010400

080020c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	887b      	ldrh	r3, [r7, #2]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e001      	b.n	80020e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	807b      	strh	r3, [r7, #2]
 80020fe:	4613      	mov	r3, r2
 8002100:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002102:	787b      	ldrb	r3, [r7, #1]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002108:	887a      	ldrh	r2, [r7, #2]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800210e:	e003      	b.n	8002118 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	041a      	lsls	r2, r3, #16
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	611a      	str	r2, [r3, #16]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	460b      	mov	r3, r1
 800212c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002134:	887a      	ldrh	r2, [r7, #2]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	041a      	lsls	r2, r3, #16
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43d9      	mvns	r1, r3
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	400b      	ands	r3, r1
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e26c      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8087 	beq.w	8002282 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002174:	4b92      	ldr	r3, [pc, #584]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b04      	cmp	r3, #4
 800217e:	d00c      	beq.n	800219a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002180:	4b8f      	ldr	r3, [pc, #572]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b08      	cmp	r3, #8
 800218a:	d112      	bne.n	80021b2 <HAL_RCC_OscConfig+0x5e>
 800218c:	4b8c      	ldr	r3, [pc, #560]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002198:	d10b      	bne.n	80021b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219a:	4b89      	ldr	r3, [pc, #548]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d06c      	beq.n	8002280 <HAL_RCC_OscConfig+0x12c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d168      	bne.n	8002280 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e246      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x76>
 80021bc:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a7f      	ldr	r2, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	e02e      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x98>
 80021d2:	4b7b      	ldr	r3, [pc, #492]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a7a      	ldr	r2, [pc, #488]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b78      	ldr	r3, [pc, #480]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a77      	ldr	r2, [pc, #476]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e01d      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0xbc>
 80021f6:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a71      	ldr	r2, [pc, #452]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6e      	ldr	r2, [pc, #440]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 8002210:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a6a      	ldr	r2, [pc, #424]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b68      	ldr	r3, [pc, #416]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a67      	ldr	r2, [pc, #412]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002226:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff fcb6 	bl	8001ba0 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff fcb2 	bl	8001ba0 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1fa      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0xe4>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fca2 	bl	8001ba0 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff fc9e 	bl	8001ba0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1e6      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x10c>
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d063      	beq.n	8002356 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228e:	4b4c      	ldr	r3, [pc, #304]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800229a:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d11c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x18c>
 80022a6:	4b46      	ldr	r3, [pc, #280]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x176>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e1ba      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4939      	ldr	r1, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	e03a      	b.n	8002356 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e8:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_RCC_OscConfig+0x270>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7ff fc57 	bl	8001ba0 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f6:	f7ff fc53 	bl	8001ba0 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e19b      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4927      	ldr	r1, [pc, #156]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	e015      	b.n	8002356 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232a:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <HAL_RCC_OscConfig+0x270>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fc36 	bl	8001ba0 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002338:	f7ff fc32 	bl	8001ba0 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e17a      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d03a      	beq.n	80023d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d019      	beq.n	800239e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_RCC_OscConfig+0x274>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002370:	f7ff fc16 	bl	8001ba0 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002378:	f7ff fc12 	bl	8001ba0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e15a      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002396:	2001      	movs	r0, #1
 8002398:	f000 faa6 	bl	80028e8 <RCC_Delay>
 800239c:	e01c      	b.n	80023d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_RCC_OscConfig+0x274>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7ff fbfc 	bl	8001ba0 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023aa:	e00f      	b.n	80023cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ac:	f7ff fbf8 	bl	8001ba0 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d908      	bls.n	80023cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e140      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	42420000 	.word	0x42420000
 80023c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	4b9e      	ldr	r3, [pc, #632]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e9      	bne.n	80023ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a6 	beq.w	8002532 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b97      	ldr	r3, [pc, #604]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	4b94      	ldr	r3, [pc, #592]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4a93      	ldr	r2, [pc, #588]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	61d3      	str	r3, [r2, #28]
 8002402:	4b91      	ldr	r3, [pc, #580]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b8e      	ldr	r3, [pc, #568]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b8b      	ldr	r3, [pc, #556]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a8a      	ldr	r2, [pc, #552]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7ff fbb9 	bl	8001ba0 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7ff fbb5 	bl	8001ba0 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	; 0x64
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0fd      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x312>
 8002458:	4b7b      	ldr	r3, [pc, #492]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a7a      	ldr	r2, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6213      	str	r3, [r2, #32]
 8002464:	e02d      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x334>
 800246e:	4b76      	ldr	r3, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a75      	ldr	r2, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4a72      	ldr	r2, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	f023 0304 	bic.w	r3, r3, #4
 8002484:	6213      	str	r3, [r2, #32]
 8002486:	e01c      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b05      	cmp	r3, #5
 800248e:	d10c      	bne.n	80024aa <HAL_RCC_OscConfig+0x356>
 8002490:	4b6d      	ldr	r3, [pc, #436]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a6c      	ldr	r2, [pc, #432]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4a69      	ldr	r2, [pc, #420]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	e00b      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 80024aa:	4b67      	ldr	r3, [pc, #412]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a66      	ldr	r2, [pc, #408]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	4b64      	ldr	r3, [pc, #400]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a63      	ldr	r2, [pc, #396]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d015      	beq.n	80024f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7ff fb69 	bl	8001ba0 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7ff fb65 	bl	8001ba0 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0ab      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	4b57      	ldr	r3, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ee      	beq.n	80024d2 <HAL_RCC_OscConfig+0x37e>
 80024f4:	e014      	b.n	8002520 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7ff fb53 	bl	8001ba0 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7ff fb4f 	bl	8001ba0 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e095      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002514:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ee      	bne.n	80024fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d105      	bne.n	8002532 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002526:	4b48      	ldr	r3, [pc, #288]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a47      	ldr	r2, [pc, #284]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002530:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8081 	beq.w	800263e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800253c:	4b42      	ldr	r3, [pc, #264]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	d061      	beq.n	800260c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d146      	bne.n	80025de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002550:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_RCC_OscConfig+0x4fc>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7ff fb23 	bl	8001ba0 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7ff fb1f 	bl	8001ba0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e067      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002570:	4b35      	ldr	r3, [pc, #212]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d108      	bne.n	8002598 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	492d      	ldr	r1, [pc, #180]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a19      	ldr	r1, [r3, #32]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	430b      	orrs	r3, r1
 80025aa:	4927      	ldr	r1, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x4fc>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7ff faf3 	bl	8001ba0 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7ff faef 	bl	8001ba0 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e037      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x46a>
 80025dc:	e02f      	b.n	800263e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_RCC_OscConfig+0x4fc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff fadc 	bl	8001ba0 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7ff fad8 	bl	8001ba0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e020      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x498>
 800260a:	e018      	b.n	800263e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e013      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	429a      	cmp	r2, r3
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
 8002650:	42420060 	.word	0x42420060

08002654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0d0      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d910      	bls.n	8002698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b67      	ldr	r3, [pc, #412]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0207 	bic.w	r2, r3, #7
 800267e:	4965      	ldr	r1, [pc, #404]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b63      	ldr	r3, [pc, #396]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0b8      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b0:	4b59      	ldr	r3, [pc, #356]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d4:	4b50      	ldr	r3, [pc, #320]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	494d      	ldr	r1, [pc, #308]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d040      	beq.n	8002774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d115      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e07f      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e073      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e06b      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002732:	4b39      	ldr	r3, [pc, #228]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f023 0203 	bic.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4936      	ldr	r1, [pc, #216]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002744:	f7ff fa2c 	bl	8001ba0 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	e00a      	b.n	8002762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7ff fa28 	bl	8001ba0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	; 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e053      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 020c 	and.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	429a      	cmp	r2, r3
 8002772:	d1eb      	bne.n	800274c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d210      	bcs.n	80027a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 0207 	bic.w	r2, r3, #7
 800278a:	4922      	ldr	r1, [pc, #136]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e032      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4916      	ldr	r1, [pc, #88]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	490e      	ldr	r1, [pc, #56]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027e2:	f000 f821 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80027e6:	4602      	mov	r2, r0
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	490a      	ldr	r1, [pc, #40]	; (800281c <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	5ccb      	ldrb	r3, [r1, r3]
 80027f6:	fa22 f303 	lsr.w	r3, r2, r3
 80027fa:	4a09      	ldr	r2, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x1cc>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1d0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f98a 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40022000 	.word	0x40022000
 8002818:	40021000 	.word	0x40021000
 800281c:	0800316c 	.word	0x0800316c
 8002820:	20000080 	.word	0x20000080
 8002824:	20000084 	.word	0x20000084

08002828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	b490      	push	{r4, r7}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800282e:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002830:	1d3c      	adds	r4, r7, #4
 8002832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002838:	f240 2301 	movw	r3, #513	; 0x201
 800283c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b04      	cmp	r3, #4
 8002860:	d002      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x40>
 8002862:	2b08      	cmp	r3, #8
 8002864:	d003      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x46>
 8002866:	e02d      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286a:	623b      	str	r3, [r7, #32]
      break;
 800286c:	e02d      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	0c9b      	lsrs	r3, r3, #18
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800287a:	4413      	add	r3, r2
 800287c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002880:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800288c:	4b13      	ldr	r3, [pc, #76]	; (80028dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	0c5b      	lsrs	r3, r3, #17
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800289a:	4413      	add	r3, r2
 800289c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a6:	fb02 f203 	mul.w	r2, r2, r3
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	e004      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	623b      	str	r3, [r7, #32]
      break;
 80028c2:	e002      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c6:	623b      	str	r3, [r7, #32]
      break;
 80028c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ca:	6a3b      	ldr	r3, [r7, #32]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3728      	adds	r7, #40	; 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc90      	pop	{r4, r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	0800315c 	.word	0x0800315c
 80028dc:	40021000 	.word	0x40021000
 80028e0:	007a1200 	.word	0x007a1200
 80028e4:	003d0900 	.word	0x003d0900

080028e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <RCC_Delay+0x34>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <RCC_Delay+0x38>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	0a5b      	lsrs	r3, r3, #9
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002904:	bf00      	nop
  }
  while (Delay --);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1e5a      	subs	r2, r3, #1
 800290a:	60fa      	str	r2, [r7, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f9      	bne.n	8002904 <RCC_Delay+0x1c>
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	20000080 	.word	0x20000080
 8002920:	10624dd3 	.word	0x10624dd3

08002924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e041      	b.n	80029ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe ff6a 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f000 fa6a 	bl	8002e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d001      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e035      	b.n	8002a48 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <HAL_TIM_Base_Start_IT+0x90>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d009      	beq.n	8002a12 <HAL_TIM_Base_Start_IT+0x4e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a06:	d004      	beq.n	8002a12 <HAL_TIM_Base_Start_IT+0x4e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <HAL_TIM_Base_Start_IT+0x94>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d111      	bne.n	8002a36 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b06      	cmp	r3, #6
 8002a22:	d010      	beq.n	8002a46 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a34:	e007      	b.n	8002a46 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40000400 	.word	0x40000400

08002a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0202 	mvn.w	r2, #2
 8002a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f9b1 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9a4 	bl	8002df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f9b3 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0204 	mvn.w	r2, #4
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f987 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f97a 	bl	8002df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f989 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d122      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d11b      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0208 	mvn.w	r2, #8
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2204      	movs	r2, #4
 8002b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f95d 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f950 	bl	8002df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f95f 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d122      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b10      	cmp	r3, #16
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0210 	mvn.w	r2, #16
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2208      	movs	r2, #8
 8002b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f933 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f926 	bl	8002df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f935 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d10e      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d107      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0201 	mvn.w	r2, #1
 8002bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe fd76 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d10e      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf8:	2b80      	cmp	r3, #128	; 0x80
 8002bfa:	d107      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa67 	bl	80030da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d10e      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d107      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8f9 	bl	8002e2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d10e      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d107      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0220 	mvn.w	r2, #32
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa32 	bl	80030c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_TIM_ConfigClockSource+0x18>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e0b3      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x180>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002caa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cbc:	d03e      	beq.n	8002d3c <HAL_TIM_ConfigClockSource+0xd0>
 8002cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc2:	f200 8087 	bhi.w	8002dd4 <HAL_TIM_ConfigClockSource+0x168>
 8002cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cca:	f000 8085 	beq.w	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	d87f      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x168>
 8002cd4:	2b70      	cmp	r3, #112	; 0x70
 8002cd6:	d01a      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0xa2>
 8002cd8:	2b70      	cmp	r3, #112	; 0x70
 8002cda:	d87b      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x168>
 8002cdc:	2b60      	cmp	r3, #96	; 0x60
 8002cde:	d050      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0x116>
 8002ce0:	2b60      	cmp	r3, #96	; 0x60
 8002ce2:	d877      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x168>
 8002ce4:	2b50      	cmp	r3, #80	; 0x50
 8002ce6:	d03c      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0xf6>
 8002ce8:	2b50      	cmp	r3, #80	; 0x50
 8002cea:	d873      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x168>
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d058      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0x136>
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	d86f      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x168>
 8002cf4:	2b30      	cmp	r3, #48	; 0x30
 8002cf6:	d064      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x156>
 8002cf8:	2b30      	cmp	r3, #48	; 0x30
 8002cfa:	d86b      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x168>
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d060      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x156>
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d867      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x168>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d05c      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x156>
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d05a      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d0c:	e062      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6899      	ldr	r1, [r3, #8]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f000 f95c 	bl	8002fda <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	609a      	str	r2, [r3, #8]
      break;
 8002d3a:	e04e      	b.n	8002dda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6899      	ldr	r1, [r3, #8]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f000 f945 	bl	8002fda <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d5e:	609a      	str	r2, [r3, #8]
      break;
 8002d60:	e03b      	b.n	8002dda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f000 f8bc 	bl	8002eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2150      	movs	r1, #80	; 0x50
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f913 	bl	8002fa6 <TIM_ITRx_SetConfig>
      break;
 8002d80:	e02b      	b.n	8002dda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f000 f8da 	bl	8002f48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2160      	movs	r1, #96	; 0x60
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f903 	bl	8002fa6 <TIM_ITRx_SetConfig>
      break;
 8002da0:	e01b      	b.n	8002dda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f000 f89c 	bl	8002eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2140      	movs	r1, #64	; 0x40
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f8f3 	bl	8002fa6 <TIM_ITRx_SetConfig>
      break;
 8002dc0:	e00b      	b.n	8002dda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f000 f8ea 	bl	8002fa6 <TIM_ITRx_SetConfig>
        break;
 8002dd2:	e002      	b.n	8002dda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dd4:	bf00      	nop
 8002dd6:	e000      	b.n	8002dda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a25      	ldr	r2, [pc, #148]	; (8002ee4 <TIM_Base_SetConfig+0xa8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d007      	beq.n	8002e64 <TIM_Base_SetConfig+0x28>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5a:	d003      	beq.n	8002e64 <TIM_Base_SetConfig+0x28>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <TIM_Base_SetConfig+0xac>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d108      	bne.n	8002e76 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <TIM_Base_SetConfig+0xa8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d007      	beq.n	8002e8e <TIM_Base_SetConfig+0x52>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e84:	d003      	beq.n	8002e8e <TIM_Base_SetConfig+0x52>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <TIM_Base_SetConfig+0xac>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d108      	bne.n	8002ea0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <TIM_Base_SetConfig+0xa8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d103      	bne.n	8002ed4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	40012c00 	.word	0x40012c00
 8002ee8:	40000400 	.word	0x40000400

08002eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f023 0201 	bic.w	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f023 030a 	bic.w	r3, r3, #10
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	621a      	str	r2, [r3, #32]
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f023 0210 	bic.w	r2, r3, #16
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	031b      	lsls	r3, r3, #12
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	621a      	str	r2, [r3, #32]
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f043 0307 	orr.w	r3, r3, #7
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b087      	sub	sp, #28
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	021a      	lsls	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4313      	orrs	r3, r2
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	609a      	str	r2, [r3, #8]
}
 800300e:	bf00      	nop
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800302c:	2302      	movs	r3, #2
 800302e:	e041      	b.n	80030b4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d009      	beq.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307c:	d004      	beq.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a10      	ldr	r2, [pc, #64]	; (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d10c      	bne.n	80030a2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800308e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	4313      	orrs	r3, r2
 8003098:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40000400 	.word	0x40000400

080030c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr

080030da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <__libc_init_array>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	2600      	movs	r6, #0
 80030f0:	4d0c      	ldr	r5, [pc, #48]	; (8003124 <__libc_init_array+0x38>)
 80030f2:	4c0d      	ldr	r4, [pc, #52]	; (8003128 <__libc_init_array+0x3c>)
 80030f4:	1b64      	subs	r4, r4, r5
 80030f6:	10a4      	asrs	r4, r4, #2
 80030f8:	42a6      	cmp	r6, r4
 80030fa:	d109      	bne.n	8003110 <__libc_init_array+0x24>
 80030fc:	f000 f822 	bl	8003144 <_init>
 8003100:	2600      	movs	r6, #0
 8003102:	4d0a      	ldr	r5, [pc, #40]	; (800312c <__libc_init_array+0x40>)
 8003104:	4c0a      	ldr	r4, [pc, #40]	; (8003130 <__libc_init_array+0x44>)
 8003106:	1b64      	subs	r4, r4, r5
 8003108:	10a4      	asrs	r4, r4, #2
 800310a:	42a6      	cmp	r6, r4
 800310c:	d105      	bne.n	800311a <__libc_init_array+0x2e>
 800310e:	bd70      	pop	{r4, r5, r6, pc}
 8003110:	f855 3b04 	ldr.w	r3, [r5], #4
 8003114:	4798      	blx	r3
 8003116:	3601      	adds	r6, #1
 8003118:	e7ee      	b.n	80030f8 <__libc_init_array+0xc>
 800311a:	f855 3b04 	ldr.w	r3, [r5], #4
 800311e:	4798      	blx	r3
 8003120:	3601      	adds	r6, #1
 8003122:	e7f2      	b.n	800310a <__libc_init_array+0x1e>
 8003124:	0800317c 	.word	0x0800317c
 8003128:	0800317c 	.word	0x0800317c
 800312c:	0800317c 	.word	0x0800317c
 8003130:	08003180 	.word	0x08003180

08003134 <memset>:
 8003134:	4603      	mov	r3, r0
 8003136:	4402      	add	r2, r0
 8003138:	4293      	cmp	r3, r2
 800313a:	d100      	bne.n	800313e <memset+0xa>
 800313c:	4770      	bx	lr
 800313e:	f803 1b01 	strb.w	r1, [r3], #1
 8003142:	e7f9      	b.n	8003138 <memset+0x4>

08003144 <_init>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	bf00      	nop
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr

08003150 <_fini>:
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	bf00      	nop
 8003154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003156:	bc08      	pop	{r3}
 8003158:	469e      	mov	lr, r3
 800315a:	4770      	bx	lr
