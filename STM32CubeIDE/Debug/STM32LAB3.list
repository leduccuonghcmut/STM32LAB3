
STM32LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003174  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a0  080032a0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080032a0  080032a0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032a0  080032a0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080032a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000008c  08003334  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003334  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2bf  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8a  00000000  00000000  0002a374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002c100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002cc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017512  00000000  00000000  0002d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d670  00000000  00000000  00044b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826b2  00000000  00000000  000521b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4864  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002acc  00000000  00000000  000d48b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003268 	.word	0x08003268

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08003268 	.word	0x08003268

0800014c <isButton1_Pressed>:
int button1_long_flag = 0;
int button2_long_flag = 0;
int button3_long_flag = 0;


int isButton1_Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1_Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1_Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000a8 	.word	0x200000a8

08000170 <isButton2_Pressed>:
int isButton2_Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2_Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2_Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000ac 	.word	0x200000ac

08000194 <isButton3_Pressed>:
int isButton3_Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3_Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3_Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000b0 	.word	0x200000b0

080001b8 <getKeyInput1>:
		return 1;
	}
	return 0;
}

void getKeyInput1(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
		keyReg0[0] = keyReg1[0];
 80001bc:	4b24      	ldr	r3, [pc, #144]	; (8000250 <getKeyInput1+0x98>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a24      	ldr	r2, [pc, #144]	; (8000254 <getKeyInput1+0x9c>)
 80001c2:	6013      	str	r3, [r2, #0]
		keyReg1[0] = keyReg2[0];
 80001c4:	4b24      	ldr	r3, [pc, #144]	; (8000258 <getKeyInput1+0xa0>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a21      	ldr	r2, [pc, #132]	; (8000250 <getKeyInput1+0x98>)
 80001ca:	6013      	str	r3, [r2, #0]
		keyReg2[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d0:	4822      	ldr	r0, [pc, #136]	; (800025c <getKeyInput1+0xa4>)
 80001d2:	f002 f809 	bl	80021e8 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <getKeyInput1+0xa0>)
 80001dc:	601a      	str	r2, [r3, #0]
		if((keyReg0[0] == keyReg1[0]) && (keyReg1[0] == keyReg2[0])){
 80001de:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <getKeyInput1+0x9c>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b1b      	ldr	r3, [pc, #108]	; (8000250 <getKeyInput1+0x98>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d130      	bne.n	800024c <getKeyInput1+0x94>
 80001ea:	4b19      	ldr	r3, [pc, #100]	; (8000250 <getKeyInput1+0x98>)
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <getKeyInput1+0xa0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d12a      	bne.n	800024c <getKeyInput1+0x94>
			if(keyReg3[0] != keyReg2[0]){
 80001f6:	4b1a      	ldr	r3, [pc, #104]	; (8000260 <getKeyInput1+0xa8>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b17      	ldr	r3, [pc, #92]	; (8000258 <getKeyInput1+0xa0>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d00e      	beq.n	8000220 <getKeyInput1+0x68>
				keyReg3[0] = keyReg2[0];
 8000202:	4b15      	ldr	r3, [pc, #84]	; (8000258 <getKeyInput1+0xa0>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a16      	ldr	r2, [pc, #88]	; (8000260 <getKeyInput1+0xa8>)
 8000208:	6013      	str	r3, [r2, #0]
				if(keyReg2[0] == PRESSED_STATE){
 800020a:	4b13      	ldr	r3, [pc, #76]	; (8000258 <getKeyInput1+0xa0>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d11c      	bne.n	800024c <getKeyInput1+0x94>
					button1_flag = 1;
 8000212:	4b14      	ldr	r3, [pc, #80]	; (8000264 <getKeyInput1+0xac>)
 8000214:	2201      	movs	r2, #1
 8000216:	601a      	str	r2, [r3, #0]
					timerForKeyPress = 100;
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <getKeyInput1+0xb0>)
 800021a:	2264      	movs	r2, #100	; 0x64
 800021c:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
					}
				}
			}
		}
}
 800021e:	e015      	b.n	800024c <getKeyInput1+0x94>
				if(keyReg2[0] == PRESSED_STATE){
 8000220:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <getKeyInput1+0xa0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d111      	bne.n	800024c <getKeyInput1+0x94>
					timerForKeyPress--;
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <getKeyInput1+0xb0>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3b01      	subs	r3, #1
 800022e:	4a0e      	ldr	r2, [pc, #56]	; (8000268 <getKeyInput1+0xb0>)
 8000230:	6013      	str	r3, [r2, #0]
					if(timerForKeyPress == 0){
 8000232:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <getKeyInput1+0xb0>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d108      	bne.n	800024c <getKeyInput1+0x94>
						button1_flag = 1;
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <getKeyInput1+0xac>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
						button1_long_flag = 1;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <getKeyInput1+0xb4>)
 8000242:	2201      	movs	r2, #1
 8000244:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <getKeyInput1+0xb0>)
 8000248:	2264      	movs	r2, #100	; 0x64
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	20000000 	.word	0x20000000
 8000258:	20000018 	.word	0x20000018
 800025c:	40010800 	.word	0x40010800
 8000260:	20000024 	.word	0x20000024
 8000264:	200000a8 	.word	0x200000a8
 8000268:	20000030 	.word	0x20000030
 800026c:	200000b4 	.word	0x200000b4

08000270 <getKeyInput2>:
void getKeyInput2(){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
		keyReg0[1] = keyReg1[1];
 8000274:	4b24      	ldr	r3, [pc, #144]	; (8000308 <getKeyInput2+0x98>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a24      	ldr	r2, [pc, #144]	; (800030c <getKeyInput2+0x9c>)
 800027a:	6053      	str	r3, [r2, #4]
		keyReg1[1] = keyReg2[1];
 800027c:	4b24      	ldr	r3, [pc, #144]	; (8000310 <getKeyInput2+0xa0>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	4a21      	ldr	r2, [pc, #132]	; (8000308 <getKeyInput2+0x98>)
 8000282:	6053      	str	r3, [r2, #4]
		keyReg2[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000288:	4822      	ldr	r0, [pc, #136]	; (8000314 <getKeyInput2+0xa4>)
 800028a:	f001 ffad 	bl	80021e8 <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <getKeyInput2+0xa0>)
 8000294:	605a      	str	r2, [r3, #4]
		if((keyReg0[1] == keyReg1[1]) && (keyReg1[1] == keyReg2[1])){
 8000296:	4b1d      	ldr	r3, [pc, #116]	; (800030c <getKeyInput2+0x9c>)
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <getKeyInput2+0x98>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d130      	bne.n	8000304 <getKeyInput2+0x94>
 80002a2:	4b19      	ldr	r3, [pc, #100]	; (8000308 <getKeyInput2+0x98>)
 80002a4:	685a      	ldr	r2, [r3, #4]
 80002a6:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <getKeyInput2+0xa0>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d12a      	bne.n	8000304 <getKeyInput2+0x94>
			if(keyReg3[1] != keyReg2[1]){
 80002ae:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <getKeyInput2+0xa8>)
 80002b0:	685a      	ldr	r2, [r3, #4]
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <getKeyInput2+0xa0>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d00e      	beq.n	80002d8 <getKeyInput2+0x68>
				keyReg3[1] = keyReg2[1];
 80002ba:	4b15      	ldr	r3, [pc, #84]	; (8000310 <getKeyInput2+0xa0>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	4a16      	ldr	r2, [pc, #88]	; (8000318 <getKeyInput2+0xa8>)
 80002c0:	6053      	str	r3, [r2, #4]
				if(keyReg2[1] == PRESSED_STATE){
 80002c2:	4b13      	ldr	r3, [pc, #76]	; (8000310 <getKeyInput2+0xa0>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d11c      	bne.n	8000304 <getKeyInput2+0x94>
					button2_flag = 1;
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <getKeyInput2+0xac>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	601a      	str	r2, [r3, #0]
					timerForKeyPress = 100;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <getKeyInput2+0xb0>)
 80002d2:	2264      	movs	r2, #100	; 0x64
 80002d4:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
					}
				}
			}
		}
}
 80002d6:	e015      	b.n	8000304 <getKeyInput2+0x94>
				if(keyReg2[1] == PRESSED_STATE){
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <getKeyInput2+0xa0>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d111      	bne.n	8000304 <getKeyInput2+0x94>
					timerForKeyPress--;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <getKeyInput2+0xb0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <getKeyInput2+0xb0>)
 80002e8:	6013      	str	r3, [r2, #0]
					if(timerForKeyPress == 0){
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <getKeyInput2+0xb0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d108      	bne.n	8000304 <getKeyInput2+0x94>
						button2_flag = 1;
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <getKeyInput2+0xac>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
						button2_long_flag = 1;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <getKeyInput2+0xb4>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <getKeyInput2+0xb0>)
 8000300:	2264      	movs	r2, #100	; 0x64
 8000302:	601a      	str	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000000c 	.word	0x2000000c
 800030c:	20000000 	.word	0x20000000
 8000310:	20000018 	.word	0x20000018
 8000314:	40010800 	.word	0x40010800
 8000318:	20000024 	.word	0x20000024
 800031c:	200000ac 	.word	0x200000ac
 8000320:	20000030 	.word	0x20000030
 8000324:	200000b8 	.word	0x200000b8

08000328 <getKeyInput3>:
void getKeyInput3(){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
		keyReg0[2] = keyReg1[2];
 800032c:	4b24      	ldr	r3, [pc, #144]	; (80003c0 <getKeyInput3+0x98>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	4a24      	ldr	r2, [pc, #144]	; (80003c4 <getKeyInput3+0x9c>)
 8000332:	6093      	str	r3, [r2, #8]
		keyReg1[2] = keyReg2[2];
 8000334:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <getKeyInput3+0xa0>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a21      	ldr	r2, [pc, #132]	; (80003c0 <getKeyInput3+0x98>)
 800033a:	6093      	str	r3, [r2, #8]
		keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 800033c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000340:	4822      	ldr	r0, [pc, #136]	; (80003cc <getKeyInput3+0xa4>)
 8000342:	f001 ff51 	bl	80021e8 <HAL_GPIO_ReadPin>
 8000346:	4603      	mov	r3, r0
 8000348:	461a      	mov	r2, r3
 800034a:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <getKeyInput3+0xa0>)
 800034c:	609a      	str	r2, [r3, #8]
		if((keyReg0[2] == keyReg1[2]) && (keyReg1[2] == keyReg2[2])){
 800034e:	4b1d      	ldr	r3, [pc, #116]	; (80003c4 <getKeyInput3+0x9c>)
 8000350:	689a      	ldr	r2, [r3, #8]
 8000352:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <getKeyInput3+0x98>)
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	429a      	cmp	r2, r3
 8000358:	d130      	bne.n	80003bc <getKeyInput3+0x94>
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <getKeyInput3+0x98>)
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <getKeyInput3+0xa0>)
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	429a      	cmp	r2, r3
 8000364:	d12a      	bne.n	80003bc <getKeyInput3+0x94>
			if(keyReg3[2] != keyReg2[2]){
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <getKeyInput3+0xa8>)
 8000368:	689a      	ldr	r2, [r3, #8]
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <getKeyInput3+0xa0>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	429a      	cmp	r2, r3
 8000370:	d00e      	beq.n	8000390 <getKeyInput3+0x68>
				keyReg3[2] = keyReg2[2];
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <getKeyInput3+0xa0>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	4a16      	ldr	r2, [pc, #88]	; (80003d0 <getKeyInput3+0xa8>)
 8000378:	6093      	str	r3, [r2, #8]
				if(keyReg2[2] == PRESSED_STATE){
 800037a:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <getKeyInput3+0xa0>)
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d11c      	bne.n	80003bc <getKeyInput3+0x94>
					button3_flag = 1;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <getKeyInput3+0xac>)
 8000384:	2201      	movs	r2, #1
 8000386:	601a      	str	r2, [r3, #0]
					timerForKeyPress = 100;
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <getKeyInput3+0xb0>)
 800038a:	2264      	movs	r2, #100	; 0x64
 800038c:	601a      	str	r2, [r3, #0]
					}
				}
			}

		}
}
 800038e:	e015      	b.n	80003bc <getKeyInput3+0x94>
				if(keyReg2[2] == PRESSED_STATE){
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <getKeyInput3+0xa0>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d111      	bne.n	80003bc <getKeyInput3+0x94>
					timerForKeyPress--;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <getKeyInput3+0xb0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3b01      	subs	r3, #1
 800039e:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <getKeyInput3+0xb0>)
 80003a0:	6013      	str	r3, [r2, #0]
					if(timerForKeyPress == 0){
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <getKeyInput3+0xb0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d108      	bne.n	80003bc <getKeyInput3+0x94>
						button3_flag = 1;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <getKeyInput3+0xac>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
						button3_long_flag = 1;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <getKeyInput3+0xb4>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <getKeyInput3+0xb0>)
 80003b8:	2264      	movs	r2, #100	; 0x64
 80003ba:	601a      	str	r2, [r3, #0]
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000000c 	.word	0x2000000c
 80003c4:	20000000 	.word	0x20000000
 80003c8:	20000018 	.word	0x20000018
 80003cc:	40010800 	.word	0x40010800
 80003d0:	20000024 	.word	0x20000024
 80003d4:	200000b0 	.word	0x200000b0
 80003d8:	20000030 	.word	0x20000030
 80003dc:	200000bc 	.word	0x200000bc

080003e0 <display7SEG>:
#include "display7SEG.h"

void display7SEG(int num){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2101      	movs	r1, #1
 80003ec:	489f      	ldr	r0, [pc, #636]	; (800066c <display7SEG+0x28c>)
 80003ee:	f001 ff12 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2102      	movs	r1, #2
 80003f6:	489d      	ldr	r0, [pc, #628]	; (800066c <display7SEG+0x28c>)
 80003f8:	f001 ff0d 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2104      	movs	r1, #4
 8000400:	489a      	ldr	r0, [pc, #616]	; (800066c <display7SEG+0x28c>)
 8000402:	f001 ff08 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2108      	movs	r1, #8
 800040a:	4898      	ldr	r0, [pc, #608]	; (800066c <display7SEG+0x28c>)
 800040c:	f001 ff03 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2110      	movs	r1, #16
 8000414:	4895      	ldr	r0, [pc, #596]	; (800066c <display7SEG+0x28c>)
 8000416:	f001 fefe 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2120      	movs	r1, #32
 800041e:	4893      	ldr	r0, [pc, #588]	; (800066c <display7SEG+0x28c>)
 8000420:	f001 fef9 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2140      	movs	r1, #64	; 0x40
 8000428:	4890      	ldr	r0, [pc, #576]	; (800066c <display7SEG+0x28c>)
 800042a:	f001 fef4 	bl	8002216 <HAL_GPIO_WritePin>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2b09      	cmp	r3, #9
 8000432:	f200 8116 	bhi.w	8000662 <display7SEG+0x282>
 8000436:	a201      	add	r2, pc, #4	; (adr r2, 800043c <display7SEG+0x5c>)
 8000438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043c:	08000465 	.word	0x08000465
 8000440:	080004a3 	.word	0x080004a3
 8000444:	080004b9 	.word	0x080004b9
 8000448:	080004ed 	.word	0x080004ed
 800044c:	08000521 	.word	0x08000521
 8000450:	0800054b 	.word	0x0800054b
 8000454:	0800057f 	.word	0x0800057f
 8000458:	080005bd 	.word	0x080005bd
 800045c:	080005dd 	.word	0x080005dd
 8000460:	08000625 	.word	0x08000625
	switch(num){
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2101      	movs	r1, #1
 8000468:	4880      	ldr	r0, [pc, #512]	; (800066c <display7SEG+0x28c>)
 800046a:	f001 fed4 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2102      	movs	r1, #2
 8000472:	487e      	ldr	r0, [pc, #504]	; (800066c <display7SEG+0x28c>)
 8000474:	f001 fecf 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2104      	movs	r1, #4
 800047c:	487b      	ldr	r0, [pc, #492]	; (800066c <display7SEG+0x28c>)
 800047e:	f001 feca 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2108      	movs	r1, #8
 8000486:	4879      	ldr	r0, [pc, #484]	; (800066c <display7SEG+0x28c>)
 8000488:	f001 fec5 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	4876      	ldr	r0, [pc, #472]	; (800066c <display7SEG+0x28c>)
 8000492:	f001 fec0 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2120      	movs	r1, #32
 800049a:	4874      	ldr	r0, [pc, #464]	; (800066c <display7SEG+0x28c>)
 800049c:	f001 febb 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 80004a0:	e0e0      	b.n	8000664 <display7SEG+0x284>
		case 1:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2102      	movs	r1, #2
 80004a6:	4871      	ldr	r0, [pc, #452]	; (800066c <display7SEG+0x28c>)
 80004a8:	f001 feb5 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2104      	movs	r1, #4
 80004b0:	486e      	ldr	r0, [pc, #440]	; (800066c <display7SEG+0x28c>)
 80004b2:	f001 feb0 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 80004b6:	e0d5      	b.n	8000664 <display7SEG+0x284>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2101      	movs	r1, #1
 80004bc:	486b      	ldr	r0, [pc, #428]	; (800066c <display7SEG+0x28c>)
 80004be:	f001 feaa 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2102      	movs	r1, #2
 80004c6:	4869      	ldr	r0, [pc, #420]	; (800066c <display7SEG+0x28c>)
 80004c8:	f001 fea5 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2108      	movs	r1, #8
 80004d0:	4866      	ldr	r0, [pc, #408]	; (800066c <display7SEG+0x28c>)
 80004d2:	f001 fea0 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2110      	movs	r1, #16
 80004da:	4864      	ldr	r0, [pc, #400]	; (800066c <display7SEG+0x28c>)
 80004dc:	f001 fe9b 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2140      	movs	r1, #64	; 0x40
 80004e4:	4861      	ldr	r0, [pc, #388]	; (800066c <display7SEG+0x28c>)
 80004e6:	f001 fe96 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 80004ea:	e0bb      	b.n	8000664 <display7SEG+0x284>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2101      	movs	r1, #1
 80004f0:	485e      	ldr	r0, [pc, #376]	; (800066c <display7SEG+0x28c>)
 80004f2:	f001 fe90 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2102      	movs	r1, #2
 80004fa:	485c      	ldr	r0, [pc, #368]	; (800066c <display7SEG+0x28c>)
 80004fc:	f001 fe8b 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2104      	movs	r1, #4
 8000504:	4859      	ldr	r0, [pc, #356]	; (800066c <display7SEG+0x28c>)
 8000506:	f001 fe86 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2108      	movs	r1, #8
 800050e:	4857      	ldr	r0, [pc, #348]	; (800066c <display7SEG+0x28c>)
 8000510:	f001 fe81 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2140      	movs	r1, #64	; 0x40
 8000518:	4854      	ldr	r0, [pc, #336]	; (800066c <display7SEG+0x28c>)
 800051a:	f001 fe7c 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 800051e:	e0a1      	b.n	8000664 <display7SEG+0x284>
		case 4:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2102      	movs	r1, #2
 8000524:	4851      	ldr	r0, [pc, #324]	; (800066c <display7SEG+0x28c>)
 8000526:	f001 fe76 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2104      	movs	r1, #4
 800052e:	484f      	ldr	r0, [pc, #316]	; (800066c <display7SEG+0x28c>)
 8000530:	f001 fe71 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2120      	movs	r1, #32
 8000538:	484c      	ldr	r0, [pc, #304]	; (800066c <display7SEG+0x28c>)
 800053a:	f001 fe6c 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	484a      	ldr	r0, [pc, #296]	; (800066c <display7SEG+0x28c>)
 8000544:	f001 fe67 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 8000548:	e08c      	b.n	8000664 <display7SEG+0x284>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2101      	movs	r1, #1
 800054e:	4847      	ldr	r0, [pc, #284]	; (800066c <display7SEG+0x28c>)
 8000550:	f001 fe61 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2104      	movs	r1, #4
 8000558:	4844      	ldr	r0, [pc, #272]	; (800066c <display7SEG+0x28c>)
 800055a:	f001 fe5c 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2108      	movs	r1, #8
 8000562:	4842      	ldr	r0, [pc, #264]	; (800066c <display7SEG+0x28c>)
 8000564:	f001 fe57 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	483f      	ldr	r0, [pc, #252]	; (800066c <display7SEG+0x28c>)
 800056e:	f001 fe52 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	483d      	ldr	r0, [pc, #244]	; (800066c <display7SEG+0x28c>)
 8000578:	f001 fe4d 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 800057c:	e072      	b.n	8000664 <display7SEG+0x284>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2101      	movs	r1, #1
 8000582:	483a      	ldr	r0, [pc, #232]	; (800066c <display7SEG+0x28c>)
 8000584:	f001 fe47 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2104      	movs	r1, #4
 800058c:	4837      	ldr	r0, [pc, #220]	; (800066c <display7SEG+0x28c>)
 800058e:	f001 fe42 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2108      	movs	r1, #8
 8000596:	4835      	ldr	r0, [pc, #212]	; (800066c <display7SEG+0x28c>)
 8000598:	f001 fe3d 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2110      	movs	r1, #16
 80005a0:	4832      	ldr	r0, [pc, #200]	; (800066c <display7SEG+0x28c>)
 80005a2:	f001 fe38 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2120      	movs	r1, #32
 80005aa:	4830      	ldr	r0, [pc, #192]	; (800066c <display7SEG+0x28c>)
 80005ac:	f001 fe33 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2140      	movs	r1, #64	; 0x40
 80005b4:	482d      	ldr	r0, [pc, #180]	; (800066c <display7SEG+0x28c>)
 80005b6:	f001 fe2e 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 80005ba:	e053      	b.n	8000664 <display7SEG+0x284>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	482a      	ldr	r0, [pc, #168]	; (800066c <display7SEG+0x28c>)
 80005c2:	f001 fe28 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2102      	movs	r1, #2
 80005ca:	4828      	ldr	r0, [pc, #160]	; (800066c <display7SEG+0x28c>)
 80005cc:	f001 fe23 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2104      	movs	r1, #4
 80005d4:	4825      	ldr	r0, [pc, #148]	; (800066c <display7SEG+0x28c>)
 80005d6:	f001 fe1e 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 80005da:	e043      	b.n	8000664 <display7SEG+0x284>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	4822      	ldr	r0, [pc, #136]	; (800066c <display7SEG+0x28c>)
 80005e2:	f001 fe18 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2102      	movs	r1, #2
 80005ea:	4820      	ldr	r0, [pc, #128]	; (800066c <display7SEG+0x28c>)
 80005ec:	f001 fe13 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2104      	movs	r1, #4
 80005f4:	481d      	ldr	r0, [pc, #116]	; (800066c <display7SEG+0x28c>)
 80005f6:	f001 fe0e 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2108      	movs	r1, #8
 80005fe:	481b      	ldr	r0, [pc, #108]	; (800066c <display7SEG+0x28c>)
 8000600:	f001 fe09 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2110      	movs	r1, #16
 8000608:	4818      	ldr	r0, [pc, #96]	; (800066c <display7SEG+0x28c>)
 800060a:	f001 fe04 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2120      	movs	r1, #32
 8000612:	4816      	ldr	r0, [pc, #88]	; (800066c <display7SEG+0x28c>)
 8000614:	f001 fdff 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4813      	ldr	r0, [pc, #76]	; (800066c <display7SEG+0x28c>)
 800061e:	f001 fdfa 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 8000622:	e01f      	b.n	8000664 <display7SEG+0x284>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2101      	movs	r1, #1
 8000628:	4810      	ldr	r0, [pc, #64]	; (800066c <display7SEG+0x28c>)
 800062a:	f001 fdf4 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2102      	movs	r1, #2
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <display7SEG+0x28c>)
 8000634:	f001 fdef 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2104      	movs	r1, #4
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <display7SEG+0x28c>)
 800063e:	f001 fdea 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4809      	ldr	r0, [pc, #36]	; (800066c <display7SEG+0x28c>)
 8000648:	f001 fde5 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	4806      	ldr	r0, [pc, #24]	; (800066c <display7SEG+0x28c>)
 8000652:	f001 fde0 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <display7SEG+0x28c>)
 800065c:	f001 fddb 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 8000660:	e000      	b.n	8000664 <display7SEG+0x284>
		default:
			break;
 8000662:	bf00      	nop
	}
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40010c00 	.word	0x40010c00

08000670 <display7SEG_2>:

void display7SEG_2(int num){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(aa_GPIO_Port, aa_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067e:	48bc      	ldr	r0, [pc, #752]	; (8000970 <display7SEG_2+0x300>)
 8000680:	f001 fdc9 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(bb_GPIO_Port, bb_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068a:	48b9      	ldr	r0, [pc, #740]	; (8000970 <display7SEG_2+0x300>)
 800068c:	f001 fdc3 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(cc_GPIO_Port, cc_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000696:	48b6      	ldr	r0, [pc, #728]	; (8000970 <display7SEG_2+0x300>)
 8000698:	f001 fdbd 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dd_GPIO_Port, dd_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a2:	48b3      	ldr	r0, [pc, #716]	; (8000970 <display7SEG_2+0x300>)
 80006a4:	f001 fdb7 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ee_GPIO_Port, ee_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ae:	48b0      	ldr	r0, [pc, #704]	; (8000970 <display7SEG_2+0x300>)
 80006b0:	f001 fdb1 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ff_GPIO_Port, ff_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ba:	48ae      	ldr	r0, [pc, #696]	; (8000974 <display7SEG_2+0x304>)
 80006bc:	f001 fdab 	bl	8002216 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gg_GPIO_Port, gg_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c6:	48ab      	ldr	r0, [pc, #684]	; (8000974 <display7SEG_2+0x304>)
 80006c8:	f001 fda5 	bl	8002216 <HAL_GPIO_WritePin>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b09      	cmp	r3, #9
 80006d0:	f200 8148 	bhi.w	8000964 <display7SEG_2+0x2f4>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <display7SEG_2+0x6c>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	08000705 	.word	0x08000705
 80006e0:	0800074f 	.word	0x0800074f
 80006e4:	08000769 	.word	0x08000769
 80006e8:	080007a7 	.word	0x080007a7
 80006ec:	080007e5 	.word	0x080007e5
 80006f0:	08000817 	.word	0x08000817
 80006f4:	08000855 	.word	0x08000855
 80006f8:	0800089f 	.word	0x0800089f
 80006fc:	080008c5 	.word	0x080008c5
 8000700:	0800091b 	.word	0x0800091b
	switch(num){
		case 0:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070a:	4899      	ldr	r0, [pc, #612]	; (8000970 <display7SEG_2+0x300>)
 800070c:	f001 fd83 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000716:	4896      	ldr	r0, [pc, #600]	; (8000970 <display7SEG_2+0x300>)
 8000718:	f001 fd7d 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000722:	4893      	ldr	r0, [pc, #588]	; (8000970 <display7SEG_2+0x300>)
 8000724:	f001 fd77 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072e:	4890      	ldr	r0, [pc, #576]	; (8000970 <display7SEG_2+0x300>)
 8000730:	f001 fd71 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073a:	488d      	ldr	r0, [pc, #564]	; (8000970 <display7SEG_2+0x300>)
 800073c:	f001 fd6b 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000746:	488b      	ldr	r0, [pc, #556]	; (8000974 <display7SEG_2+0x304>)
 8000748:	f001 fd65 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 800074c:	e10b      	b.n	8000966 <display7SEG_2+0x2f6>
		case 1:
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000754:	4886      	ldr	r0, [pc, #536]	; (8000970 <display7SEG_2+0x300>)
 8000756:	f001 fd5e 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000760:	4883      	ldr	r0, [pc, #524]	; (8000970 <display7SEG_2+0x300>)
 8000762:	f001 fd58 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 8000766:	e0fe      	b.n	8000966 <display7SEG_2+0x2f6>
		case 2:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076e:	4880      	ldr	r0, [pc, #512]	; (8000970 <display7SEG_2+0x300>)
 8000770:	f001 fd51 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077a:	487d      	ldr	r0, [pc, #500]	; (8000970 <display7SEG_2+0x300>)
 800077c:	f001 fd4b 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000786:	487a      	ldr	r0, [pc, #488]	; (8000970 <display7SEG_2+0x300>)
 8000788:	f001 fd45 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000792:	4877      	ldr	r0, [pc, #476]	; (8000970 <display7SEG_2+0x300>)
 8000794:	f001 fd3f 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	4875      	ldr	r0, [pc, #468]	; (8000974 <display7SEG_2+0x304>)
 80007a0:	f001 fd39 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 80007a4:	e0df      	b.n	8000966 <display7SEG_2+0x2f6>
		case 3:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4870      	ldr	r0, [pc, #448]	; (8000970 <display7SEG_2+0x300>)
 80007ae:	f001 fd32 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b8:	486d      	ldr	r0, [pc, #436]	; (8000970 <display7SEG_2+0x300>)
 80007ba:	f001 fd2c 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c4:	486a      	ldr	r0, [pc, #424]	; (8000970 <display7SEG_2+0x300>)
 80007c6:	f001 fd26 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d0:	4867      	ldr	r0, [pc, #412]	; (8000970 <display7SEG_2+0x300>)
 80007d2:	f001 fd20 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	4865      	ldr	r0, [pc, #404]	; (8000974 <display7SEG_2+0x304>)
 80007de:	f001 fd1a 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 80007e2:	e0c0      	b.n	8000966 <display7SEG_2+0x2f6>
		case 4:
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ea:	4861      	ldr	r0, [pc, #388]	; (8000970 <display7SEG_2+0x300>)
 80007ec:	f001 fd13 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	485e      	ldr	r0, [pc, #376]	; (8000970 <display7SEG_2+0x300>)
 80007f8:	f001 fd0d 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000802:	485c      	ldr	r0, [pc, #368]	; (8000974 <display7SEG_2+0x304>)
 8000804:	f001 fd07 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	4859      	ldr	r0, [pc, #356]	; (8000974 <display7SEG_2+0x304>)
 8000810:	f001 fd01 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 8000814:	e0a7      	b.n	8000966 <display7SEG_2+0x2f6>
		case 5:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081c:	4854      	ldr	r0, [pc, #336]	; (8000970 <display7SEG_2+0x300>)
 800081e:	f001 fcfa 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4851      	ldr	r0, [pc, #324]	; (8000970 <display7SEG_2+0x300>)
 800082a:	f001 fcf4 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000834:	484e      	ldr	r0, [pc, #312]	; (8000970 <display7SEG_2+0x300>)
 8000836:	f001 fcee 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000840:	484c      	ldr	r0, [pc, #304]	; (8000974 <display7SEG_2+0x304>)
 8000842:	f001 fce8 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084c:	4849      	ldr	r0, [pc, #292]	; (8000974 <display7SEG_2+0x304>)
 800084e:	f001 fce2 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 8000852:	e088      	b.n	8000966 <display7SEG_2+0x2f6>
		case 6:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085a:	4845      	ldr	r0, [pc, #276]	; (8000970 <display7SEG_2+0x300>)
 800085c:	f001 fcdb 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	4842      	ldr	r0, [pc, #264]	; (8000970 <display7SEG_2+0x300>)
 8000868:	f001 fcd5 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	483f      	ldr	r0, [pc, #252]	; (8000970 <display7SEG_2+0x300>)
 8000874:	f001 fccf 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087e:	483c      	ldr	r0, [pc, #240]	; (8000970 <display7SEG_2+0x300>)
 8000880:	f001 fcc9 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	483a      	ldr	r0, [pc, #232]	; (8000974 <display7SEG_2+0x304>)
 800088c:	f001 fcc3 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000896:	4837      	ldr	r0, [pc, #220]	; (8000974 <display7SEG_2+0x304>)
 8000898:	f001 fcbd 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 800089c:	e063      	b.n	8000966 <display7SEG_2+0x2f6>
		case 7:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a4:	4832      	ldr	r0, [pc, #200]	; (8000970 <display7SEG_2+0x300>)
 80008a6:	f001 fcb6 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b0:	482f      	ldr	r0, [pc, #188]	; (8000970 <display7SEG_2+0x300>)
 80008b2:	f001 fcb0 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	482c      	ldr	r0, [pc, #176]	; (8000970 <display7SEG_2+0x300>)
 80008be:	f001 fcaa 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 80008c2:	e050      	b.n	8000966 <display7SEG_2+0x2f6>
		case 8:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ca:	4829      	ldr	r0, [pc, #164]	; (8000970 <display7SEG_2+0x300>)
 80008cc:	f001 fca3 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d6:	4826      	ldr	r0, [pc, #152]	; (8000970 <display7SEG_2+0x300>)
 80008d8:	f001 fc9d 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	4823      	ldr	r0, [pc, #140]	; (8000970 <display7SEG_2+0x300>)
 80008e4:	f001 fc97 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ee:	4820      	ldr	r0, [pc, #128]	; (8000970 <display7SEG_2+0x300>)
 80008f0:	f001 fc91 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ee_GPIO_Port,ee_Pin,GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fa:	481d      	ldr	r0, [pc, #116]	; (8000970 <display7SEG_2+0x300>)
 80008fc:	f001 fc8b 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000906:	481b      	ldr	r0, [pc, #108]	; (8000974 <display7SEG_2+0x304>)
 8000908:	f001 fc85 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	4818      	ldr	r0, [pc, #96]	; (8000974 <display7SEG_2+0x304>)
 8000914:	f001 fc7f 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 8000918:	e025      	b.n	8000966 <display7SEG_2+0x2f6>
		case 9:
			HAL_GPIO_WritePin(aa_GPIO_Port,aa_Pin,GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000920:	4813      	ldr	r0, [pc, #76]	; (8000970 <display7SEG_2+0x300>)
 8000922:	f001 fc78 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bb_GPIO_Port,bb_Pin,GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092c:	4810      	ldr	r0, [pc, #64]	; (8000970 <display7SEG_2+0x300>)
 800092e:	f001 fc72 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(cc_GPIO_Port,cc_Pin,GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <display7SEG_2+0x300>)
 800093a:	f001 fc6c 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dd_GPIO_Port,dd_Pin,GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000944:	480a      	ldr	r0, [pc, #40]	; (8000970 <display7SEG_2+0x300>)
 8000946:	f001 fc66 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ff_GPIO_Port,ff_Pin,GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <display7SEG_2+0x304>)
 8000952:	f001 fc60 	bl	8002216 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gg_GPIO_Port,gg_Pin,GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <display7SEG_2+0x304>)
 800095e:	f001 fc5a 	bl	8002216 <HAL_GPIO_WritePin>
			break;
 8000962:	e000      	b.n	8000966 <display7SEG_2+0x2f6>
		default:

			break;
 8000964:	bf00      	nop
	}
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00

08000978 <update7SEG>:
//
//int value1_buffer[3] = {0,0,0};
//int value2_buffer[3] = {0,0,0};


void update7SEG(int index_lane1){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	switch(index_lane1){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <update7SEG+0x16>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d012      	beq.n	80009b2 <update7SEG+0x3a>
			  display7SEG(led_buffer_lane1[1]);
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
			  break;
		}
}
 800098c:	e023      	b.n	80009d6 <update7SEG+0x5e>
			  display7SEG(led_buffer_lane1[0]);
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <update7SEG+0x68>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fd24 	bl	80003e0 <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <update7SEG+0x6c>)
 80009a0:	f001 fc39 	bl	8002216 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <update7SEG+0x6c>)
 80009ac:	f001 fc33 	bl	8002216 <HAL_GPIO_WritePin>
			  break;
 80009b0:	e011      	b.n	80009d6 <update7SEG+0x5e>
			  display7SEG(led_buffer_lane1[1]);
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <update7SEG+0x68>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fd12 	bl	80003e0 <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <update7SEG+0x6c>)
 80009c4:	f001 fc27 	bl	8002216 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <update7SEG+0x6c>)
 80009d0:	f001 fc21 	bl	8002216 <HAL_GPIO_WritePin>
			  break;
 80009d4:	bf00      	nop
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000c8 	.word	0x200000c8
 80009e4:	40010c00 	.word	0x40010c00

080009e8 <update7SEG_lane2>:

void update7SEG_lane2(int index_lane2){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	switch(index_lane2){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <update7SEG_lane2+0x16>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d012      	beq.n	8000a22 <update7SEG_lane2+0x3a>
			  display7SEG_2(led_buffer_lane2[1]);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
			  break;
		}
}
 80009fc:	e023      	b.n	8000a46 <update7SEG_lane2+0x5e>
			  display7SEG_2(led_buffer_lane2[0]);
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <update7SEG_lane2+0x68>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fe34 	bl	8000670 <display7SEG_2>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0e:	4811      	ldr	r0, [pc, #68]	; (8000a54 <update7SEG_lane2+0x6c>)
 8000a10:	f001 fc01 	bl	8002216 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <update7SEG_lane2+0x6c>)
 8000a1c:	f001 fbfb 	bl	8002216 <HAL_GPIO_WritePin>
			  break;
 8000a20:	e011      	b.n	8000a46 <update7SEG_lane2+0x5e>
			  display7SEG_2(led_buffer_lane2[1]);
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <update7SEG_lane2+0x68>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fe22 	bl	8000670 <display7SEG_2>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a32:	4808      	ldr	r0, [pc, #32]	; (8000a54 <update7SEG_lane2+0x6c>)
 8000a34:	f001 fbef 	bl	8002216 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <update7SEG_lane2+0x6c>)
 8000a40:	f001 fbe9 	bl	8002216 <HAL_GPIO_WritePin>
			  break;
 8000a44:	bf00      	nop
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000d0 	.word	0x200000d0
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <fsm_auto_run_lane1>:
#include "fsm_auto.h"
#include "traffic_2_lane.h"
int status_lane1 = INIT_1;
int status_lane2 = INIT_2;

void fsm_auto_run_lane1(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	switch (status_lane1) {
 8000a5c:	4b8b      	ldr	r3, [pc, #556]	; (8000c8c <fsm_auto_run_lane1+0x234>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3b0a      	subs	r3, #10
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	f200 8108 	bhi.w	8000c78 <fsm_auto_run_lane1+0x220>
 8000a68:	a201      	add	r2, pc, #4	; (adr r2, 8000a70 <fsm_auto_run_lane1+0x18>)
 8000a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6e:	bf00      	nop
 8000a70:	08000a81 	.word	0x08000a81
 8000a74:	08000aaf 	.word	0x08000aaf
 8000a78:	08000b49 	.word	0x08000b49
 8000a7c:	08000be1 	.word	0x08000be1
		case INIT_1:
			status_lane1 = RED_1;
 8000a80:	4b82      	ldr	r3, [pc, #520]	; (8000c8c <fsm_auto_run_lane1+0x234>)
 8000a82:	220b      	movs	r2, #11
 8000a84:	601a      	str	r2, [r3, #0]
			value1_buffer[0] = red1TimeMAX*1000;
 8000a86:	4b82      	ldr	r3, [pc, #520]	; (8000c90 <fsm_auto_run_lane1+0x238>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a8e:	fb02 f303 	mul.w	r3, r2, r3
 8000a92:	4a80      	ldr	r2, [pc, #512]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000a94:	6013      	str	r3, [r2, #0]
			setTimer(1, value1_buffer[0]);
 8000a96:	4b7f      	ldr	r3, [pc, #508]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 feb9 	bl	8001814 <setTimer>
			setTimer(3, 1000);
 8000aa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	f000 feb4 	bl	8001814 <setTimer>
			break;
 8000aac:	e0eb      	b.n	8000c86 <fsm_auto_run_lane1+0x22e>
		case RED_1:
			red_1();
 8000aae:	f000 ffa7 	bl	8001a00 <red_1>
			led_buffer_lane1[0] = red1_time/10;
 8000ab2:	4b79      	ldr	r3, [pc, #484]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a79      	ldr	r2, [pc, #484]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8000abc:	1092      	asrs	r2, r2, #2
 8000abe:	17db      	asrs	r3, r3, #31
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	4a77      	ldr	r2, [pc, #476]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000ac4:	6013      	str	r3, [r2, #0]
			led_buffer_lane1[1] = red1_time%10;
 8000ac6:	4b74      	ldr	r3, [pc, #464]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000ac8:	6819      	ldr	r1, [r3, #0]
 8000aca:	4b74      	ldr	r3, [pc, #464]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000acc:	fb83 2301 	smull	r2, r3, r3, r1
 8000ad0:	109a      	asrs	r2, r3, #2
 8000ad2:	17cb      	asrs	r3, r1, #31
 8000ad4:	1ad2      	subs	r2, r2, r3
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	1aca      	subs	r2, r1, r3
 8000ae0:	4b6f      	ldr	r3, [pc, #444]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000ae2:	605a      	str	r2, [r3, #4]
			if(timer_flag[3] == 1){
 8000ae4:	4b6f      	ldr	r3, [pc, #444]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d111      	bne.n	8000b10 <fsm_auto_run_lane1+0xb8>
				red1_time--;
 8000aec:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	4a69      	ldr	r2, [pc, #420]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000af4:	6013      	str	r3, [r2, #0]
				if(red1_time==0){
 8000af6:	4b68      	ldr	r3, [pc, #416]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d103      	bne.n	8000b06 <fsm_auto_run_lane1+0xae>
					red1_time = red1TimeMAX;
 8000afe:	4b64      	ldr	r3, [pc, #400]	; (8000c90 <fsm_auto_run_lane1+0x238>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a65      	ldr	r2, [pc, #404]	; (8000c98 <fsm_auto_run_lane1+0x240>)
 8000b04:	6013      	str	r3, [r2, #0]
				}
				setTimer(3, 1000);
 8000b06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b0a:	2003      	movs	r0, #3
 8000b0c:	f000 fe82 	bl	8001814 <setTimer>
			}
			if(timer_flag[1] == 1){
 8000b10:	4b64      	ldr	r3, [pc, #400]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	f040 80b1 	bne.w	8000c7c <fsm_auto_run_lane1+0x224>
				status_lane1 = GREEN_1;
 8000b1a:	4b5c      	ldr	r3, [pc, #368]	; (8000c8c <fsm_auto_run_lane1+0x234>)
 8000b1c:	220c      	movs	r2, #12
 8000b1e:	601a      	str	r2, [r3, #0]
				value1_buffer[1] = green1TimeMAX*1000;
 8000b20:	4b61      	ldr	r3, [pc, #388]	; (8000ca8 <fsm_auto_run_lane1+0x250>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b28:	fb02 f303 	mul.w	r3, r2, r3
 8000b2c:	4a59      	ldr	r2, [pc, #356]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000b2e:	6053      	str	r3, [r2, #4]
				setTimer(1, value1_buffer[1]);
 8000b30:	4b58      	ldr	r3, [pc, #352]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	4619      	mov	r1, r3
 8000b36:	2001      	movs	r0, #1
 8000b38:	f000 fe6c 	bl	8001814 <setTimer>
				setTimer(3, 1000);
 8000b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 fe67 	bl	8001814 <setTimer>
			}
			break;
 8000b46:	e099      	b.n	8000c7c <fsm_auto_run_lane1+0x224>
		case GREEN_1:
			green_1();
 8000b48:	f000 ff70 	bl	8001a2c <green_1>
			led_buffer_lane1[0] = green1_time/10;
 8000b4c:	4b57      	ldr	r3, [pc, #348]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a52      	ldr	r2, [pc, #328]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000b52:	fb82 1203 	smull	r1, r2, r2, r3
 8000b56:	1092      	asrs	r2, r2, #2
 8000b58:	17db      	asrs	r3, r3, #31
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	4a50      	ldr	r2, [pc, #320]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000b5e:	6013      	str	r3, [r2, #0]
			led_buffer_lane1[1] = green1_time%10;
 8000b60:	4b52      	ldr	r3, [pc, #328]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b62:	6819      	ldr	r1, [r3, #0]
 8000b64:	4b4d      	ldr	r3, [pc, #308]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000b66:	fb83 2301 	smull	r2, r3, r3, r1
 8000b6a:	109a      	asrs	r2, r3, #2
 8000b6c:	17cb      	asrs	r3, r1, #31
 8000b6e:	1ad2      	subs	r2, r2, r3
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	1aca      	subs	r2, r1, r3
 8000b7a:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000b7c:	605a      	str	r2, [r3, #4]
			if(timer_flag[3] == 1){
 8000b7e:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d111      	bne.n	8000baa <fsm_auto_run_lane1+0x152>
				green1_time--;
 8000b86:	4b49      	ldr	r3, [pc, #292]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	4a47      	ldr	r2, [pc, #284]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b8e:	6013      	str	r3, [r2, #0]
				if(green1_time == 0){
 8000b90:	4b46      	ldr	r3, [pc, #280]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d103      	bne.n	8000ba0 <fsm_auto_run_lane1+0x148>
					green1_time = green1TimeMAX;
 8000b98:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <fsm_auto_run_lane1+0x250>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a43      	ldr	r2, [pc, #268]	; (8000cac <fsm_auto_run_lane1+0x254>)
 8000b9e:	6013      	str	r3, [r2, #0]
				}
				setTimer(3, 1000);
 8000ba0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 fe35 	bl	8001814 <setTimer>
			}
			if(timer_flag[1] == 1){
 8000baa:	4b3e      	ldr	r3, [pc, #248]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d166      	bne.n	8000c80 <fsm_auto_run_lane1+0x228>
				status_lane1 = YELLOW_1;
 8000bb2:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <fsm_auto_run_lane1+0x234>)
 8000bb4:	220d      	movs	r2, #13
 8000bb6:	601a      	str	r2, [r3, #0]
				value1_buffer[2] = yellow1TimeMAX*1000;
 8000bb8:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <fsm_auto_run_lane1+0x258>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc0:	fb02 f303 	mul.w	r3, r2, r3
 8000bc4:	4a33      	ldr	r2, [pc, #204]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000bc6:	6093      	str	r3, [r2, #8]
				setTimer(1, value1_buffer[2]);
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fe20 	bl	8001814 <setTimer>
				setTimer(3, 1000);
 8000bd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 fe1b 	bl	8001814 <setTimer>
			}
			break;
 8000bde:	e04f      	b.n	8000c80 <fsm_auto_run_lane1+0x228>
		case YELLOW_1:
			yellow_1();
 8000be0:	f000 ff3a 	bl	8001a58 <yellow_1>
			led_buffer_lane1[0] = yellow1_time/10;
 8000be4:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a2c      	ldr	r2, [pc, #176]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000bea:	fb82 1203 	smull	r1, r2, r2, r3
 8000bee:	1092      	asrs	r2, r2, #2
 8000bf0:	17db      	asrs	r3, r3, #31
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	4a2a      	ldr	r2, [pc, #168]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000bf6:	6013      	str	r3, [r2, #0]
			led_buffer_lane1[1] = yellow1_time%10;
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <fsm_auto_run_lane1+0x244>)
 8000bfe:	fb83 2301 	smull	r2, r3, r3, r1
 8000c02:	109a      	asrs	r2, r3, #2
 8000c04:	17cb      	asrs	r3, r1, #31
 8000c06:	1ad2      	subs	r2, r2, r3
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	1aca      	subs	r2, r1, r3
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <fsm_auto_run_lane1+0x248>)
 8000c14:	605a      	str	r2, [r3, #4]
			if(timer_flag[3] == 1){
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d111      	bne.n	8000c42 <fsm_auto_run_lane1+0x1ea>
				yellow1_time--;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000c26:	6013      	str	r3, [r2, #0]
				if(yellow1_time==0){
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d103      	bne.n	8000c38 <fsm_auto_run_lane1+0x1e0>
					yellow1_time = yellow1TimeMAX;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <fsm_auto_run_lane1+0x258>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <fsm_auto_run_lane1+0x25c>)
 8000c36:	6013      	str	r3, [r2, #0]
				}
				setTimer(3, 1000);
 8000c38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 fde9 	bl	8001814 <setTimer>
			}
			if(timer_flag[1] == 1){
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <fsm_auto_run_lane1+0x24c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d11c      	bne.n	8000c84 <fsm_auto_run_lane1+0x22c>
				status_lane1 = RED_1;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <fsm_auto_run_lane1+0x234>)
 8000c4c:	220b      	movs	r2, #11
 8000c4e:	601a      	str	r2, [r3, #0]
				value1_buffer[0] = red1TimeMAX*1000;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <fsm_auto_run_lane1+0x238>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000c5e:	6013      	str	r3, [r2, #0]
				setTimer(1, value1_buffer[0]);
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <fsm_auto_run_lane1+0x23c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fdd4 	bl	8001814 <setTimer>
				setTimer(3, 1000);
 8000c6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 fdcf 	bl	8001814 <setTimer>
			}
			break;
 8000c76:	e005      	b.n	8000c84 <fsm_auto_run_lane1+0x22c>
		default:
			break;
 8000c78:	bf00      	nop
 8000c7a:	e004      	b.n	8000c86 <fsm_auto_run_lane1+0x22e>
			break;
 8000c7c:	bf00      	nop
 8000c7e:	e002      	b.n	8000c86 <fsm_auto_run_lane1+0x22e>
			break;
 8000c80:	bf00      	nop
 8000c82:	e000      	b.n	8000c86 <fsm_auto_run_lane1+0x22e>
			break;
 8000c84:	bf00      	nop
	}
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000034 	.word	0x20000034
 8000c90:	2000004c 	.word	0x2000004c
 8000c94:	200000d8 	.word	0x200000d8
 8000c98:	20000064 	.word	0x20000064
 8000c9c:	66666667 	.word	0x66666667
 8000ca0:	200000c8 	.word	0x200000c8
 8000ca4:	2000011c 	.word	0x2000011c
 8000ca8:	20000050 	.word	0x20000050
 8000cac:	20000068 	.word	0x20000068
 8000cb0:	20000054 	.word	0x20000054
 8000cb4:	2000006c 	.word	0x2000006c

08000cb8 <fsm_auto_run_lane2>:

void fsm_auto_run_lane2(){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	switch (status_lane2) {
 8000cbc:	4b8b      	ldr	r3, [pc, #556]	; (8000eec <fsm_auto_run_lane2+0x234>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3b0e      	subs	r3, #14
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	f200 8108 	bhi.w	8000ed8 <fsm_auto_run_lane2+0x220>
 8000cc8:	a201      	add	r2, pc, #4	; (adr r2, 8000cd0 <fsm_auto_run_lane2+0x18>)
 8000cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cce:	bf00      	nop
 8000cd0:	08000ce1 	.word	0x08000ce1
 8000cd4:	08000e41 	.word	0x08000e41
 8000cd8:	08000d0f 	.word	0x08000d0f
 8000cdc:	08000da9 	.word	0x08000da9
		case INIT_2:
			status_lane2 = GREEN_2;
 8000ce0:	4b82      	ldr	r3, [pc, #520]	; (8000eec <fsm_auto_run_lane2+0x234>)
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	601a      	str	r2, [r3, #0]
			value2_buffer[0] = green2TimeMAX*1000;
 8000ce6:	4b82      	ldr	r3, [pc, #520]	; (8000ef0 <fsm_auto_run_lane2+0x238>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cee:	fb02 f303 	mul.w	r3, r2, r3
 8000cf2:	4a80      	ldr	r2, [pc, #512]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000cf4:	6013      	str	r3, [r2, #0]
			setTimer(2, value2_buffer[0]);
 8000cf6:	4b7f      	ldr	r3, [pc, #508]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f000 fd89 	bl	8001814 <setTimer>
			setTimer(5, 1000);
 8000d02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d06:	2005      	movs	r0, #5
 8000d08:	f000 fd84 	bl	8001814 <setTimer>
			break;
 8000d0c:	e0eb      	b.n	8000ee6 <fsm_auto_run_lane2+0x22e>
		case GREEN_2:
			green_2();
 8000d0e:	f000 fecf 	bl	8001ab0 <green_2>
			led_buffer_lane2[0] = green2_time/10;
 8000d12:	4b79      	ldr	r3, [pc, #484]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a79      	ldr	r2, [pc, #484]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000d18:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1c:	1092      	asrs	r2, r2, #2
 8000d1e:	17db      	asrs	r3, r3, #31
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	4a77      	ldr	r2, [pc, #476]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000d24:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = green2_time%10;
 8000d26:	4b74      	ldr	r3, [pc, #464]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d28:	6819      	ldr	r1, [r3, #0]
 8000d2a:	4b74      	ldr	r3, [pc, #464]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000d2c:	fb83 2301 	smull	r2, r3, r3, r1
 8000d30:	109a      	asrs	r2, r3, #2
 8000d32:	17cb      	asrs	r3, r1, #31
 8000d34:	1ad2      	subs	r2, r2, r3
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	1aca      	subs	r2, r1, r3
 8000d40:	4b6f      	ldr	r3, [pc, #444]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000d42:	605a      	str	r2, [r3, #4]
			if(timer_flag[5] == 1){
 8000d44:	4b6f      	ldr	r3, [pc, #444]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d111      	bne.n	8000d70 <fsm_auto_run_lane2+0xb8>
				green2_time--;
 8000d4c:	4b6a      	ldr	r3, [pc, #424]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	4a69      	ldr	r2, [pc, #420]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d54:	6013      	str	r3, [r2, #0]
				if(green2_time == 0){
 8000d56:	4b68      	ldr	r3, [pc, #416]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d103      	bne.n	8000d66 <fsm_auto_run_lane2+0xae>
					green2_time=green2TimeMAX;
 8000d5e:	4b64      	ldr	r3, [pc, #400]	; (8000ef0 <fsm_auto_run_lane2+0x238>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a65      	ldr	r2, [pc, #404]	; (8000ef8 <fsm_auto_run_lane2+0x240>)
 8000d64:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 8000d66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d6a:	2005      	movs	r0, #5
 8000d6c:	f000 fd52 	bl	8001814 <setTimer>
			}
			if(timer_flag[2] == 1){
 8000d70:	4b64      	ldr	r3, [pc, #400]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	f040 80b1 	bne.w	8000edc <fsm_auto_run_lane2+0x224>
				status_lane2 = YELLOW_2;
 8000d7a:	4b5c      	ldr	r3, [pc, #368]	; (8000eec <fsm_auto_run_lane2+0x234>)
 8000d7c:	2211      	movs	r2, #17
 8000d7e:	601a      	str	r2, [r3, #0]
				value2_buffer[1]=yellow2TimeMAX*1000;
 8000d80:	4b61      	ldr	r3, [pc, #388]	; (8000f08 <fsm_auto_run_lane2+0x250>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d88:	fb02 f303 	mul.w	r3, r2, r3
 8000d8c:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000d8e:	6053      	str	r3, [r2, #4]
				setTimer(2, value2_buffer[1]);
 8000d90:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	4619      	mov	r1, r3
 8000d96:	2002      	movs	r0, #2
 8000d98:	f000 fd3c 	bl	8001814 <setTimer>
				setTimer(5, 1000);
 8000d9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000da0:	2005      	movs	r0, #5
 8000da2:	f000 fd37 	bl	8001814 <setTimer>
			}
			break;
 8000da6:	e099      	b.n	8000edc <fsm_auto_run_lane2+0x224>
		case YELLOW_2:
			yellow_2();
 8000da8:	f000 fe98 	bl	8001adc <yellow_2>
			led_buffer_lane2[0] = yellow2_time/10;
 8000dac:	4b57      	ldr	r3, [pc, #348]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a52      	ldr	r2, [pc, #328]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000db2:	fb82 1203 	smull	r1, r2, r2, r3
 8000db6:	1092      	asrs	r2, r2, #2
 8000db8:	17db      	asrs	r3, r3, #31
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	4a50      	ldr	r2, [pc, #320]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000dbe:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = yellow2_time%10;
 8000dc0:	4b52      	ldr	r3, [pc, #328]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000dc2:	6819      	ldr	r1, [r3, #0]
 8000dc4:	4b4d      	ldr	r3, [pc, #308]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000dc6:	fb83 2301 	smull	r2, r3, r3, r1
 8000dca:	109a      	asrs	r2, r3, #2
 8000dcc:	17cb      	asrs	r3, r1, #31
 8000dce:	1ad2      	subs	r2, r2, r3
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	1aca      	subs	r2, r1, r3
 8000dda:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000ddc:	605a      	str	r2, [r3, #4]
			if(timer_flag[5] == 1){
 8000dde:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d111      	bne.n	8000e0a <fsm_auto_run_lane2+0x152>
				yellow2_time--;
 8000de6:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	4a47      	ldr	r2, [pc, #284]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000dee:	6013      	str	r3, [r2, #0]
				if(yellow2_time == 0){
 8000df0:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d103      	bne.n	8000e00 <fsm_auto_run_lane2+0x148>
					yellow2_time=yellow2TimeMAX;
 8000df8:	4b43      	ldr	r3, [pc, #268]	; (8000f08 <fsm_auto_run_lane2+0x250>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a43      	ldr	r2, [pc, #268]	; (8000f0c <fsm_auto_run_lane2+0x254>)
 8000dfe:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 8000e00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e04:	2005      	movs	r0, #5
 8000e06:	f000 fd05 	bl	8001814 <setTimer>
			}
			if(timer_flag[2] == 1){
 8000e0a:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d166      	bne.n	8000ee0 <fsm_auto_run_lane2+0x228>
				status_lane2 = RED_2;
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <fsm_auto_run_lane2+0x234>)
 8000e14:	220f      	movs	r2, #15
 8000e16:	601a      	str	r2, [r3, #0]
				value2_buffer[2] = red2TimeMAX*1000;
 8000e18:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <fsm_auto_run_lane2+0x258>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000e26:	6093      	str	r3, [r2, #8]
				setTimer(2, value2_buffer[2]);
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f000 fcf0 	bl	8001814 <setTimer>
				setTimer(5, 1000);
 8000e34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e38:	2005      	movs	r0, #5
 8000e3a:	f000 fceb 	bl	8001814 <setTimer>
			}
			break;
 8000e3e:	e04f      	b.n	8000ee0 <fsm_auto_run_lane2+0x228>
		case RED_2:
			red_2();
 8000e40:	f000 fe20 	bl	8001a84 <red_2>
			led_buffer_lane2[0] = red2_time/10;
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a2c      	ldr	r2, [pc, #176]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4e:	1092      	asrs	r2, r2, #2
 8000e50:	17db      	asrs	r3, r3, #31
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000e56:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = red2_time%10;
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e5a:	6819      	ldr	r1, [r3, #0]
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <fsm_auto_run_lane2+0x244>)
 8000e5e:	fb83 2301 	smull	r2, r3, r3, r1
 8000e62:	109a      	asrs	r2, r3, #2
 8000e64:	17cb      	asrs	r3, r1, #31
 8000e66:	1ad2      	subs	r2, r2, r3
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	1aca      	subs	r2, r1, r3
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <fsm_auto_run_lane2+0x248>)
 8000e74:	605a      	str	r2, [r3, #4]
			if(timer_flag[5] == 1){
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d111      	bne.n	8000ea2 <fsm_auto_run_lane2+0x1ea>
				red2_time--;
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e86:	6013      	str	r3, [r2, #0]
				if(red2_time == 0){
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d103      	bne.n	8000e98 <fsm_auto_run_lane2+0x1e0>
					red2_time=red1TimeMAX;
 8000e90:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <fsm_auto_run_lane2+0x260>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <fsm_auto_run_lane2+0x25c>)
 8000e96:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 8000e98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e9c:	2005      	movs	r0, #5
 8000e9e:	f000 fcb9 	bl	8001814 <setTimer>
			}
			if(timer_flag[2] == 1){
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <fsm_auto_run_lane2+0x24c>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d11c      	bne.n	8000ee4 <fsm_auto_run_lane2+0x22c>
				status_lane2 = GREEN_2;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <fsm_auto_run_lane2+0x234>)
 8000eac:	2210      	movs	r2, #16
 8000eae:	601a      	str	r2, [r3, #0]
				value2_buffer[0] = green2TimeMAX*1000;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <fsm_auto_run_lane2+0x238>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000ebe:	6013      	str	r3, [r2, #0]
				setTimer(2, value2_buffer[0]);
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <fsm_auto_run_lane2+0x23c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f000 fca4 	bl	8001814 <setTimer>
				setTimer(5, 1000);
 8000ecc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ed0:	2005      	movs	r0, #5
 8000ed2:	f000 fc9f 	bl	8001814 <setTimer>
			}
			break;
 8000ed6:	e005      	b.n	8000ee4 <fsm_auto_run_lane2+0x22c>
		default:
			break;
 8000ed8:	bf00      	nop
 8000eda:	e004      	b.n	8000ee6 <fsm_auto_run_lane2+0x22e>
			break;
 8000edc:	bf00      	nop
 8000ede:	e002      	b.n	8000ee6 <fsm_auto_run_lane2+0x22e>
			break;
 8000ee0:	bf00      	nop
 8000ee2:	e000      	b.n	8000ee6 <fsm_auto_run_lane2+0x22e>
			break;
 8000ee4:	bf00      	nop
	}
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000038 	.word	0x20000038
 8000ef0:	2000005c 	.word	0x2000005c
 8000ef4:	200000e4 	.word	0x200000e4
 8000ef8:	20000074 	.word	0x20000074
 8000efc:	66666667 	.word	0x66666667
 8000f00:	200000d0 	.word	0x200000d0
 8000f04:	2000011c 	.word	0x2000011c
 8000f08:	20000060 	.word	0x20000060
 8000f0c:	20000078 	.word	0x20000078
 8000f10:	20000058 	.word	0x20000058
 8000f14:	20000070 	.word	0x20000070
 8000f18:	2000004c 	.word	0x2000004c

08000f1c <fsm_manual_run>:
//		}
//}



void fsm_manual_run(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	switch(STATUS_MODE){
 8000f20:	4b72      	ldr	r3, [pc, #456]	; (80010ec <fsm_manual_run+0x1d0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	f200 8170 	bhi.w	800120a <fsm_manual_run+0x2ee>
 8000f2a:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <fsm_manual_run+0x14>)
 8000f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f30:	08000f45 	.word	0x08000f45
 8000f34:	08000f4d 	.word	0x08000f4d
 8000f38:	08000f79 	.word	0x08000f79
 8000f3c:	08001033 	.word	0x08001033
 8000f40:	08001139 	.word	0x08001139
		case INIT:
			STATUS_MODE = MODE_1;
 8000f44:	4b69      	ldr	r3, [pc, #420]	; (80010ec <fsm_manual_run+0x1d0>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
			break;
 8000f4a:	e15e      	b.n	800120a <fsm_manual_run+0x2ee>

		case MODE_1:
			status_traffic_lane1 = display_traffic_lane1;
 8000f4c:	4b68      	ldr	r3, [pc, #416]	; (80010f0 <fsm_manual_run+0x1d4>)
 8000f4e:	221e      	movs	r2, #30
 8000f50:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = display_traffic_lane2;
 8000f52:	4b68      	ldr	r3, [pc, #416]	; (80010f4 <fsm_manual_run+0x1d8>)
 8000f54:	2223      	movs	r2, #35	; 0x23
 8000f56:	601a      	str	r2, [r3, #0]
			StatusLED1 = CountDownLED1;
 8000f58:	4b67      	ldr	r3, [pc, #412]	; (80010f8 <fsm_manual_run+0x1dc>)
 8000f5a:	2214      	movs	r2, #20
 8000f5c:	601a      	str	r2, [r3, #0]
			StatusLED2 = CountDownLED2;
 8000f5e:	4b67      	ldr	r3, [pc, #412]	; (80010fc <fsm_manual_run+0x1e0>)
 8000f60:	2218      	movs	r2, #24
 8000f62:	601a      	str	r2, [r3, #0]

			if(isButton1_Pressed() == 1){
 8000f64:	f7ff f8f2 	bl	800014c <isButton1_Pressed>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	f040 8146 	bne.w	80011fc <fsm_manual_run+0x2e0>
				STATUS_MODE = MODE_2;
 8000f70:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <fsm_manual_run+0x1d0>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	601a      	str	r2, [r3, #0]
			}
			break;
 8000f76:	e141      	b.n	80011fc <fsm_manual_run+0x2e0>
		case MODE_2:
			status_traffic_lane1 = modify_red1;
 8000f78:	4b5d      	ldr	r3, [pc, #372]	; (80010f0 <fsm_manual_run+0x1d4>)
 8000f7a:	221f      	movs	r2, #31
 8000f7c:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = modify_red2;
 8000f7e:	4b5d      	ldr	r3, [pc, #372]	; (80010f4 <fsm_manual_run+0x1d8>)
 8000f80:	222d      	movs	r2, #45	; 0x2d
 8000f82:	601a      	str	r2, [r3, #0]
			StatusLED1 = DisplayLED1Mode2;
 8000f84:	4b5c      	ldr	r3, [pc, #368]	; (80010f8 <fsm_manual_run+0x1dc>)
 8000f86:	2215      	movs	r2, #21
 8000f88:	601a      	str	r2, [r3, #0]
			StatusLED2 = TimerValue;
 8000f8a:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <fsm_manual_run+0x1e0>)
 8000f8c:	2219      	movs	r2, #25
 8000f8e:	601a      	str	r2, [r3, #0]

			if(isButton2_Pressed() == 1){
 8000f90:	f7ff f8ee 	bl	8000170 <isButton2_Pressed>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d113      	bne.n	8000fc2 <fsm_manual_run+0xa6>
				red1TimeMAX++;
 8000f9a:	4b59      	ldr	r3, [pc, #356]	; (8001100 <fsm_manual_run+0x1e4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a57      	ldr	r2, [pc, #348]	; (8001100 <fsm_manual_run+0x1e4>)
 8000fa2:	6013      	str	r3, [r2, #0]
				red2TimeMAX++;
 8000fa4:	4b57      	ldr	r3, [pc, #348]	; (8001104 <fsm_manual_run+0x1e8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	4a56      	ldr	r2, [pc, #344]	; (8001104 <fsm_manual_run+0x1e8>)
 8000fac:	6013      	str	r3, [r2, #0]
				green1TimeMAX++;
 8000fae:	4b56      	ldr	r3, [pc, #344]	; (8001108 <fsm_manual_run+0x1ec>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a54      	ldr	r2, [pc, #336]	; (8001108 <fsm_manual_run+0x1ec>)
 8000fb6:	6013      	str	r3, [r2, #0]
				green2TimeMAX++;
 8000fb8:	4b54      	ldr	r3, [pc, #336]	; (800110c <fsm_manual_run+0x1f0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a53      	ldr	r2, [pc, #332]	; (800110c <fsm_manual_run+0x1f0>)
 8000fc0:	6013      	str	r3, [r2, #0]
			}
			//update buffer
			led_buffer_lane2[0] = red2TimeMAX/10;
 8000fc2:	4b50      	ldr	r3, [pc, #320]	; (8001104 <fsm_manual_run+0x1e8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a52      	ldr	r2, [pc, #328]	; (8001110 <fsm_manual_run+0x1f4>)
 8000fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fcc:	1092      	asrs	r2, r2, #2
 8000fce:	17db      	asrs	r3, r3, #31
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	4a50      	ldr	r2, [pc, #320]	; (8001114 <fsm_manual_run+0x1f8>)
 8000fd4:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = red2TimeMAX%10;
 8000fd6:	4b4b      	ldr	r3, [pc, #300]	; (8001104 <fsm_manual_run+0x1e8>)
 8000fd8:	6819      	ldr	r1, [r3, #0]
 8000fda:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <fsm_manual_run+0x1f4>)
 8000fdc:	fb83 2301 	smull	r2, r3, r3, r1
 8000fe0:	109a      	asrs	r2, r3, #2
 8000fe2:	17cb      	asrs	r3, r1, #31
 8000fe4:	1ad2      	subs	r2, r2, r3
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	1aca      	subs	r2, r1, r3
 8000ff0:	4b48      	ldr	r3, [pc, #288]	; (8001114 <fsm_manual_run+0x1f8>)
 8000ff2:	605a      	str	r2, [r3, #4]

			if(isButton3_Pressed() == 1){
 8000ff4:	f7ff f8ce 	bl	8000194 <isButton3_Pressed>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d10f      	bne.n	800101e <fsm_manual_run+0x102>
				red1_time = red1TimeMAX;
 8000ffe:	4b40      	ldr	r3, [pc, #256]	; (8001100 <fsm_manual_run+0x1e4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a45      	ldr	r2, [pc, #276]	; (8001118 <fsm_manual_run+0x1fc>)
 8001004:	6013      	str	r3, [r2, #0]
				red2_time = red2TimeMAX;
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <fsm_manual_run+0x1e8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a44      	ldr	r2, [pc, #272]	; (800111c <fsm_manual_run+0x200>)
 800100c:	6013      	str	r3, [r2, #0]
				green1_time = green1TimeMAX;
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <fsm_manual_run+0x1ec>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a43      	ldr	r2, [pc, #268]	; (8001120 <fsm_manual_run+0x204>)
 8001014:	6013      	str	r3, [r2, #0]
				green2_time = green2TimeMAX;
 8001016:	4b3d      	ldr	r3, [pc, #244]	; (800110c <fsm_manual_run+0x1f0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a42      	ldr	r2, [pc, #264]	; (8001124 <fsm_manual_run+0x208>)
 800101c:	6013      	str	r3, [r2, #0]
			}
			if(isButton1_Pressed() == 1){
 800101e:	f7ff f895 	bl	800014c <isButton1_Pressed>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	f040 80eb 	bne.w	8001200 <fsm_manual_run+0x2e4>
				STATUS_MODE = MODE_3;
 800102a:	4b30      	ldr	r3, [pc, #192]	; (80010ec <fsm_manual_run+0x1d0>)
 800102c:	2203      	movs	r2, #3
 800102e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001030:	e0e6      	b.n	8001200 <fsm_manual_run+0x2e4>
		case MODE_3:
			status_traffic_lane1 = modify_yellow1;
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <fsm_manual_run+0x1d4>)
 8001034:	2221      	movs	r2, #33	; 0x21
 8001036:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = modify_yellow2;
 8001038:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <fsm_manual_run+0x1d8>)
 800103a:	222f      	movs	r2, #47	; 0x2f
 800103c:	601a      	str	r2, [r3, #0]
			StatusLED1 = DisplayLED1Mode3;
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <fsm_manual_run+0x1dc>)
 8001040:	2216      	movs	r2, #22
 8001042:	601a      	str	r2, [r3, #0]
			StatusLED2 = TimerValue;
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <fsm_manual_run+0x1e0>)
 8001046:	2219      	movs	r2, #25
 8001048:	601a      	str	r2, [r3, #0]

			if(isButton2_Pressed() == 1){
 800104a:	f7ff f891 	bl	8000170 <isButton2_Pressed>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d113      	bne.n	800107c <fsm_manual_run+0x160>
				yellow1TimeMAX++;
 8001054:	4b34      	ldr	r3, [pc, #208]	; (8001128 <fsm_manual_run+0x20c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a33      	ldr	r2, [pc, #204]	; (8001128 <fsm_manual_run+0x20c>)
 800105c:	6013      	str	r3, [r2, #0]
				yellow2TimeMAX++;
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <fsm_manual_run+0x210>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	4a31      	ldr	r2, [pc, #196]	; (800112c <fsm_manual_run+0x210>)
 8001066:	6013      	str	r3, [r2, #0]
				red1TimeMAX++;
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <fsm_manual_run+0x1e4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a24      	ldr	r2, [pc, #144]	; (8001100 <fsm_manual_run+0x1e4>)
 8001070:	6013      	str	r3, [r2, #0]
				red2TimeMAX++;
 8001072:	4b24      	ldr	r3, [pc, #144]	; (8001104 <fsm_manual_run+0x1e8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <fsm_manual_run+0x1e8>)
 800107a:	6013      	str	r3, [r2, #0]

			}
			led_buffer_lane2[0] = yellow2TimeMAX/10;
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <fsm_manual_run+0x210>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a23      	ldr	r2, [pc, #140]	; (8001110 <fsm_manual_run+0x1f4>)
 8001082:	fb82 1203 	smull	r1, r2, r2, r3
 8001086:	1092      	asrs	r2, r2, #2
 8001088:	17db      	asrs	r3, r3, #31
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <fsm_manual_run+0x1f8>)
 800108e:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = yellow2TimeMAX%10;
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <fsm_manual_run+0x210>)
 8001092:	6819      	ldr	r1, [r3, #0]
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <fsm_manual_run+0x1f4>)
 8001096:	fb83 2301 	smull	r2, r3, r3, r1
 800109a:	109a      	asrs	r2, r3, #2
 800109c:	17cb      	asrs	r3, r1, #31
 800109e:	1ad2      	subs	r2, r2, r3
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	1aca      	subs	r2, r1, r3
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <fsm_manual_run+0x1f8>)
 80010ac:	605a      	str	r2, [r3, #4]

			if(isButton3_Pressed() == 1){
 80010ae:	f7ff f871 	bl	8000194 <isButton3_Pressed>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10f      	bne.n	80010d8 <fsm_manual_run+0x1bc>
				yellow1_time = yellow1TimeMAX;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <fsm_manual_run+0x20c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a1c      	ldr	r2, [pc, #112]	; (8001130 <fsm_manual_run+0x214>)
 80010be:	6013      	str	r3, [r2, #0]
				yellow2_time = yellow2TimeMAX;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <fsm_manual_run+0x210>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <fsm_manual_run+0x218>)
 80010c6:	6013      	str	r3, [r2, #0]
				red1_time = red1TimeMAX;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <fsm_manual_run+0x1e4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <fsm_manual_run+0x1fc>)
 80010ce:	6013      	str	r3, [r2, #0]
				red2_time = red2TimeMAX;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <fsm_manual_run+0x1e8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a11      	ldr	r2, [pc, #68]	; (800111c <fsm_manual_run+0x200>)
 80010d6:	6013      	str	r3, [r2, #0]
			}
			if(isButton1_Pressed() == 1){
 80010d8:	f7ff f838 	bl	800014c <isButton1_Pressed>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	f040 8090 	bne.w	8001204 <fsm_manual_run+0x2e8>
				STATUS_MODE = MODE_4;
 80010e4:	4b01      	ldr	r3, [pc, #4]	; (80010ec <fsm_manual_run+0x1d0>)
 80010e6:	2204      	movs	r2, #4
 80010e8:	601a      	str	r2, [r3, #0]
			}
			break;
 80010ea:	e08b      	b.n	8001204 <fsm_manual_run+0x2e8>
 80010ec:	200000f0 	.word	0x200000f0
 80010f0:	20000044 	.word	0x20000044
 80010f4:	20000048 	.word	0x20000048
 80010f8:	2000003c 	.word	0x2000003c
 80010fc:	20000040 	.word	0x20000040
 8001100:	2000004c 	.word	0x2000004c
 8001104:	20000058 	.word	0x20000058
 8001108:	20000050 	.word	0x20000050
 800110c:	2000005c 	.word	0x2000005c
 8001110:	66666667 	.word	0x66666667
 8001114:	200000d0 	.word	0x200000d0
 8001118:	20000064 	.word	0x20000064
 800111c:	20000070 	.word	0x20000070
 8001120:	20000068 	.word	0x20000068
 8001124:	20000074 	.word	0x20000074
 8001128:	20000054 	.word	0x20000054
 800112c:	20000060 	.word	0x20000060
 8001130:	2000006c 	.word	0x2000006c
 8001134:	20000078 	.word	0x20000078
		case MODE_4:
			status_traffic_lane1 = modify_green1;
 8001138:	4b35      	ldr	r3, [pc, #212]	; (8001210 <fsm_manual_run+0x2f4>)
 800113a:	2220      	movs	r2, #32
 800113c:	601a      	str	r2, [r3, #0]
			status_traffic_lane2 = modify_green2;
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <fsm_manual_run+0x2f8>)
 8001140:	222e      	movs	r2, #46	; 0x2e
 8001142:	601a      	str	r2, [r3, #0]
			StatusLED1 = DisplayLED1Mode4;
 8001144:	4b34      	ldr	r3, [pc, #208]	; (8001218 <fsm_manual_run+0x2fc>)
 8001146:	2217      	movs	r2, #23
 8001148:	601a      	str	r2, [r3, #0]
			StatusLED2 = TimerValue;
 800114a:	4b34      	ldr	r3, [pc, #208]	; (800121c <fsm_manual_run+0x300>)
 800114c:	2219      	movs	r2, #25
 800114e:	601a      	str	r2, [r3, #0]

			if(isButton2_Pressed() == 1){
 8001150:	f7ff f80e 	bl	8000170 <isButton2_Pressed>
 8001154:	4603      	mov	r3, r0
 8001156:	2b01      	cmp	r3, #1
 8001158:	d113      	bne.n	8001182 <fsm_manual_run+0x266>
				green1TimeMAX++;
 800115a:	4b31      	ldr	r3, [pc, #196]	; (8001220 <fsm_manual_run+0x304>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4a2f      	ldr	r2, [pc, #188]	; (8001220 <fsm_manual_run+0x304>)
 8001162:	6013      	str	r3, [r2, #0]
				green2TimeMAX++;
 8001164:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <fsm_manual_run+0x308>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a2e      	ldr	r2, [pc, #184]	; (8001224 <fsm_manual_run+0x308>)
 800116c:	6013      	str	r3, [r2, #0]
				red1TimeMAX++;
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <fsm_manual_run+0x30c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a2c      	ldr	r2, [pc, #176]	; (8001228 <fsm_manual_run+0x30c>)
 8001176:	6013      	str	r3, [r2, #0]
				red2TimeMAX++;
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <fsm_manual_run+0x310>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a2b      	ldr	r2, [pc, #172]	; (800122c <fsm_manual_run+0x310>)
 8001180:	6013      	str	r3, [r2, #0]
			}

			led_buffer_lane2[0] = green2TimeMAX/10;
 8001182:	4b28      	ldr	r3, [pc, #160]	; (8001224 <fsm_manual_run+0x308>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a2a      	ldr	r2, [pc, #168]	; (8001230 <fsm_manual_run+0x314>)
 8001188:	fb82 1203 	smull	r1, r2, r2, r3
 800118c:	1092      	asrs	r2, r2, #2
 800118e:	17db      	asrs	r3, r3, #31
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	4a28      	ldr	r2, [pc, #160]	; (8001234 <fsm_manual_run+0x318>)
 8001194:	6013      	str	r3, [r2, #0]
			led_buffer_lane2[1] = green2TimeMAX%10;
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <fsm_manual_run+0x308>)
 8001198:	6819      	ldr	r1, [r3, #0]
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <fsm_manual_run+0x314>)
 800119c:	fb83 2301 	smull	r2, r3, r3, r1
 80011a0:	109a      	asrs	r2, r3, #2
 80011a2:	17cb      	asrs	r3, r1, #31
 80011a4:	1ad2      	subs	r2, r2, r3
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	1aca      	subs	r2, r1, r3
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <fsm_manual_run+0x318>)
 80011b2:	605a      	str	r2, [r3, #4]

			if(isButton3_Pressed() == 1){
 80011b4:	f7fe ffee 	bl	8000194 <isButton3_Pressed>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d10f      	bne.n	80011de <fsm_manual_run+0x2c2>
				green1_time = green1TimeMAX;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <fsm_manual_run+0x304>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <fsm_manual_run+0x31c>)
 80011c4:	6013      	str	r3, [r2, #0]
				green2_time = green2TimeMAX;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <fsm_manual_run+0x308>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <fsm_manual_run+0x320>)
 80011cc:	6013      	str	r3, [r2, #0]
				red1_time = red1TimeMAX;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <fsm_manual_run+0x30c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <fsm_manual_run+0x324>)
 80011d4:	6013      	str	r3, [r2, #0]
				red2_time = red2TimeMAX;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <fsm_manual_run+0x310>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <fsm_manual_run+0x328>)
 80011dc:	6013      	str	r3, [r2, #0]
			}
			if(isButton1_Pressed() == 1 ){
 80011de:	f7fe ffb5 	bl	800014c <isButton1_Pressed>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d10f      	bne.n	8001208 <fsm_manual_run+0x2ec>
				status_lane1 = INIT_1;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <fsm_manual_run+0x32c>)
 80011ea:	220a      	movs	r2, #10
 80011ec:	601a      	str	r2, [r3, #0]
				status_lane2 = INIT_2;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <fsm_manual_run+0x330>)
 80011f0:	220e      	movs	r2, #14
 80011f2:	601a      	str	r2, [r3, #0]
				STATUS_MODE = INIT;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <fsm_manual_run+0x334>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
			}
			break;
 80011fa:	e005      	b.n	8001208 <fsm_manual_run+0x2ec>
			break;
 80011fc:	bf00      	nop
 80011fe:	e004      	b.n	800120a <fsm_manual_run+0x2ee>
			break;
 8001200:	bf00      	nop
 8001202:	e002      	b.n	800120a <fsm_manual_run+0x2ee>
			break;
 8001204:	bf00      	nop
 8001206:	e000      	b.n	800120a <fsm_manual_run+0x2ee>
			break;
 8001208:	bf00      	nop
		}
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000044 	.word	0x20000044
 8001214:	20000048 	.word	0x20000048
 8001218:	2000003c 	.word	0x2000003c
 800121c:	20000040 	.word	0x20000040
 8001220:	20000050 	.word	0x20000050
 8001224:	2000005c 	.word	0x2000005c
 8001228:	2000004c 	.word	0x2000004c
 800122c:	20000058 	.word	0x20000058
 8001230:	66666667 	.word	0x66666667
 8001234:	200000d0 	.word	0x200000d0
 8001238:	20000068 	.word	0x20000068
 800123c:	20000074 	.word	0x20000074
 8001240:	20000064 	.word	0x20000064
 8001244:	20000070 	.word	0x20000070
 8001248:	20000034 	.word	0x20000034
 800124c:	20000038 	.word	0x20000038
 8001250:	200000f0 	.word	0x200000f0

08001254 <FSMDisplayLED1>:
#include "fsm_setting.h"
int StatusLED1 = CountDownLED1;
int StatusLED2 = CountDownLED2;

void FSMDisplayLED1(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	switch(StatusLED1){
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <FSMDisplayLED1+0x120>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3b14      	subs	r3, #20
 800125e:	2b03      	cmp	r3, #3
 8001260:	d87c      	bhi.n	800135c <FSMDisplayLED1+0x108>
 8001262:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <FSMDisplayLED1+0x14>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	08001279 	.word	0x08001279
 800126c:	080012a9 	.word	0x080012a9
 8001270:	080012e5 	.word	0x080012e5
 8001274:	08001321 	.word	0x08001321
		case CountDownLED1:
			if(timer_flag[4] == 1)
 8001278:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <FSMDisplayLED1+0x124>)
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d16f      	bne.n	8001360 <FSMDisplayLED1+0x10c>
			{
				update7SEG(indexLEDmot++);
 8001280:	4b3e      	ldr	r3, [pc, #248]	; (800137c <FSMDisplayLED1+0x128>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	493d      	ldr	r1, [pc, #244]	; (800137c <FSMDisplayLED1+0x128>)
 8001288:	600a      	str	r2, [r1, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fb74 	bl	8000978 <update7SEG>
				if(indexLEDmot == 2) indexLEDmot = 0;
 8001290:	4b3a      	ldr	r3, [pc, #232]	; (800137c <FSMDisplayLED1+0x128>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d102      	bne.n	800129e <FSMDisplayLED1+0x4a>
 8001298:	4b38      	ldr	r3, [pc, #224]	; (800137c <FSMDisplayLED1+0x128>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
				setTimer(4, 150);
 800129e:	2196      	movs	r1, #150	; 0x96
 80012a0:	2004      	movs	r0, #4
 80012a2:	f000 fab7 	bl	8001814 <setTimer>
			}
			break;
 80012a6:	e05b      	b.n	8001360 <FSMDisplayLED1+0x10c>
		case DisplayLED1Mode2:
			led_buffer_lane1[0] = 0;
 80012a8:	4b35      	ldr	r3, [pc, #212]	; (8001380 <FSMDisplayLED1+0x12c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
			led_buffer_lane1[1] = 2;
 80012ae:	4b34      	ldr	r3, [pc, #208]	; (8001380 <FSMDisplayLED1+0x12c>)
 80012b0:	2202      	movs	r2, #2
 80012b2:	605a      	str	r2, [r3, #4]
			if(timer_flag[4]==1)
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <FSMDisplayLED1+0x124>)
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d153      	bne.n	8001364 <FSMDisplayLED1+0x110>
			{
				update7SEG(indexLEDmot++);
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <FSMDisplayLED1+0x128>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	492e      	ldr	r1, [pc, #184]	; (800137c <FSMDisplayLED1+0x128>)
 80012c4:	600a      	str	r2, [r1, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fb56 	bl	8000978 <update7SEG>
				if(indexLEDmot == 2) indexLEDmot = 0;
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <FSMDisplayLED1+0x128>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d102      	bne.n	80012da <FSMDisplayLED1+0x86>
 80012d4:	4b29      	ldr	r3, [pc, #164]	; (800137c <FSMDisplayLED1+0x128>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
				setTimer(4, 150);
 80012da:	2196      	movs	r1, #150	; 0x96
 80012dc:	2004      	movs	r0, #4
 80012de:	f000 fa99 	bl	8001814 <setTimer>
			}
			break;
 80012e2:	e03f      	b.n	8001364 <FSMDisplayLED1+0x110>
		case DisplayLED1Mode3:
			led_buffer_lane1[0] = 0;
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <FSMDisplayLED1+0x12c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
			led_buffer_lane1[1] = 3;
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <FSMDisplayLED1+0x12c>)
 80012ec:	2203      	movs	r2, #3
 80012ee:	605a      	str	r2, [r3, #4]
			if(timer_flag[4]==1){
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <FSMDisplayLED1+0x124>)
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d137      	bne.n	8001368 <FSMDisplayLED1+0x114>
				update7SEG(indexLEDmot++);
 80012f8:	4b20      	ldr	r3, [pc, #128]	; (800137c <FSMDisplayLED1+0x128>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	491f      	ldr	r1, [pc, #124]	; (800137c <FSMDisplayLED1+0x128>)
 8001300:	600a      	str	r2, [r1, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fb38 	bl	8000978 <update7SEG>
				if(indexLEDmot == 2) indexLEDmot = 0;
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <FSMDisplayLED1+0x128>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d102      	bne.n	8001316 <FSMDisplayLED1+0xc2>
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <FSMDisplayLED1+0x128>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
				setTimer(4, 150);
 8001316:	2196      	movs	r1, #150	; 0x96
 8001318:	2004      	movs	r0, #4
 800131a:	f000 fa7b 	bl	8001814 <setTimer>
			}
			break;
 800131e:	e023      	b.n	8001368 <FSMDisplayLED1+0x114>
		case DisplayLED1Mode4:
			led_buffer_lane1[0] = 0;
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <FSMDisplayLED1+0x12c>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
			led_buffer_lane1[1] = 4;
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <FSMDisplayLED1+0x12c>)
 8001328:	2204      	movs	r2, #4
 800132a:	605a      	str	r2, [r3, #4]
			if(timer_flag[4]==1){
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <FSMDisplayLED1+0x124>)
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d11b      	bne.n	800136c <FSMDisplayLED1+0x118>
				update7SEG(indexLEDmot++);
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <FSMDisplayLED1+0x128>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	4910      	ldr	r1, [pc, #64]	; (800137c <FSMDisplayLED1+0x128>)
 800133c:	600a      	str	r2, [r1, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fb1a 	bl	8000978 <update7SEG>
				if(indexLEDmot == 2) indexLEDmot = 0;
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <FSMDisplayLED1+0x128>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d102      	bne.n	8001352 <FSMDisplayLED1+0xfe>
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <FSMDisplayLED1+0x128>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
				setTimer(4, 150);
 8001352:	2196      	movs	r1, #150	; 0x96
 8001354:	2004      	movs	r0, #4
 8001356:	f000 fa5d 	bl	8001814 <setTimer>
			}
			break;
 800135a:	e007      	b.n	800136c <FSMDisplayLED1+0x118>
		default:
			break;
 800135c:	bf00      	nop
 800135e:	e006      	b.n	800136e <FSMDisplayLED1+0x11a>
			break;
 8001360:	bf00      	nop
 8001362:	e004      	b.n	800136e <FSMDisplayLED1+0x11a>
			break;
 8001364:	bf00      	nop
 8001366:	e002      	b.n	800136e <FSMDisplayLED1+0x11a>
			break;
 8001368:	bf00      	nop
 800136a:	e000      	b.n	800136e <FSMDisplayLED1+0x11a>
			break;
 800136c:	bf00      	nop
	}
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000003c 	.word	0x2000003c
 8001378:	2000011c 	.word	0x2000011c
 800137c:	200000c0 	.word	0x200000c0
 8001380:	200000c8 	.word	0x200000c8

08001384 <FSMDisplayLED2>:

void FSMDisplayLED2(){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	switch(StatusLED2) {
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <FSMDisplayLED2+0x7c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b18      	cmp	r3, #24
 800138e:	d002      	beq.n	8001396 <FSMDisplayLED2+0x12>
 8001390:	2b19      	cmp	r3, #25
 8001392:	d018      	beq.n	80013c6 <FSMDisplayLED2+0x42>
				if(indexLEDhai == 2) indexLEDhai = 0;
				setTimer(6, 150);
			}
			break;
		default:
			break;
 8001394:	e032      	b.n	80013fc <FSMDisplayLED2+0x78>
			if(timer_flag[6] == 1){
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <FSMDisplayLED2+0x80>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d12b      	bne.n	80013f6 <FSMDisplayLED2+0x72>
				update7SEG_lane2(indexLEDhai++);
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <FSMDisplayLED2+0x84>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	4918      	ldr	r1, [pc, #96]	; (8001408 <FSMDisplayLED2+0x84>)
 80013a6:	600a      	str	r2, [r1, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fb1d 	bl	80009e8 <update7SEG_lane2>
				if(indexLEDhai == 2) indexLEDhai = 0;
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <FSMDisplayLED2+0x84>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d102      	bne.n	80013bc <FSMDisplayLED2+0x38>
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <FSMDisplayLED2+0x84>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
				setTimer(6, 150);
 80013bc:	2196      	movs	r1, #150	; 0x96
 80013be:	2006      	movs	r0, #6
 80013c0:	f000 fa28 	bl	8001814 <setTimer>
			break;
 80013c4:	e017      	b.n	80013f6 <FSMDisplayLED2+0x72>
			if(timer_flag[6] == 1){
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <FSMDisplayLED2+0x80>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d115      	bne.n	80013fa <FSMDisplayLED2+0x76>
				update7SEG_lane2(indexLEDhai++);
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <FSMDisplayLED2+0x84>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <FSMDisplayLED2+0x84>)
 80013d6:	600a      	str	r2, [r1, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fb05 	bl	80009e8 <update7SEG_lane2>
				if(indexLEDhai == 2) indexLEDhai = 0;
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <FSMDisplayLED2+0x84>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d102      	bne.n	80013ec <FSMDisplayLED2+0x68>
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <FSMDisplayLED2+0x84>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
				setTimer(6, 150);
 80013ec:	2196      	movs	r1, #150	; 0x96
 80013ee:	2006      	movs	r0, #6
 80013f0:	f000 fa10 	bl	8001814 <setTimer>
			break;
 80013f4:	e001      	b.n	80013fa <FSMDisplayLED2+0x76>
			break;
 80013f6:	bf00      	nop
 80013f8:	e000      	b.n	80013fc <FSMDisplayLED2+0x78>
			break;
 80013fa:	bf00      	nop
	}
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000040 	.word	0x20000040
 8001404:	2000011c 	.word	0x2000011c
 8001408:	200000c4 	.word	0x200000c4

0800140c <FSM_Display_2LED>:

void FSM_Display_2LED(){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	FSMDisplayLED1();
 8001410:	f7ff ff20 	bl	8001254 <FSMDisplayLED1>
	FSMDisplayLED2();
 8001414:	f7ff ffb6 	bl	8001384 <FSMDisplayLED2>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <fsm_traffic_lane1_run>:


int status_traffic_lane1 = display_traffic_lane1;
int status_traffic_lane2 = display_traffic_lane2;

void fsm_traffic_lane1_run(){
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	switch (status_traffic_lane1) {
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <fsm_traffic_lane1_run+0x9c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3b1e      	subs	r3, #30
 8001426:	2b03      	cmp	r3, #3
 8001428:	d83d      	bhi.n	80014a6 <fsm_traffic_lane1_run+0x8a>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <fsm_traffic_lane1_run+0x14>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001441 	.word	0x08001441
 8001434:	08001447 	.word	0x08001447
 8001438:	08001487 	.word	0x08001487
 800143c:	08001467 	.word	0x08001467
		case display_traffic_lane1:
			fsm_auto_run_lane1();
 8001440:	f7ff fb0a 	bl	8000a58 <fsm_auto_run_lane1>
			break;
 8001444:	e036      	b.n	80014b4 <fsm_traffic_lane1_run+0x98>
		case modify_red1:
			off_greenyellow_lane1();
 8001446:	f000 fb7f 	bl	8001b48 <off_greenyellow_lane1>
			if(timer_flag[8] == 1){
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <fsm_traffic_lane1_run+0xa0>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d12b      	bne.n	80014aa <fsm_traffic_lane1_run+0x8e>
				HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 8001452:	2102      	movs	r1, #2
 8001454:	481a      	ldr	r0, [pc, #104]	; (80014c0 <fsm_traffic_lane1_run+0xa4>)
 8001456:	f000 fef6 	bl	8002246 <HAL_GPIO_TogglePin>
				setTimer(8, 500);
 800145a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800145e:	2008      	movs	r0, #8
 8001460:	f000 f9d8 	bl	8001814 <setTimer>
			}
			break;
 8001464:	e021      	b.n	80014aa <fsm_traffic_lane1_run+0x8e>
		case modify_yellow1:
			off_redgreen_lane1();
 8001466:	f000 fb4f 	bl	8001b08 <off_redgreen_lane1>
			if(timer_flag[8] == 1){
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <fsm_traffic_lane1_run+0xa0>)
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d11d      	bne.n	80014ae <fsm_traffic_lane1_run+0x92>
				HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 8001472:	2108      	movs	r1, #8
 8001474:	4812      	ldr	r0, [pc, #72]	; (80014c0 <fsm_traffic_lane1_run+0xa4>)
 8001476:	f000 fee6 	bl	8002246 <HAL_GPIO_TogglePin>
				setTimer(8, 500);
 800147a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800147e:	2008      	movs	r0, #8
 8001480:	f000 f9c8 	bl	8001814 <setTimer>
			}
			break;
 8001484:	e013      	b.n	80014ae <fsm_traffic_lane1_run+0x92>
		case modify_green1:
			off_redyellow_lane1();
 8001486:	f000 fb4f 	bl	8001b28 <off_redyellow_lane1>
			if(timer_flag[8] == 1){
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <fsm_traffic_lane1_run+0xa0>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10f      	bne.n	80014b2 <fsm_traffic_lane1_run+0x96>
				HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8001492:	2104      	movs	r1, #4
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <fsm_traffic_lane1_run+0xa4>)
 8001496:	f000 fed6 	bl	8002246 <HAL_GPIO_TogglePin>
				setTimer(8, 500);
 800149a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800149e:	2008      	movs	r0, #8
 80014a0:	f000 f9b8 	bl	8001814 <setTimer>
			}
			break;
 80014a4:	e005      	b.n	80014b2 <fsm_traffic_lane1_run+0x96>
		default:
			break;
 80014a6:	bf00      	nop
 80014a8:	e004      	b.n	80014b4 <fsm_traffic_lane1_run+0x98>
			break;
 80014aa:	bf00      	nop
 80014ac:	e002      	b.n	80014b4 <fsm_traffic_lane1_run+0x98>
			break;
 80014ae:	bf00      	nop
 80014b0:	e000      	b.n	80014b4 <fsm_traffic_lane1_run+0x98>
			break;
 80014b2:	bf00      	nop
	}
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000044 	.word	0x20000044
 80014bc:	2000011c 	.word	0x2000011c
 80014c0:	40010800 	.word	0x40010800

080014c4 <fsm_traffic_lane2_run>:

void fsm_traffic_lane2_run(){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	switch(status_traffic_lane2){
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <fsm_traffic_lane2_run+0xc0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3b23      	subs	r3, #35	; 0x23
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	d84f      	bhi.n	8001572 <fsm_traffic_lane2_run+0xae>
 80014d2:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <fsm_traffic_lane2_run+0x14>)
 80014d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d8:	0800150d 	.word	0x0800150d
 80014dc:	08001573 	.word	0x08001573
 80014e0:	08001573 	.word	0x08001573
 80014e4:	08001573 	.word	0x08001573
 80014e8:	08001573 	.word	0x08001573
 80014ec:	08001573 	.word	0x08001573
 80014f0:	08001573 	.word	0x08001573
 80014f4:	08001573 	.word	0x08001573
 80014f8:	08001573 	.word	0x08001573
 80014fc:	08001573 	.word	0x08001573
 8001500:	08001513 	.word	0x08001513
 8001504:	08001533 	.word	0x08001533
 8001508:	08001553 	.word	0x08001553
		case display_traffic_lane2:
			fsm_auto_run_lane2();
 800150c:	f7ff fbd4 	bl	8000cb8 <fsm_auto_run_lane2>
			break;
 8001510:	e036      	b.n	8001580 <fsm_traffic_lane2_run+0xbc>
		case modify_red2:
			off_greenyellow_lane2();
 8001512:	f000 fb49 	bl	8001ba8 <off_greenyellow_lane2>
			if(timer_flag[7] == 1){
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <fsm_traffic_lane2_run+0xc4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d12b      	bne.n	8001576 <fsm_traffic_lane2_run+0xb2>
				HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 800151e:	2110      	movs	r1, #16
 8001520:	481a      	ldr	r0, [pc, #104]	; (800158c <fsm_traffic_lane2_run+0xc8>)
 8001522:	f000 fe90 	bl	8002246 <HAL_GPIO_TogglePin>
				setTimer(7, 500);
 8001526:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800152a:	2007      	movs	r0, #7
 800152c:	f000 f972 	bl	8001814 <setTimer>
			}
			break;
 8001530:	e021      	b.n	8001576 <fsm_traffic_lane2_run+0xb2>
		case modify_green2:
			off_redyellow_lane2();
 8001532:	f000 fb29 	bl	8001b88 <off_redyellow_lane2>
			if(timer_flag[7] == 1){
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <fsm_traffic_lane2_run+0xc4>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d11d      	bne.n	800157a <fsm_traffic_lane2_run+0xb6>
				HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 800153e:	2120      	movs	r1, #32
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <fsm_traffic_lane2_run+0xc8>)
 8001542:	f000 fe80 	bl	8002246 <HAL_GPIO_TogglePin>
				setTimer(7, 500);
 8001546:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800154a:	2007      	movs	r0, #7
 800154c:	f000 f962 	bl	8001814 <setTimer>
			}
			break;
 8001550:	e013      	b.n	800157a <fsm_traffic_lane2_run+0xb6>
		case modify_yellow2:
			off_redgreen_lane2();
 8001552:	f000 fb09 	bl	8001b68 <off_redgreen_lane2>
			if(timer_flag[7] == 1){
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <fsm_traffic_lane2_run+0xc4>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d10f      	bne.n	800157e <fsm_traffic_lane2_run+0xba>
				HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 800155e:	2140      	movs	r1, #64	; 0x40
 8001560:	480a      	ldr	r0, [pc, #40]	; (800158c <fsm_traffic_lane2_run+0xc8>)
 8001562:	f000 fe70 	bl	8002246 <HAL_GPIO_TogglePin>
				setTimer(7, 500);
 8001566:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800156a:	2007      	movs	r0, #7
 800156c:	f000 f952 	bl	8001814 <setTimer>
			}
			break;
 8001570:	e005      	b.n	800157e <fsm_traffic_lane2_run+0xba>
		default:
			break;
 8001572:	bf00      	nop
 8001574:	e004      	b.n	8001580 <fsm_traffic_lane2_run+0xbc>
			break;
 8001576:	bf00      	nop
 8001578:	e002      	b.n	8001580 <fsm_traffic_lane2_run+0xbc>
			break;
 800157a:	bf00      	nop
 800157c:	e000      	b.n	8001580 <fsm_traffic_lane2_run+0xbc>
			break;
 800157e:	bf00      	nop
	}
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000048 	.word	0x20000048
 8001588:	2000011c 	.word	0x2000011c
 800158c:	40010800 	.word	0x40010800

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f000 fb3e 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 f83a 	bl	8001610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159c:	f000 f8c0 	bl	8001720 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015a0:	f000 f872 	bl	8001688 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80015a4:	4817      	ldr	r0, [pc, #92]	; (8001604 <main+0x74>)
 80015a6:	f001 fa9f 	bl	8002ae8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setTimer(4, 10);
 80015aa:	210a      	movs	r1, #10
 80015ac:	2004      	movs	r0, #4
 80015ae:	f000 f931 	bl	8001814 <setTimer>
  setTimer(6, 10);
 80015b2:	210a      	movs	r1, #10
 80015b4:	2006      	movs	r0, #6
 80015b6:	f000 f92d 	bl	8001814 <setTimer>
  setTimer(7, 500);
 80015ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015be:	2007      	movs	r0, #7
 80015c0:	f000 f928 	bl	8001814 <setTimer>
  setTimer(8, 500);
 80015c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015c8:	2008      	movs	r0, #8
 80015ca:	f000 f923 	bl	8001814 <setTimer>
  setTimer(10, 10);
 80015ce:	210a      	movs	r1, #10
 80015d0:	200a      	movs	r0, #10
 80015d2:	f000 f91f 	bl	8001814 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */

	  if(timer_flag[10]==1){
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <main+0x78>)
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d108      	bne.n	80015f0 <main+0x60>
		  setTimer(10, 1000);
 80015de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015e2:	200a      	movs	r0, #10
 80015e4:	f000 f916 	bl	8001814 <setTimer>
		  HAL_GPIO_TogglePin(LED_BLINKY_GPIO_Port, LED_BLINKY_Pin);
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	4808      	ldr	r0, [pc, #32]	; (800160c <main+0x7c>)
 80015ec:	f000 fe2b 	bl	8002246 <HAL_GPIO_TogglePin>
	  }
	  fsm_manual_run();
 80015f0:	f7ff fc94 	bl	8000f1c <fsm_manual_run>
	  FSM_Display_2LED();
 80015f4:	f7ff ff0a 	bl	800140c <FSM_Display_2LED>
	  fsm_traffic_lane1_run();
 80015f8:	f7ff ff10 	bl	800141c <fsm_traffic_lane1_run>
	  fsm_traffic_lane2_run();
 80015fc:	f7ff ff62 	bl	80014c4 <fsm_traffic_lane2_run>
	  if(timer_flag[10]==1){
 8001600:	e7e9      	b.n	80015d6 <main+0x46>
 8001602:	bf00      	nop
 8001604:	20000144 	.word	0x20000144
 8001608:	2000011c 	.word	0x2000011c
 800160c:	40010800 	.word	0x40010800

08001610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b090      	sub	sp, #64	; 0x40
 8001614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	2228      	movs	r2, #40	; 0x28
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f001 fe1a 	bl	8003258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001636:	2301      	movs	r3, #1
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163a:	2310      	movs	r3, #16
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001642:	f107 0318 	add.w	r3, r7, #24
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fe16 	bl	8002278 <HAL_RCC_OscConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001652:	f000 f8d9 	bl	8001808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001656:	230f      	movs	r3, #15
 8001658:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f001 f882 	bl	8002778 <HAL_RCC_ClockConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800167a:	f000 f8c5 	bl	8001808 <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	3740      	adds	r7, #64	; 0x40
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	463b      	mov	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_TIM2_Init+0x94>)
 80016a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_TIM2_Init+0x94>)
 80016ae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80016b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_TIM2_Init+0x94>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_TIM2_Init+0x94>)
 80016bc:	2209      	movs	r2, #9
 80016be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_TIM2_Init+0x94>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_TIM2_Init+0x94>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016cc:	4813      	ldr	r0, [pc, #76]	; (800171c <MX_TIM2_Init+0x94>)
 80016ce:	f001 f9bb 	bl	8002a48 <HAL_TIM_Base_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016d8:	f000 f896 	bl	8001808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	4619      	mov	r1, r3
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <MX_TIM2_Init+0x94>)
 80016ea:	f001 fb51 	bl	8002d90 <HAL_TIM_ConfigClockSource>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016f4:	f000 f888 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_TIM2_Init+0x94>)
 8001706:	f001 fd19 	bl	800313c <HAL_TIMEx_MasterConfigSynchronization>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001710:	f000 f87a 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000144 	.word	0x20000144

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b29      	ldr	r3, [pc, #164]	; (80017dc <MX_GPIO_Init+0xbc>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a28      	ldr	r2, [pc, #160]	; (80017dc <MX_GPIO_Init+0xbc>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <MX_GPIO_Init+0xbc>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <MX_GPIO_Init+0xbc>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <MX_GPIO_Init+0xbc>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b20      	ldr	r3, [pc, #128]	; (80017dc <MX_GPIO_Init+0xbc>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|green1_Pin|yellow1_Pin|red2_Pin
 8001764:	2200      	movs	r2, #0
 8001766:	f64f 01fe 	movw	r1, #63742	; 0xf8fe
 800176a:	481d      	ldr	r0, [pc, #116]	; (80017e0 <MX_GPIO_Init+0xc0>)
 800176c:	f000 fd53 	bl	8002216 <HAL_GPIO_WritePin>
                          |green2_Pin|yellow2_Pin|LED_BLINKY_Pin|aa_Pin
                          |bb_Pin|cc_Pin|dd_Pin|ee_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|EN2_Pin
 8001770:	2200      	movs	r2, #0
 8001772:	f643 717f 	movw	r1, #16255	; 0x3f7f
 8001776:	481b      	ldr	r0, [pc, #108]	; (80017e4 <MX_GPIO_Init+0xc4>)
 8001778:	f000 fd4d 	bl	8002216 <HAL_GPIO_WritePin>
                          |EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin green1_Pin yellow1_Pin red2_Pin
                           green2_Pin yellow2_Pin LED_BLINKY_Pin aa_Pin
                           bb_Pin cc_Pin dd_Pin ee_Pin */
  GPIO_InitStruct.Pin = red1_Pin|green1_Pin|yellow1_Pin|red2_Pin
 800177c:	f64f 03fe 	movw	r3, #63742	; 0xf8fe
 8001780:	60bb      	str	r3, [r7, #8]
                          |green2_Pin|yellow2_Pin|LED_BLINKY_Pin|aa_Pin
                          |bb_Pin|cc_Pin|dd_Pin|ee_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2302      	movs	r3, #2
 800178c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4619      	mov	r1, r3
 8001794:	4812      	ldr	r0, [pc, #72]	; (80017e0 <MX_GPIO_Init+0xc0>)
 8001796:	f000 fbad 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin EN2_Pin
                           EN3_Pin ff_Pin gg_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin EN0_Pin
                           EN1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|EN2_Pin
 800179a:	f643 737f 	movw	r3, #16255	; 0x3f7f
 800179e:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|ff_Pin|gg_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|EN0_Pin
                          |EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2302      	movs	r3, #2
 80017aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	4619      	mov	r1, r3
 80017b2:	480c      	ldr	r0, [pc, #48]	; (80017e4 <MX_GPIO_Init+0xc4>)
 80017b4:	f000 fb9e 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80017b8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80017bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_GPIO_Init+0xc0>)
 80017ce:	f000 fb91 	bl	8001ef4 <HAL_GPIO_Init>

}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40010800 	.word	0x40010800
 80017e4:	40010c00 	.word	0x40010c00

080017e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	timerRun();
 80017f0:	f000 f856 	bl	80018a0 <timerRun>
	//getKeyInput();
	//getkey();
	getKeyInput1();
 80017f4:	f7fe fce0 	bl	80001b8 <getKeyInput1>
	getKeyInput2();
 80017f8:	f7fe fd3a 	bl	8000270 <getKeyInput2>
	getKeyInput3();
 80017fc:	f7fe fd94 	bl	8000328 <getKeyInput3>

}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	e7fe      	b.n	8001810 <Error_Handler+0x8>
	...

08001814 <setTimer>:

int timer_counter[10] = {0};
int timer_flag[10] = {0};


void setTimer(int i, int duration){
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	timer_flag[i] = 0;
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <setTimer+0x30>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2100      	movs	r1, #0
 8001824:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[i] = duration/TICK;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <setTimer+0x34>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001832:	4906      	ldr	r1, [pc, #24]	; (800184c <setTimer+0x38>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	2000011c 	.word	0x2000011c
 8001848:	2000007c 	.word	0x2000007c
 800184c:	200000f4 	.word	0x200000f4

08001850 <timer_run>:
void timer_run(int i){
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	if(timer_counter[i] > 0){
 8001858:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <timer_run+0x48>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	2b00      	cmp	r3, #0
 8001862:	dd13      	ble.n	800188c <timer_run+0x3c>
		timer_counter[i]--;
 8001864:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <timer_run+0x48>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	490a      	ldr	r1, [pc, #40]	; (8001898 <timer_run+0x48>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0) timer_flag[i] = 1;
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <timer_run+0x48>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	2b00      	cmp	r3, #0
 8001880:	dc04      	bgt.n	800188c <timer_run+0x3c>
 8001882:	4a06      	ldr	r2, [pc, #24]	; (800189c <timer_run+0x4c>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2101      	movs	r1, #1
 8001888:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	200000f4 	.word	0x200000f4
 800189c:	2000011c 	.word	0x2000011c

080018a0 <timerRun>:
void timerRun(){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	timer_run(0);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff ffd3 	bl	8001850 <timer_run>
	timer_run(1);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f7ff ffd0 	bl	8001850 <timer_run>
	timer_run(2);
 80018b0:	2002      	movs	r0, #2
 80018b2:	f7ff ffcd 	bl	8001850 <timer_run>
	timer_run(3);
 80018b6:	2003      	movs	r0, #3
 80018b8:	f7ff ffca 	bl	8001850 <timer_run>
	timer_run(4);
 80018bc:	2004      	movs	r0, #4
 80018be:	f7ff ffc7 	bl	8001850 <timer_run>
	timer_run(5);
 80018c2:	2005      	movs	r0, #5
 80018c4:	f7ff ffc4 	bl	8001850 <timer_run>
	timer_run(6);
 80018c8:	2006      	movs	r0, #6
 80018ca:	f7ff ffc1 	bl	8001850 <timer_run>
	timer_run(7);
 80018ce:	2007      	movs	r0, #7
 80018d0:	f7ff ffbe 	bl	8001850 <timer_run>
	timer_run(8);
 80018d4:	2008      	movs	r0, #8
 80018d6:	f7ff ffbb 	bl	8001850 <timer_run>
	timer_run(9);
 80018da:	2009      	movs	r0, #9
 80018dc:	f7ff ffb8 	bl	8001850 <timer_run>

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_MspInit+0x5c>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_MspInit+0x5c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6193      	str	r3, [r2, #24]
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_MspInit+0x5c>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_MspInit+0x5c>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_MspInit+0x5c>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_MspInit+0x5c>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_MspInit+0x60>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_MspInit+0x60>)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	40021000 	.word	0x40021000
 8001944:	40010000 	.word	0x40010000

08001948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001958:	d113      	bne.n	8001982 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_TIM_Base_MspInit+0x44>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_TIM_Base_MspInit+0x44>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_TIM_Base_MspInit+0x44>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	201c      	movs	r0, #28
 8001978:	f000 fa85 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800197c:	201c      	movs	r0, #28
 800197e:	f000 fa9e 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000

08001990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <NMI_Handler+0x4>

08001996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <HardFault_Handler+0x4>

0800199c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <MemManage_Handler+0x4>

080019a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <BusFault_Handler+0x4>

080019a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <UsageFault_Handler+0x4>

080019ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d6:	f000 f963 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <TIM2_IRQHandler+0x10>)
 80019e6:	f001 f8cb 	bl	8002b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000144 	.word	0x20000144

080019f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <red_1>:
#include "traffic_2_lane.h"

void red_1(void){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2102      	movs	r1, #2
 8001a08:	4807      	ldr	r0, [pc, #28]	; (8001a28 <red_1+0x28>)
 8001a0a:	f000 fc04 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2104      	movs	r1, #4
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <red_1+0x28>)
 8001a14:	f000 fbff 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2108      	movs	r1, #8
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <red_1+0x28>)
 8001a1e:	f000 fbfa 	bl	8002216 <HAL_GPIO_WritePin>
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40010800 	.word	0x40010800

08001a2c <green_1>:

void green_1(void){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2102      	movs	r1, #2
 8001a34:	4807      	ldr	r0, [pc, #28]	; (8001a54 <green_1+0x28>)
 8001a36:	f000 fbee 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2108      	movs	r1, #8
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <green_1+0x28>)
 8001a40:	f000 fbe9 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2104      	movs	r1, #4
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <green_1+0x28>)
 8001a4a:	f000 fbe4 	bl	8002216 <HAL_GPIO_WritePin>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40010800 	.word	0x40010800

08001a58 <yellow_1>:

void yellow_1(void){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET );
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2102      	movs	r1, #2
 8001a60:	4807      	ldr	r0, [pc, #28]	; (8001a80 <yellow_1+0x28>)
 8001a62:	f000 fbd8 	bl	8002216 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET );
 8001a66:	2201      	movs	r2, #1
 8001a68:	2108      	movs	r1, #8
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <yellow_1+0x28>)
 8001a6c:	f000 fbd3 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET );
 8001a70:	2200      	movs	r2, #0
 8001a72:	2104      	movs	r1, #4
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <yellow_1+0x28>)
 8001a76:	f000 fbce 	bl	8002216 <HAL_GPIO_WritePin>
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40010800 	.word	0x40010800

08001a84 <red_2>:

void red_2(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	4807      	ldr	r0, [pc, #28]	; (8001aac <red_2+0x28>)
 8001a8e:	f000 fbc2 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2120      	movs	r1, #32
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <red_2+0x28>)
 8001a98:	f000 fbbd 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2140      	movs	r1, #64	; 0x40
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <red_2+0x28>)
 8001aa2:	f000 fbb8 	bl	8002216 <HAL_GPIO_WritePin>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40010800 	.word	0x40010800

08001ab0 <green_2>:

void green_2(void) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	4807      	ldr	r0, [pc, #28]	; (8001ad8 <green_2+0x28>)
 8001aba:	f000 fbac 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2140      	movs	r1, #64	; 0x40
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <green_2+0x28>)
 8001ac4:	f000 fba7 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2120      	movs	r1, #32
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <green_2+0x28>)
 8001ace:	f000 fba2 	bl	8002216 <HAL_GPIO_WritePin>
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40010800 	.word	0x40010800

08001adc <yellow_2>:

void yellow_2(void){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET );
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <yellow_2+0x28>)
 8001ae6:	f000 fb96 	bl	8002216 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET );
 8001aea:	2201      	movs	r2, #1
 8001aec:	2140      	movs	r1, #64	; 0x40
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <yellow_2+0x28>)
 8001af0:	f000 fb91 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET );
 8001af4:	2200      	movs	r2, #0
 8001af6:	2120      	movs	r1, #32
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <yellow_2+0x28>)
 8001afa:	f000 fb8c 	bl	8002216 <HAL_GPIO_WritePin>
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40010800 	.word	0x40010800

08001b08 <off_redgreen_lane1>:





void off_redgreen_lane1(){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2102      	movs	r1, #2
 8001b10:	4804      	ldr	r0, [pc, #16]	; (8001b24 <off_redgreen_lane1+0x1c>)
 8001b12:	f000 fb80 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2104      	movs	r1, #4
 8001b1a:	4802      	ldr	r0, [pc, #8]	; (8001b24 <off_redgreen_lane1+0x1c>)
 8001b1c:	f000 fb7b 	bl	8002216 <HAL_GPIO_WritePin>
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40010800 	.word	0x40010800

08001b28 <off_redyellow_lane1>:
void off_redyellow_lane1(){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <off_redyellow_lane1+0x1c>)
 8001b32:	f000 fb70 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2108      	movs	r1, #8
 8001b3a:	4802      	ldr	r0, [pc, #8]	; (8001b44 <off_redyellow_lane1+0x1c>)
 8001b3c:	f000 fb6b 	bl	8002216 <HAL_GPIO_WritePin>
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40010800 	.word	0x40010800

08001b48 <off_greenyellow_lane1>:
void off_greenyellow_lane1(){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <off_greenyellow_lane1+0x1c>)
 8001b52:	f000 fb60 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2108      	movs	r1, #8
 8001b5a:	4802      	ldr	r0, [pc, #8]	; (8001b64 <off_greenyellow_lane1+0x1c>)
 8001b5c:	f000 fb5b 	bl	8002216 <HAL_GPIO_WritePin>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40010800 	.word	0x40010800

08001b68 <off_redgreen_lane2>:





void off_redgreen_lane2(){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET );
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2110      	movs	r1, #16
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <off_redgreen_lane2+0x1c>)
 8001b72:	f000 fb50 	bl	8002216 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2120      	movs	r1, #32
 8001b7a:	4802      	ldr	r0, [pc, #8]	; (8001b84 <off_redgreen_lane2+0x1c>)
 8001b7c:	f000 fb4b 	bl	8002216 <HAL_GPIO_WritePin>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40010800 	.word	0x40010800

08001b88 <off_redyellow_lane2>:
void off_redyellow_lane2(){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2110      	movs	r1, #16
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <off_redyellow_lane2+0x1c>)
 8001b92:	f000 fb40 	bl	8002216 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2140      	movs	r1, #64	; 0x40
 8001b9a:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <off_redyellow_lane2+0x1c>)
 8001b9c:	f000 fb3b 	bl	8002216 <HAL_GPIO_WritePin>
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40010800 	.word	0x40010800

08001ba8 <off_greenyellow_lane2>:
void off_greenyellow_lane2(){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2120      	movs	r1, #32
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <off_greenyellow_lane2+0x1c>)
 8001bb2:	f000 fb30 	bl	8002216 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <off_greenyellow_lane2+0x1c>)
 8001bbc:	f000 fb2b 	bl	8002216 <HAL_GPIO_WritePin>

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40010800 	.word	0x40010800

08001bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bca:	490d      	ldr	r1, [pc, #52]	; (8001c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be0:	4c0a      	ldr	r4, [pc, #40]	; (8001c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bee:	f7ff ff01 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f001 fb0d 	bl	8003210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf6:	f7ff fccb 	bl	8001590 <main>
  bx lr
 8001bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001c04:	080032a8 	.word	0x080032a8
  ldr r2, =_sbss
 8001c08:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001c0c:	20000190 	.word	0x20000190

08001c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC1_2_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_Init+0x28>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_Init+0x28>)
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f923 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 f808 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fe58 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x54>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x58>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f93b 	bl	8001eda <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f903 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <HAL_InitTick+0x5c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000080 	.word	0x20000080
 8001c98:	20000088 	.word	0x20000088
 8001c9c:	20000084 	.word	0x20000084

08001ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_IncTick+0x1c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	20000088 	.word	0x20000088
 8001cc0:	2000018c 	.word	0x2000018c

08001cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <HAL_GetTick+0x10>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	2000018c 	.word	0x2000018c

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4906      	ldr	r1, [pc, #24]	; (8001d70 <__NVIC_EnableIRQ+0x34>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff90 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff2d 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff42 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff90 	bl	8001dc8 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5f 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff35 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffa2 	bl	8001e2c <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b08b      	sub	sp, #44	; 0x2c
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f06:	e148      	b.n	800219a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 8137 	bne.w	8002194 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4aa3      	ldr	r2, [pc, #652]	; (80021b8 <HAL_GPIO_Init+0x2c4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d05e      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f30:	4aa1      	ldr	r2, [pc, #644]	; (80021b8 <HAL_GPIO_Init+0x2c4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d875      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f36:	4aa1      	ldr	r2, [pc, #644]	; (80021bc <HAL_GPIO_Init+0x2c8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d058      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f3c:	4a9f      	ldr	r2, [pc, #636]	; (80021bc <HAL_GPIO_Init+0x2c8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d86f      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f42:	4a9f      	ldr	r2, [pc, #636]	; (80021c0 <HAL_GPIO_Init+0x2cc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d052      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f48:	4a9d      	ldr	r2, [pc, #628]	; (80021c0 <HAL_GPIO_Init+0x2cc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d869      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f4e:	4a9d      	ldr	r2, [pc, #628]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d04c      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f54:	4a9b      	ldr	r2, [pc, #620]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d863      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f5a:	4a9b      	ldr	r2, [pc, #620]	; (80021c8 <HAL_GPIO_Init+0x2d4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d046      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f60:	4a99      	ldr	r2, [pc, #612]	; (80021c8 <HAL_GPIO_Init+0x2d4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d85d      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f66:	2b12      	cmp	r3, #18
 8001f68:	d82a      	bhi.n	8001fc0 <HAL_GPIO_Init+0xcc>
 8001f6a:	2b12      	cmp	r3, #18
 8001f6c:	d859      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f6e:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <HAL_GPIO_Init+0x80>)
 8001f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f74:	08001fef 	.word	0x08001fef
 8001f78:	08001fc9 	.word	0x08001fc9
 8001f7c:	08001fdb 	.word	0x08001fdb
 8001f80:	0800201d 	.word	0x0800201d
 8001f84:	08002023 	.word	0x08002023
 8001f88:	08002023 	.word	0x08002023
 8001f8c:	08002023 	.word	0x08002023
 8001f90:	08002023 	.word	0x08002023
 8001f94:	08002023 	.word	0x08002023
 8001f98:	08002023 	.word	0x08002023
 8001f9c:	08002023 	.word	0x08002023
 8001fa0:	08002023 	.word	0x08002023
 8001fa4:	08002023 	.word	0x08002023
 8001fa8:	08002023 	.word	0x08002023
 8001fac:	08002023 	.word	0x08002023
 8001fb0:	08002023 	.word	0x08002023
 8001fb4:	08002023 	.word	0x08002023
 8001fb8:	08001fd1 	.word	0x08001fd1
 8001fbc:	08001fe5 	.word	0x08001fe5
 8001fc0:	4a82      	ldr	r2, [pc, #520]	; (80021cc <HAL_GPIO_Init+0x2d8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fc6:	e02c      	b.n	8002022 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	623b      	str	r3, [r7, #32]
          break;
 8001fce:	e029      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	623b      	str	r3, [r7, #32]
          break;
 8001fd8:	e024      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e01f      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	330c      	adds	r3, #12
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e01a      	b.n	8002024 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	623b      	str	r3, [r7, #32]
          break;
 8001ffa:	e013      	b.n	8002024 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002004:	2308      	movs	r3, #8
 8002006:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	611a      	str	r2, [r3, #16]
          break;
 800200e:	e009      	b.n	8002024 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002010:	2308      	movs	r3, #8
 8002012:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	615a      	str	r2, [r3, #20]
          break;
 800201a:	e003      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
          break;
 8002020:	e000      	b.n	8002024 <HAL_GPIO_Init+0x130>
          break;
 8002022:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2bff      	cmp	r3, #255	; 0xff
 8002028:	d801      	bhi.n	800202e <HAL_GPIO_Init+0x13a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	e001      	b.n	8002032 <HAL_GPIO_Init+0x13e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3304      	adds	r3, #4
 8002032:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2bff      	cmp	r3, #255	; 0xff
 8002038:	d802      	bhi.n	8002040 <HAL_GPIO_Init+0x14c>
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	e002      	b.n	8002046 <HAL_GPIO_Init+0x152>
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	3b08      	subs	r3, #8
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	210f      	movs	r1, #15
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	401a      	ands	r2, r3
 8002058:	6a39      	ldr	r1, [r7, #32]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	431a      	orrs	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8090 	beq.w	8002194 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002074:	4b56      	ldr	r3, [pc, #344]	; (80021d0 <HAL_GPIO_Init+0x2dc>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a55      	ldr	r2, [pc, #340]	; (80021d0 <HAL_GPIO_Init+0x2dc>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_GPIO_Init+0x2dc>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800208c:	4a51      	ldr	r2, [pc, #324]	; (80021d4 <HAL_GPIO_Init+0x2e0>)
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002098:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a49      	ldr	r2, [pc, #292]	; (80021d8 <HAL_GPIO_Init+0x2e4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00d      	beq.n	80020d4 <HAL_GPIO_Init+0x1e0>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a48      	ldr	r2, [pc, #288]	; (80021dc <HAL_GPIO_Init+0x2e8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d007      	beq.n	80020d0 <HAL_GPIO_Init+0x1dc>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a47      	ldr	r2, [pc, #284]	; (80021e0 <HAL_GPIO_Init+0x2ec>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d101      	bne.n	80020cc <HAL_GPIO_Init+0x1d8>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e004      	b.n	80020d6 <HAL_GPIO_Init+0x1e2>
 80020cc:	2303      	movs	r3, #3
 80020ce:	e002      	b.n	80020d6 <HAL_GPIO_Init+0x1e2>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_GPIO_Init+0x1e2>
 80020d4:	2300      	movs	r3, #0
 80020d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d8:	f002 0203 	and.w	r2, r2, #3
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	4093      	lsls	r3, r2
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020e6:	493b      	ldr	r1, [pc, #236]	; (80021d4 <HAL_GPIO_Init+0x2e0>)
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002100:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4937      	ldr	r1, [pc, #220]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800210e:	4b35      	ldr	r3, [pc, #212]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	43db      	mvns	r3, r3
 8002116:	4933      	ldr	r1, [pc, #204]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002118:	4013      	ands	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002128:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	492d      	ldr	r1, [pc, #180]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
 8002134:	e006      	b.n	8002144 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002136:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	43db      	mvns	r3, r3
 800213e:	4929      	ldr	r1, [pc, #164]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002140:	4013      	ands	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	4923      	ldr	r1, [pc, #140]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	608b      	str	r3, [r1, #8]
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800215e:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	43db      	mvns	r3, r3
 8002166:	491f      	ldr	r1, [pc, #124]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002168:	4013      	ands	r3, r2
 800216a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	4919      	ldr	r1, [pc, #100]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	60cb      	str	r3, [r1, #12]
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	43db      	mvns	r3, r3
 800218e:	4915      	ldr	r1, [pc, #84]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002190:	4013      	ands	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	3301      	adds	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f47f aeaf 	bne.w	8001f08 <HAL_GPIO_Init+0x14>
  }
}
 80021aa:	bf00      	nop
 80021ac:	bf00      	nop
 80021ae:	372c      	adds	r7, #44	; 0x2c
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	10320000 	.word	0x10320000
 80021bc:	10310000 	.word	0x10310000
 80021c0:	10220000 	.word	0x10220000
 80021c4:	10210000 	.word	0x10210000
 80021c8:	10120000 	.word	0x10120000
 80021cc:	10110000 	.word	0x10110000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40010800 	.word	0x40010800
 80021dc:	40010c00 	.word	0x40010c00
 80021e0:	40011000 	.word	0x40011000
 80021e4:	40010400 	.word	0x40010400

080021e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	887b      	ldrh	r3, [r7, #2]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	e001      	b.n	800220a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	807b      	strh	r3, [r7, #2]
 8002222:	4613      	mov	r3, r2
 8002224:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002226:	787b      	ldrb	r3, [r7, #1]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002232:	e003      	b.n	800223c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	041a      	lsls	r2, r3, #16
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	611a      	str	r2, [r3, #16]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr

08002246 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002258:	887a      	ldrh	r2, [r7, #2]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4013      	ands	r3, r2
 800225e:	041a      	lsls	r2, r3, #16
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43d9      	mvns	r1, r3
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	400b      	ands	r3, r1
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e26c      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8087 	beq.w	80023a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002298:	4b92      	ldr	r3, [pc, #584]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d00c      	beq.n	80022be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a4:	4b8f      	ldr	r3, [pc, #572]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d112      	bne.n	80022d6 <HAL_RCC_OscConfig+0x5e>
 80022b0:	4b8c      	ldr	r3, [pc, #560]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022bc:	d10b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022be:	4b89      	ldr	r3, [pc, #548]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d06c      	beq.n	80023a4 <HAL_RCC_OscConfig+0x12c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d168      	bne.n	80023a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e246      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x76>
 80022e0:	4b80      	ldr	r3, [pc, #512]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a7f      	ldr	r2, [pc, #508]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e02e      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x98>
 80022f6:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7a      	ldr	r2, [pc, #488]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b78      	ldr	r3, [pc, #480]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a77      	ldr	r2, [pc, #476]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0xbc>
 800231a:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a71      	ldr	r2, [pc, #452]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a6e      	ldr	r2, [pc, #440]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 8002334:	4b6b      	ldr	r3, [pc, #428]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a6a      	ldr	r2, [pc, #424]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a67      	ldr	r2, [pc, #412]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff fcb6 	bl	8001cc4 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7ff fcb2 	bl	8001cc4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e1fa      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	4b5d      	ldr	r3, [pc, #372]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xe4>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7ff fca2 	bl	8001cc4 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7ff fc9e 	bl	8001cc4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1e6      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	4b53      	ldr	r3, [pc, #332]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x10c>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d063      	beq.n	800247a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b2:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023be:	4b49      	ldr	r3, [pc, #292]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d11c      	bne.n	8002404 <HAL_RCC_OscConfig+0x18c>
 80023ca:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d116      	bne.n	8002404 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_RCC_OscConfig+0x176>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e1ba      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4939      	ldr	r1, [pc, #228]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	e03a      	b.n	800247a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240c:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7ff fc57 	bl	8001cc4 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241a:	f7ff fc53 	bl	8001cc4 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e19b      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4927      	ldr	r1, [pc, #156]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244e:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fc36 	bl	8001cc4 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245c:	f7ff fc32 	bl	8001cc4 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e17a      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d03a      	beq.n	80024fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d019      	beq.n	80024c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002494:	f7ff fc16 	bl	8001cc4 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249c:	f7ff fc12 	bl	8001cc4 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e15a      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f000 faa6 	bl	8002a0c <RCC_Delay>
 80024c0:	e01c      	b.n	80024fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c8:	f7ff fbfc 	bl	8001cc4 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ce:	e00f      	b.n	80024f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d0:	f7ff fbf8 	bl	8001cc4 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d908      	bls.n	80024f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e140      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	42420000 	.word	0x42420000
 80024ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f0:	4b9e      	ldr	r3, [pc, #632]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e9      	bne.n	80024d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80a6 	beq.w	8002656 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250e:	4b97      	ldr	r3, [pc, #604]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10d      	bne.n	8002536 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	4b94      	ldr	r3, [pc, #592]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a93      	ldr	r2, [pc, #588]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	61d3      	str	r3, [r2, #28]
 8002526:	4b91      	ldr	r3, [pc, #580]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b8e      	ldr	r3, [pc, #568]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d118      	bne.n	8002574 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002542:	4b8b      	ldr	r3, [pc, #556]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a8a      	ldr	r2, [pc, #552]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254e:	f7ff fbb9 	bl	8001cc4 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002556:	f7ff fbb5 	bl	8001cc4 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	; 0x64
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0fd      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	4b81      	ldr	r3, [pc, #516]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x312>
 800257c:	4b7b      	ldr	r3, [pc, #492]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4a7a      	ldr	r2, [pc, #488]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6213      	str	r3, [r2, #32]
 8002588:	e02d      	b.n	80025e6 <HAL_RCC_OscConfig+0x36e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0x334>
 8002592:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a75      	ldr	r2, [pc, #468]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	6213      	str	r3, [r2, #32]
 800259e:	4b73      	ldr	r3, [pc, #460]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a72      	ldr	r2, [pc, #456]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	e01c      	b.n	80025e6 <HAL_RCC_OscConfig+0x36e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b05      	cmp	r3, #5
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_OscConfig+0x356>
 80025b4:	4b6d      	ldr	r3, [pc, #436]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a6c      	ldr	r2, [pc, #432]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	6213      	str	r3, [r2, #32]
 80025c0:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4a69      	ldr	r2, [pc, #420]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6213      	str	r3, [r2, #32]
 80025cc:	e00b      	b.n	80025e6 <HAL_RCC_OscConfig+0x36e>
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a66      	ldr	r2, [pc, #408]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6213      	str	r3, [r2, #32]
 80025da:	4b64      	ldr	r3, [pc, #400]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4a63      	ldr	r2, [pc, #396]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d015      	beq.n	800261a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7ff fb69 	bl	8001cc4 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7ff fb65 	bl	8001cc4 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e0ab      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260c:	4b57      	ldr	r3, [pc, #348]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ee      	beq.n	80025f6 <HAL_RCC_OscConfig+0x37e>
 8002618:	e014      	b.n	8002644 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7ff fb53 	bl	8001cc4 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7ff fb4f 	bl	8001cc4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e095      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002638:	4b4c      	ldr	r3, [pc, #304]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ee      	bne.n	8002622 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d105      	bne.n	8002656 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264a:	4b48      	ldr	r3, [pc, #288]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4a47      	ldr	r2, [pc, #284]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 8002650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002654:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8081 	beq.w	8002762 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002660:	4b42      	ldr	r3, [pc, #264]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b08      	cmp	r3, #8
 800266a:	d061      	beq.n	8002730 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d146      	bne.n	8002702 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <HAL_RCC_OscConfig+0x4fc>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7ff fb23 	bl	8001cc4 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002682:	f7ff fb1f 	bl	8001cc4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e067      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002694:	4b35      	ldr	r3, [pc, #212]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f0      	bne.n	8002682 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a8:	d108      	bne.n	80026bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026aa:	4b30      	ldr	r3, [pc, #192]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	492d      	ldr	r1, [pc, #180]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a19      	ldr	r1, [r3, #32]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	430b      	orrs	r3, r1
 80026ce:	4927      	ldr	r1, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCC_OscConfig+0x4fc>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7ff faf3 	bl	8001cc4 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e2:	f7ff faef 	bl	8001cc4 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e037      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x46a>
 8002700:	e02f      	b.n	8002762 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <HAL_RCC_OscConfig+0x4fc>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff fadc 	bl	8001cc4 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7ff fad8 	bl	8001cc4 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e020      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x498>
 800272e:	e018      	b.n	8002762 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e013      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_OscConfig+0x4f4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	429a      	cmp	r2, r3
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	40007000 	.word	0x40007000
 8002774:	42420060 	.word	0x42420060

08002778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0d0      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b6a      	ldr	r3, [pc, #424]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d910      	bls.n	80027bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 0207 	bic.w	r2, r3, #7
 80027a2:	4965      	ldr	r1, [pc, #404]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b63      	ldr	r3, [pc, #396]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0b8      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a58      	ldr	r2, [pc, #352]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ec:	4b53      	ldr	r3, [pc, #332]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	494d      	ldr	r1, [pc, #308]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d040      	beq.n	8002898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d115      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07f      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e073      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06b      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4936      	ldr	r1, [pc, #216]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002868:	f7ff fa2c 	bl	8001cc4 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	e00a      	b.n	8002886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7ff fa28 	bl	8001cc4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e053      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	4b2d      	ldr	r3, [pc, #180]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 020c 	and.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	429a      	cmp	r2, r3
 8002896:	d1eb      	bne.n	8002870 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d210      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0207 	bic.w	r2, r3, #7
 80028ae:	4922      	ldr	r1, [pc, #136]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e032      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4916      	ldr	r1, [pc, #88]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002906:	f000 f821 	bl	800294c <HAL_RCC_GetSysClockFreq>
 800290a:	4602      	mov	r2, r0
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	490a      	ldr	r1, [pc, #40]	; (8002940 <HAL_RCC_ClockConfig+0x1c8>)
 8002918:	5ccb      	ldrb	r3, [r1, r3]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a09      	ldr	r2, [pc, #36]	; (8002944 <HAL_RCC_ClockConfig+0x1cc>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_ClockConfig+0x1d0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff f98a 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	40021000 	.word	0x40021000
 8002940:	08003290 	.word	0x08003290
 8002944:	20000080 	.word	0x20000080
 8002948:	20000084 	.word	0x20000084

0800294c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	b490      	push	{r4, r7}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002952:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002954:	1d3c      	adds	r4, r7, #4
 8002956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800295c:	f240 2301 	movw	r3, #513	; 0x201
 8002960:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002976:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b04      	cmp	r3, #4
 8002984:	d002      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x40>
 8002986:	2b08      	cmp	r3, #8
 8002988:	d003      	beq.n	8002992 <HAL_RCC_GetSysClockFreq+0x46>
 800298a:	e02d      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800298e:	623b      	str	r3, [r7, #32]
      break;
 8002990:	e02d      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	0c9b      	lsrs	r3, r3, #18
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800299e:	4413      	add	r3, r2
 80029a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0c5b      	lsrs	r3, r3, #17
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029be:	4413      	add	r3, r2
 80029c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ca:	fb02 f203 	mul.w	r2, r2, r3
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
 80029d6:	e004      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029dc:	fb02 f303 	mul.w	r3, r2, r3
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	623b      	str	r3, [r7, #32]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ea:	623b      	str	r3, [r7, #32]
      break;
 80029ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ee:	6a3b      	ldr	r3, [r7, #32]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3728      	adds	r7, #40	; 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc90      	pop	{r4, r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	08003280 	.word	0x08003280
 8002a00:	40021000 	.word	0x40021000
 8002a04:	007a1200 	.word	0x007a1200
 8002a08:	003d0900 	.word	0x003d0900

08002a0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <RCC_Delay+0x34>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <RCC_Delay+0x38>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0a5b      	lsrs	r3, r3, #9
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a28:	bf00      	nop
  }
  while (Delay --);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1e5a      	subs	r2, r3, #1
 8002a2e:	60fa      	str	r2, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f9      	bne.n	8002a28 <RCC_Delay+0x1c>
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	20000080 	.word	0x20000080
 8002a44:	10624dd3 	.word	0x10624dd3

08002a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e041      	b.n	8002ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe ff6a 	bl	8001948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f000 fa6a 	bl	8002f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d001      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e035      	b.n	8002b6c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <HAL_TIM_Base_Start_IT+0x90>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_TIM_Base_Start_IT+0x4e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2a:	d004      	beq.n	8002b36 <HAL_TIM_Base_Start_IT+0x4e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_TIM_Base_Start_IT+0x94>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d111      	bne.n	8002b5a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d010      	beq.n	8002b6a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b58:	e007      	b.n	8002b6a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40000400 	.word	0x40000400

08002b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d122      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d11b      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0202 	mvn.w	r2, #2
 8002bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f9b1 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002bc8:	e005      	b.n	8002bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f9a4 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f9b3 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d122      	bne.n	8002c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d11b      	bne.n	8002c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0204 	mvn.w	r2, #4
 8002c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f987 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002c1c:	e005      	b.n	8002c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f97a 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f989 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d122      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d11b      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0208 	mvn.w	r2, #8
 8002c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f95d 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002c70:	e005      	b.n	8002c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f950 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f95f 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b10      	cmp	r3, #16
 8002c90:	d122      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0210 	mvn.w	r2, #16
 8002ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2208      	movs	r2, #8
 8002cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f933 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f926 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f935 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d10e      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0201 	mvn.w	r2, #1
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fd72 	bl	80017e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b80      	cmp	r3, #128	; 0x80
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d107      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fa67 	bl	80031fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8f9 	bl	8002f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d10e      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d107      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0220 	mvn.w	r2, #32
 8002d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa32 	bl	80031ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_TIM_ConfigClockSource+0x18>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e0b3      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x180>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de0:	d03e      	beq.n	8002e60 <HAL_TIM_ConfigClockSource+0xd0>
 8002de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de6:	f200 8087 	bhi.w	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dee:	f000 8085 	beq.w	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df6:	d87f      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002df8:	2b70      	cmp	r3, #112	; 0x70
 8002dfa:	d01a      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0xa2>
 8002dfc:	2b70      	cmp	r3, #112	; 0x70
 8002dfe:	d87b      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e00:	2b60      	cmp	r3, #96	; 0x60
 8002e02:	d050      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x116>
 8002e04:	2b60      	cmp	r3, #96	; 0x60
 8002e06:	d877      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e08:	2b50      	cmp	r3, #80	; 0x50
 8002e0a:	d03c      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0xf6>
 8002e0c:	2b50      	cmp	r3, #80	; 0x50
 8002e0e:	d873      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d058      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x136>
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d86f      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e18:	2b30      	cmp	r3, #48	; 0x30
 8002e1a:	d064      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x156>
 8002e1c:	2b30      	cmp	r3, #48	; 0x30
 8002e1e:	d86b      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d060      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x156>
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d867      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d05c      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x156>
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d05a      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e30:	e062      	b.n	8002ef8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6899      	ldr	r1, [r3, #8]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f000 f95c 	bl	80030fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
      break;
 8002e5e:	e04e      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6899      	ldr	r1, [r3, #8]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f000 f945 	bl	80030fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e82:	609a      	str	r2, [r3, #8]
      break;
 8002e84:	e03b      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f000 f8bc 	bl	8003010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2150      	movs	r1, #80	; 0x50
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f913 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e02b      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f000 f8da 	bl	800306c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2160      	movs	r1, #96	; 0x60
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f903 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002ec4:	e01b      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f000 f89c 	bl	8003010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2140      	movs	r1, #64	; 0x40
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f8f3 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002ee4:	e00b      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	f000 f8ea 	bl	80030ca <TIM_ITRx_SetConfig>
        break;
 8002ef6:	e002      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002efc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a25      	ldr	r2, [pc, #148]	; (8003008 <TIM_Base_SetConfig+0xa8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d007      	beq.n	8002f88 <TIM_Base_SetConfig+0x28>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7e:	d003      	beq.n	8002f88 <TIM_Base_SetConfig+0x28>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a22      	ldr	r2, [pc, #136]	; (800300c <TIM_Base_SetConfig+0xac>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d108      	bne.n	8002f9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <TIM_Base_SetConfig+0xa8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <TIM_Base_SetConfig+0x52>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d003      	beq.n	8002fb2 <TIM_Base_SetConfig+0x52>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a17      	ldr	r2, [pc, #92]	; (800300c <TIM_Base_SetConfig+0xac>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d108      	bne.n	8002fc4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a07      	ldr	r2, [pc, #28]	; (8003008 <TIM_Base_SetConfig+0xa8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d103      	bne.n	8002ff8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	615a      	str	r2, [r3, #20]
}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40000400 	.word	0x40000400

08003010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	f023 0201 	bic.w	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800303a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f023 030a 	bic.w	r3, r3, #10
 800304c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	621a      	str	r2, [r3, #32]
}
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	f023 0210 	bic.w	r2, r3, #16
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003096:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	031b      	lsls	r3, r3, #12
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	621a      	str	r2, [r3, #32]
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f043 0307 	orr.w	r3, r3, #7
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	609a      	str	r2, [r3, #8]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003118:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	021a      	lsls	r2, r3, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	431a      	orrs	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4313      	orrs	r3, r2
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	609a      	str	r2, [r3, #8]
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003150:	2302      	movs	r3, #2
 8003152:	e041      	b.n	80031d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a0:	d004      	beq.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a10      	ldr	r2, [pc, #64]	; (80031e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d10c      	bne.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40000400 	.word	0x40000400

080031ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	2600      	movs	r6, #0
 8003214:	4d0c      	ldr	r5, [pc, #48]	; (8003248 <__libc_init_array+0x38>)
 8003216:	4c0d      	ldr	r4, [pc, #52]	; (800324c <__libc_init_array+0x3c>)
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	42a6      	cmp	r6, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	f000 f822 	bl	8003268 <_init>
 8003224:	2600      	movs	r6, #0
 8003226:	4d0a      	ldr	r5, [pc, #40]	; (8003250 <__libc_init_array+0x40>)
 8003228:	4c0a      	ldr	r4, [pc, #40]	; (8003254 <__libc_init_array+0x44>)
 800322a:	1b64      	subs	r4, r4, r5
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	42a6      	cmp	r6, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	f855 3b04 	ldr.w	r3, [r5], #4
 8003238:	4798      	blx	r3
 800323a:	3601      	adds	r6, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003242:	4798      	blx	r3
 8003244:	3601      	adds	r6, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	080032a0 	.word	0x080032a0
 800324c:	080032a0 	.word	0x080032a0
 8003250:	080032a0 	.word	0x080032a0
 8003254:	080032a4 	.word	0x080032a4

08003258 <memset>:
 8003258:	4603      	mov	r3, r0
 800325a:	4402      	add	r2, r0
 800325c:	4293      	cmp	r3, r2
 800325e:	d100      	bne.n	8003262 <memset+0xa>
 8003260:	4770      	bx	lr
 8003262:	f803 1b01 	strb.w	r1, [r3], #1
 8003266:	e7f9      	b.n	800325c <memset+0x4>

08003268 <_init>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	bf00      	nop
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr

08003274 <_fini>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	bf00      	nop
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr
